#pragma OPENCL EXTENSION cl_viv_vx_extension : enable

#include "cl_viv_vx_ext.h"

_viv_uniform VXC_512Bits uniPackEvenData_2x8;
__kernel void resize_nearest_16bits_2x_upsample
    (
    __read_only image2d_array_t input,
    __write_only image2d_array_t output
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    vxc_short8 src, dst0, dst1;

    int8 input_desc;
    _viv_asm(COPY, input_desc, input, sizeof(input_desc));
    int baseAddr = (int)coord.z * input_desc.s4 + input_desc.s0;
    _viv_asm(MOV, coord.w, baseAddr);
    VXC_OP4(img_load_3d, src, input, coord.xywz, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

    coord.xy <<= 1;

    int8 output_desc;
    _viv_asm(COPY, output_desc, output, sizeof(output_desc));
    baseAddr = (int)coord.z * output_desc.s4 + output_desc.s0;
    _viv_asm(MOV, coord.w, baseAddr);

    dst0 = src.s00112233;
    dst1 = src.s44556677;

    VXC_OP4_NoDest(img_store_3d, output, coord.xywz, dst0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
    coord.y ++;
    VXC_OP4_NoDest(img_store_3d, output, coord.xywz, dst0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
    coord.xy = coord.xy + (int2)(8, -1);
    VXC_OP4_NoDest(img_store_3d, output, coord.xywz, dst1, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
    coord.y ++;
    VXC_OP4_NoDest(img_store_3d, output, coord.xywz, dst1, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
}

__kernel void resize_nearest_8bits_2x_upsample
    (
    __read_only image2d_array_t input,
    __write_only image2d_array_t output
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    vxc_uchar16 src, dst0, dst1;

    int8 input_desc;
    _viv_asm(COPY, input_desc, input, sizeof(input_desc));
    int baseAddr = (int)coord.z * input_desc.s4 + input_desc.s0;
    _viv_asm(MOV, coord.w, baseAddr);
    VXC_OP4(img_load_3d, src, input, coord.xywz, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));

    coord.xy <<= 1;
    int8 output_desc;
    _viv_asm(COPY, output_desc, output, sizeof(output_desc));
    baseAddr = (int)coord.z * output_desc.s4 + output_desc.s0;
    _viv_asm(MOV, coord.w, baseAddr);

    dst0 = src.s0011223344556677;
    dst1 = src.s8899aabbccddeeff;

    VXC_OP4_NoDest(img_store_3d, output, coord.xywz, dst0, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
    coord.y ++;
    VXC_OP4_NoDest(img_store_3d, output, coord.xywz, dst0, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
    coord.xy = coord.xy + (int2)(16, -1);
    VXC_OP4_NoDest(img_store_3d, output, coord.xywz, dst1, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
    coord.y ++;
    VXC_OP4_NoDest(img_store_3d, output, coord.xywz, dst1, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
}

_viv_uniform VXC_512Bits uniMultiplyAndPostShift_2x_up0_2x8;
_viv_uniform VXC_512Bits uniMultiplyAndPostShift_2x_up1_2x8;
_viv_uniform VXC_512Bits uniMultiplyAndPostShift_2x_up2_2x8;
_viv_uniform VXC_512Bits uniMultiplyAndPostShift_2x_up3_2x8;
_viv_uniform int2 multAndoutZP;//[0:15] multiplier, [31:63] output zp

__kernel void resize_nearest_U8toU8_2x_upsample
    (
    __read_only image2d_array_t input,
    __write_only image2d_array_t output
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    vxc_uchar16 src, dst0, dst1;

    int8 input_desc;
    _viv_asm(COPY, input_desc, input, sizeof(input_desc));
    int baseAddr = (int)coord.z * input_desc.s4 + input_desc.s0;
    _viv_asm(MOV, coord.w, baseAddr);
    VXC_OP4(img_load_3d, src, input, coord.xywz, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));

    coord.xy <<= 1;
    int8 output_desc;
    _viv_asm(COPY, output_desc, output, sizeof(output_desc));
    baseAddr = (int)coord.z * output_desc.s4 + output_desc.s0;
    _viv_asm(MOV, coord.w, baseAddr);

    vxc_ushort8 multiplier;
    _viv_asm(COPY, multiplier, multAndoutZP, 16);
    VXC_DP2x8(dst0, src, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniMultiplyAndPostShift_2x_up0_2x8);
    VXC_DP2x8(dst0, src, multiplier, VXC_MODIFIER(8, 15, 0, VXC_RM_ToNearestEven, 1), uniMultiplyAndPostShift_2x_up1_2x8);
    VXC_DP2x8(dst1, src, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniMultiplyAndPostShift_2x_up2_2x8);
    VXC_DP2x8(dst1, src, multiplier, VXC_MODIFIER(8, 15, 0, VXC_RM_ToNearestEven, 1), uniMultiplyAndPostShift_2x_up3_2x8);

    VXC_OP4_NoDest(img_store_3d, output, coord.xywz, dst0, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
    coord.y ++;
    VXC_OP4_NoDest(img_store_3d, output, coord.xywz, dst0, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
    coord.xy = coord.xy + (int2)(16, -1);
    VXC_OP4_NoDest(img_store_3d, output, coord.xywz, dst1, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
    coord.y ++;
    VXC_OP4_NoDest(img_store_3d, output, coord.xywz, dst1, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
}

_viv_uniform VXC_512Bits uniMultiplyAndPostShift_2x_down_2x8;
__kernel void resize_nearest_U8toU8_2x_downsample
    (
    __read_only image2d_array_t input,
    __write_only image2d_array_t output
    )
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    vxc_uchar16 src0;
    vxc_uchar16 dst;
    VXC_ReadImage(src0, input, coord.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));

    coord = coord >> 1;
    vxc_ushort8 multiplier;
    _viv_asm(COPY, multiplier, multAndoutZP, 16);
    VXC_DP2x8(dst, src0, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniMultiplyAndPostShift_2x_down_2x8);

    VXC_WriteImage(output, coord, dst, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
}

__kernel void resize_nearest_16bits_2x_downsample
    (
    __read_only image2d_array_t input,
    __write_only image2d_array_t output
    )
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    vxc_short8 src0, src1;
    VXC_ReadImage(src0, input, coord.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src1, input, coord.xy, VXC_5BITOFFSET_XY(8, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

    coord = coord >> 1;
    VXC_DP2x8(src0, src0, src1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardInf, 0), uniPackEvenData_2x8);
    VXC_WriteImage(output, coord, src0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
}
__kernel void resize_nearest_8bits_2x_downsample
    (
    __read_only image2d_array_t input,
    __write_only image2d_array_t output
    )
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    vxc_char16 src0;
    vxc_char8 dst;
    VXC_ReadImage(src0, input, coord.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));

    coord = coord >> 1;
    dst  = src0.s02468ace;
    VXC_WriteImage(output, coord, dst, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
}

_viv_uniform VXC_512Bits uniMultiplyAndPostShiftLo_2x8;
_viv_uniform VXC_512Bits uniMultiplyAndPostShiftHi_2x8;
__kernel void resize_nearest_F16toI8_2x_upsample
    (
    __read_only image2d_array_t input,
    __write_only image2d_array_t output
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    vxc_short8  vec0, vec1;
    vxc_half8   src0, src1;
    vxc_char16  dst0, dst1;

    int8 input_desc;
    _viv_asm(COPY, input_desc, input, sizeof(input_desc));
    int baseAddr = (int)coord.z * input_desc.s4 + input_desc.s0;
    _viv_asm(MOV, coord.w, baseAddr);
    VXC_OP4(img_load_3d, vec0, input, coord.xywz, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src0, vec0, 16);
    VXC_OP4(img_load_3d, vec1, input, coord.xywz, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src1, vec1, 16);

    coord.xy <<= 1;
    int8 output_desc;
    _viv_asm(COPY, output_desc, output, sizeof(output_desc));
    baseAddr = (int)coord.z * output_desc.s4 + output_desc.s0;
    _viv_asm(MOV, coord.w, baseAddr);

    vxc_ushort8 multiplier;
    _viv_asm(COPY, multiplier, multAndoutZP, 16);
    VXC_DP2x8(dst0, src0, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniMultiplyAndPostShiftLo_2x8);
    VXC_DP2x8(dst0, src0, multiplier, VXC_MODIFIER(8, 15, 0, VXC_RM_ToNearestEven, 1), uniMultiplyAndPostShiftHi_2x8);

    VXC_DP2x8(dst1, src1, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniMultiplyAndPostShiftLo_2x8);
    VXC_DP2x8(dst1, src1, multiplier, VXC_MODIFIER(8, 15, 0, VXC_RM_ToNearestEven, 1), uniMultiplyAndPostShiftHi_2x8);

    VXC_OP4_NoDest(img_store_3d, output, coord.xywz, dst0, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
    coord.y ++;
    VXC_OP4_NoDest(img_store_3d, output, coord.xywz, dst0, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
    coord.y ++;
    VXC_OP4_NoDest(img_store_3d, output, coord.xywz, dst1, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
    coord.y ++;
    VXC_OP4_NoDest(img_store_3d, output, coord.xywz, dst1, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
}

__kernel void resize_nearest_F16toU8_2x_upsample
    (
    __read_only image2d_array_t input,
    __write_only image2d_array_t output
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    vxc_short8  vec0, vec1;
    vxc_half8   src0, src1;
    vxc_uchar16  dst0, dst1;

    int8 input_desc;
    _viv_asm(COPY, input_desc, input, sizeof(input_desc));
    int baseAddr = (int)coord.z * input_desc.s4 + input_desc.s0;
    _viv_asm(MOV, coord.w, baseAddr);
    VXC_OP4(img_load_3d, vec0, input, coord.xywz, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src0, vec0, 16);
    VXC_OP4(img_load_3d, vec1, input, coord.xywz, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src1, vec1, 16);

    coord.xy <<= 1;
    int8 output_desc;
    _viv_asm(COPY, output_desc, output, sizeof(output_desc));
    baseAddr = (int)coord.z * output_desc.s4 + output_desc.s0;
    _viv_asm(MOV, coord.w, baseAddr);

    vxc_ushort8 multiplier;
    _viv_asm(COPY, multiplier, multAndoutZP, 16);
    VXC_DP2x8(dst0, src0, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniMultiplyAndPostShiftLo_2x8);
    VXC_DP2x8(dst0, src0, multiplier, VXC_MODIFIER(8, 15, 0, VXC_RM_ToNearestEven, 1), uniMultiplyAndPostShiftHi_2x8);

    VXC_DP2x8(dst1, src1, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniMultiplyAndPostShiftLo_2x8);
    VXC_DP2x8(dst1, src1, multiplier, VXC_MODIFIER(8, 15, 0, VXC_RM_ToNearestEven, 1), uniMultiplyAndPostShiftHi_2x8);

    VXC_OP4_NoDest(img_store_3d, output, coord.xywz, dst0, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
    coord.y ++;
    VXC_OP4_NoDest(img_store_3d, output, coord.xywz, dst0, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
    coord.y ++;
    VXC_OP4_NoDest(img_store_3d, output, coord.xywz, dst1, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
    coord.y ++;
    VXC_OP4_NoDest(img_store_3d, output, coord.xywz, dst1, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
}

_viv_uniform VXC_512Bits uniMultiplyAndPostShift_2x8;
__kernel void resize_nearest_F16toI8_2x_downsample
    (
    __read_only image2d_array_t input,
    __write_only image2d_array_t output
    )
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    vxc_short8 vec0, vec1;
    vxc_half8 src0, src1;
    vxc_char8 dst;
    VXC_ReadImage(vec0, input, coord.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(vec1, input, coord.xy, VXC_5BITOFFSET_XY(8, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

    coord = coord >> 1;
    VXC_DP2x8(vec0, vec0, vec1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardInf, 0), uniPackEvenData_2x8);
    _viv_asm(COPY, src0, vec0, 16);
    vxc_ushort8 multiplier;
    _viv_asm(COPY, multiplier, multAndoutZP, 16);
    VXC_DP2x8(dst, src0, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniMultiplyAndPostShift_2x8);

    VXC_WriteImage(output, coord, dst, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
}

__kernel void resize_nearest_F16toU8_2x_downsample
    (
    __read_only image2d_array_t input,
    __write_only image2d_array_t output
    )
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    vxc_short8 vec0, vec1;
    vxc_half8 src0, src1;
    vxc_uchar8 dst;
    VXC_ReadImage(vec0, input, coord.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(vec1, input, coord.xy, VXC_5BITOFFSET_XY(8, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

    coord = coord >> 1;
    VXC_DP2x8(vec0, vec0, vec1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardInf, 0), uniPackEvenData_2x8);
    _viv_asm(COPY, src0, vec0, 16);
    vxc_ushort8 multiplier;
    _viv_asm(COPY, multiplier, multAndoutZP, 16);
    VXC_DP2x8(dst, src0, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniMultiplyAndPostShift_2x8);

    VXC_WriteImage(output, coord, dst, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
}

_viv_uniform float2 scale_xy;
__kernel void resize_nearest_F16toF16
    (
    __read_only  image2d_array_t input,
    __write_only image2d_array_t output
    )
{
    int4 coord_out  =  (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);

    int4   coord_x     = coord_out.xxxx + (int4)(0, 1, 2, 3);
    float4 in_x        = convert_float4(coord_x) * scale_xy.xxxx;
    float4 in_x_f      = floor(in_x);
    int4   in_x_idx    = convert_int4(in_x_f);

    float  in_y        = convert_float(coord_out.y) * scale_xy.y;
    float  in_y_f     = floor(in_y);
    int    in_y_idx   = convert_int(in_y_f);


    vxc_short8 src;

    int4 coord_in = (int4)(in_x_idx.x, in_y_idx, coord_out.z, 0);

    int8 input_desc;
    _viv_asm(COPY, input_desc, input, sizeof(input_desc));
    int baseAddr = (int)coord_in.z * input_desc.s4 + input_desc.s0;
    _viv_asm(MOV, coord_in.w, baseAddr);
    VXC_OP4(img_load_3d, src, input, coord_in.xywz, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    coord_in.x = in_x_idx.y;
    VXC_OP4(img_load_3d, src, input, coord_in.xywz, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));
    coord_in.x = in_x_idx.z;
    VXC_OP4(img_load_3d, src, input, coord_in.xywz, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));
    coord_in.x = in_x_idx.w;
    VXC_OP4(img_load_3d, src, input, coord_in.xywz, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));

    int8 output_desc;
    _viv_asm(COPY, output_desc, output, sizeof(output_desc));
    baseAddr = (int)coord_out.z * output_desc.s4 + output_desc.s0;
    _viv_asm(MOV, coord_out.w, baseAddr);

    VXC_OP4_NoDest(img_store_3d, output, coord_out.xywz, src, VXC_MODIFIER(0, 3, 0,VXC_RM_TowardZero, 0));
}

_viv_uniform VXC_512Bits uniGetExtractData_2x8;
__kernel void resize_nearest_F16toF16_OP
    (
    __read_only  image2d_array_t input,
    __write_only image2d_array_t output
    )
{
    int4 coord_out  =  (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);

    int4   coord_x     = coord_out.xxxx + (int4)(0, 1, 2, 3);
    float4 in_x        = convert_float4(coord_x) * scale_xy.xxxx;
    float4 in_x_f      = floor(in_x);
    int4   in_x_idx    = convert_int4(in_x_f);

    float  in_y        = convert_float(coord_out.y) * scale_xy.y;
    float  in_y_f     = floor(in_y);
    int    in_y_idx   = convert_int(in_y_f);


    vxc_ushort8 src0, src1, dst;

    int4 coord_in = (int4)(in_x_idx.x, in_y_idx, coord_out.z, 0);

    int8 input_desc;
    _viv_asm(COPY, input_desc, input, sizeof(input_desc));
    int baseAddr = (int)coord_in.z * input_desc.s4 + input_desc.s0;
    _viv_asm(MOV, coord_in.w, baseAddr);
    VXC_OP4(img_load_3d, src0, input, coord_in.xywz, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_OP4(img_load_3d, src1, input, coord_in.xywz, VXC_5BITOFFSET_XY(8, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

    int8 output_desc;
    _viv_asm(COPY, output_desc, output, sizeof(output_desc));
    baseAddr = (int)coord_out.z * output_desc.s4 + output_desc.s0;
    _viv_asm(MOV, coord_out.w, baseAddr);

    //in_x_idx = in_x_idx - in_x_idx.xxxx;
    vxc_uchar16 mask = (vxc_uchar16)(8, 8, 8, 8, 8, 8, 8, 8, 16, 16, 16, 16, 16, 16, 16, 16);
    vxc_ushort8 input_idx;
    _viv_asm(COPY, input_idx, in_x_idx, 16);
    VXC_DP2x8(mask, input_idx, input_idx, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniGetExtractData_2x8);

    VXC_BitExtract(dst, src0, src1, mask, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));

    VXC_OP4_NoDest(img_store_3d, output, coord_out.xywz, dst, VXC_MODIFIER(0, 3, 0,VXC_RM_TowardZero, 0));
}

_viv_uniform VXC_512Bits uniI8toI8_2x_part0_2x8;
_viv_uniform VXC_512Bits uniI8toI8_2x_part1_2x8;
_viv_uniform VXC_512Bits uniI8toI8_2x_part2_2x8;
_viv_uniform VXC_512Bits uniI8toI8_2x_part3_2x8;
__kernel void resize_nearest_I8toI8_2x_upsample
    (
    __read_only image2d_array_t input,
    __write_only image2d_array_t output
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    vxc_char16 src, dst0, dst1;

    int8 input_desc;
    _viv_asm(COPY, input_desc, input, sizeof(input_desc));
    int baseAddr = (int)coord.z * input_desc.s4 + input_desc.s0;
    _viv_asm(MOV, coord.w, baseAddr);
    VXC_OP4(img_load_3d, src, input, coord.xywz, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));

    coord.xy <<= 1;
    int8 output_desc;
    _viv_asm(COPY, output_desc, output, sizeof(output_desc));
    baseAddr = (int)coord.z * output_desc.s4 + output_desc.s0;
    _viv_asm(MOV, coord.w, baseAddr);

    VXC_DP2x8(dst0, src, src, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniI8toI8_2x_part0_2x8);
    VXC_DP2x8(dst0, src, src, VXC_MODIFIER(8, 15, 0, VXC_RM_ToNearestEven, 1), uniI8toI8_2x_part1_2x8);
    VXC_DP2x8(dst1, src, src, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniI8toI8_2x_part2_2x8);
    VXC_DP2x8(dst1, src, src, VXC_MODIFIER(8, 15, 0, VXC_RM_ToNearestEven, 1), uniI8toI8_2x_part3_2x8);

    VXC_OP4_NoDest(img_store_3d, output, coord.xywz, dst0, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
    coord.y ++;
    VXC_OP4_NoDest(img_store_3d, output, coord.xywz, dst0, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
    coord.xy = coord.xy + (int2)(16, -1);
    VXC_OP4_NoDest(img_store_3d, output, coord.xywz, dst1, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
    coord.y ++;
    VXC_OP4_NoDest(img_store_3d, output, coord.xywz, dst1, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
}

_viv_uniform VXC_512Bits uniI8toI8_2xDown_2x8;
__kernel void resize_nearest_I8toI8_2x_downsample
    (
    __read_only image2d_array_t input,
    __write_only image2d_array_t output
    )
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    vxc_char16 src0;
    vxc_char8 dst;
    VXC_ReadImage(src0, input, coord.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));

    coord = coord >> 1;
    VXC_DP2x8(dst, src0, src0, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniI8toI8_2xDown_2x8);

    VXC_WriteImage(output, coord, dst, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
}

_viv_uniform VXC_512Bits uniConvertI8toI8_2x8;
__kernel void resize_nearest_I8toI8
    (
    __read_only  image2d_array_t input,
    __write_only image2d_array_t output
    )
{
    int4 coord_out  =  (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);

    int4   coord_x     = coord_out.xxxx + (int4)(0, 1, 2, 3);
    float4 in_x        = convert_float4(coord_x) * scale_xy.xxxx;
    float4 in_x_f      = floor(in_x);
    int4   in_x_idx    = convert_int4(in_x_f);

    float  in_y        = convert_float(coord_out.y) * scale_xy.y;
    float  in_y_f     = floor(in_y);
    int    in_y_idx   = convert_int(in_y_f);


    vxc_char16 src;

    int4 coord_in = (int4)(in_x_idx.x, in_y_idx, coord_out.z, 0);

    int8 input_desc;
    _viv_asm(COPY, input_desc, input, sizeof(input_desc));
    int baseAddr = (int)coord_in.z * input_desc.s4 + input_desc.s0;
    _viv_asm(MOV, coord_in.w, baseAddr);
    VXC_OP4(img_load_3d, src, input, coord_in.xywz, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    coord_in.x = in_x_idx.y;
    VXC_OP4(img_load_3d, src, input, coord_in.xywz, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));
    coord_in.x = in_x_idx.z;
    VXC_OP4(img_load_3d, src, input, coord_in.xywz, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));
    coord_in.x = in_x_idx.w;
    VXC_OP4(img_load_3d, src, input, coord_in.xywz, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));

    int8 output_desc;
    _viv_asm(COPY, output_desc, output, sizeof(output_desc));
    baseAddr = (int)coord_out.z * output_desc.s4 + output_desc.s0;
    _viv_asm(MOV, coord_out.w, baseAddr);

    VXC_DP2x8(src, src, src, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniConvertI8toI8_2x8);

    VXC_OP4_NoDest(img_store_3d, output, coord_out.xywz, src, VXC_MODIFIER(0, 3, 0,VXC_RM_TowardZero, 0));
}

__kernel void resize_nearest_I8toI8_OP
    (
    __read_only  image2d_array_t input,
    __write_only image2d_array_t output
    )
{
    int4 coord_out  =  (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);

    int4   coord_x     = coord_out.xxxx + (int4)(0, 1, 2, 3);
    float4 in_x        = convert_float4(coord_x) * scale_xy.xxxx;
    float4 in_x_f      = floor(in_x);
    int4   in_x_idx    = convert_int4(in_x_f);

    float  in_y        = convert_float(coord_out.y) * scale_xy.y;
    float  in_y_f     = floor(in_y);
    int    in_y_idx   = convert_int(in_y_f);


    vxc_uchar16 src0, dst0;
    vxc_char16 dst;

    int4 coord_in = (int4)(in_x_idx.x, in_y_idx, coord_out.z, 0);

    int8 input_desc;
    _viv_asm(COPY, input_desc, input, sizeof(input_desc));
    int baseAddr = (int)coord_in.z * input_desc.s4 + input_desc.s0;
    _viv_asm(MOV, coord_in.w, baseAddr);
    VXC_OP4(img_load_3d, src0, input, coord_in.xywz, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));

    int8 output_desc;
    _viv_asm(COPY, output_desc, output, sizeof(output_desc));
    baseAddr = (int)coord_out.z * output_desc.s4 + output_desc.s0;
    _viv_asm(MOV, coord_out.w, baseAddr);

    vxc_uchar16 mask = (vxc_uchar16)(8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8);
    vxc_ushort8 input_idx;
    _viv_asm(COPY, input_idx, in_x_idx, 16);
    VXC_DP2x8(mask, input_idx, input_idx, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniGetExtractData_2x8);

    VXC_BitExtract(dst0, src0, src0, mask, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));

    _viv_asm(COPY, dst, dst0, 8);
    VXC_DP2x8(dst, dst, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_ToNearestEven, 1), uniConvertI8toI8_2x8);

    VXC_OP4_NoDest(img_store_3d, output, coord_out.xywz, dst, VXC_MODIFIER(0, 3, 0,VXC_RM_TowardZero, 0));
}

__kernel void resize_nearest_U8toU8
    (
    image2d_array_t input,
    image2d_array_t output
    )
{
    int4 coord_out  =  (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);

    int4   coord_x     = coord_out.xxxx + (int4)(0, 1, 2, 3);
    float4 in_x        = convert_float4(coord_x) * scale_xy.xxxx;
    float4 in_x_f      = floor(in_x);
    int4   in_x_idx    = convert_int4(in_x_f);

    float  in_y        = convert_float(coord_out.y) * scale_xy.y;
    float  in_y_f     = floor(in_y);
    int    in_y_idx   = convert_int(in_y_f);


    vxc_uchar16 src;

    int4 coord_in = (int4)(in_x_idx.x, in_y_idx, coord_out.z, 0);

    int8 input_desc;
    _viv_asm(COPY, input_desc, input, sizeof(input_desc));
    int baseAddr = (int)coord_in.z * input_desc.s4 + input_desc.s0;
    _viv_asm(MOV, coord_in.w, baseAddr);
    VXC_OP4(img_load_3d, src, input, coord_in.xywz, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    coord_in.x = in_x_idx.y;
    VXC_OP4(img_load_3d, src, input, coord_in.xywz, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));
    coord_in.x = in_x_idx.z;
    VXC_OP4(img_load_3d, src, input, coord_in.xywz, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));
    coord_in.x = in_x_idx.w;
    VXC_OP4(img_load_3d, src, input, coord_in.xywz, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));

    int8 output_desc;
    _viv_asm(COPY, output_desc, output, sizeof(output_desc));
    baseAddr = (int)coord_out.z * output_desc.s4 + output_desc.s0;
    _viv_asm(MOV, coord_out.w, baseAddr);

    vxc_ushort8 multiplier;
    _viv_asm(COPY, multiplier, multAndoutZP, 16);
    VXC_DP2x8(src, src, multiplier, VXC_MODIFIER(0, 3, 0, VXC_RM_ToNearestEven, 1), uniMultiplyAndPostShift_2x8);

    VXC_OP4_NoDest(img_store_3d, output, coord_out.xywz, src, VXC_MODIFIER(0, 3, 0,VXC_RM_TowardZero, 0));
}


__kernel void resize_nearest_U8toU8_No_Quant
    (
    image2d_array_t input,
    image2d_array_t output
    )
{
    int4 coord_out  =  (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);

    int4   coord_x     = coord_out.xxxx + (int4)(0, 1, 2, 3);
    float4 in_x        = convert_float4(coord_x) * scale_xy.xxxx;
    float4 in_x_f      = floor(in_x);
    int4   in_x_idx    = convert_int4(in_x_f);

    float  in_y        = convert_float(coord_out.y) * scale_xy.y;
    float  in_y_f     = floor(in_y);
    int    in_y_idx   = convert_int(in_y_f);


    vxc_uchar16 src;

    int4 coord_in = (int4)(in_x_idx.x, in_y_idx, coord_out.z, 0);

    int8 input_desc;
    _viv_asm(COPY, input_desc, input, sizeof(input_desc));
    int baseAddr = (int)coord_in.z * input_desc.s4 + input_desc.s0;
    _viv_asm(MOV, coord_in.w, baseAddr);
    VXC_OP4(img_load_3d, src, input, coord_in.xywz, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    coord_in.x = in_x_idx.y;
    VXC_OP4(img_load_3d, src, input, coord_in.xywz, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));
    coord_in.x = in_x_idx.z;
    VXC_OP4(img_load_3d, src, input, coord_in.xywz, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));
    coord_in.x = in_x_idx.w;
    VXC_OP4(img_load_3d, src, input, coord_in.xywz, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));

    int8 output_desc;
    _viv_asm(COPY, output_desc, output, sizeof(output_desc));
    baseAddr = (int)coord_out.z * output_desc.s4 + output_desc.s0;
    _viv_asm(MOV, coord_out.w, baseAddr);

    VXC_OP4_NoDest(img_store_3d, output, coord_out.xywz, src, VXC_MODIFIER(0, 3, 0,VXC_RM_TowardZero, 0));
}

_viv_uniform int depth;

__kernel void resize_nearest_U8toU8_OP_S4
    (
    __read_only  image2d_array_t input,
    __write_only image2d_array_t output,
    __read_only  image2d_array_t mask_t
    )
{
    int4 coord_out  =  (int4)(get_global_id(0), get_global_id(1), 0, 0);
    float in_x        = convert_float(coord_out.x) * scale_xy.x;
    float in_x_f      = floor(in_x);
    int   in_x_idx    = convert_int(in_x_f);
    float  in_y        = convert_float(coord_out.y) * scale_xy.y;
    float  in_y_f     = floor(in_y);
    int    in_y_idx   = convert_int(in_y_f);
    vxc_uchar16 src0, dst;
    int4 coord_in = (int4)(in_x_idx, in_y_idx, 0, 0);
    vxc_uchar16 mask = (vxc_uchar16)(8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8);
    VXC_ReadImage(mask, mask_t, coord_out.xw, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    vxc_ushort8 multiplier;
    _viv_asm(COPY, multiplier, multAndoutZP, 16);
    int8 input_desc;
    _viv_asm(COPY, input_desc, input, sizeof(input_desc));
    int baseAddr = (int)coord_in.z * input_desc.s4 + input_desc.s0;
    _viv_asm(MOV, coord_in.w, baseAddr);
    int8 output_desc;
    _viv_asm(COPY, output_desc, output, sizeof(output_desc));
    baseAddr = (int)coord_out.z * output_desc.s4 + output_desc.s0;
    _viv_asm(MOV, coord_out.w, baseAddr);

    do
    {
        VXC_OP4(img_load_3d, src0, input, coord_in.xywz, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
        coord_in.zw = coord_in.zw + (int2)(1, input_desc.s4);
        VXC_BitExtract(dst, src0, src0, mask, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
        VXC_DP2x8(dst, dst, multiplier, VXC_MODIFIER(0, 3, 0, VXC_RM_ToNearestEven, 1), uniMultiplyAndPostShift_2x8);
        VXC_OP4_NoDest(img_store_3d, output, coord_out.xywz, dst, VXC_MODIFIER(0, 3, 0,VXC_RM_TowardZero, 0));
        coord_out.w += output_desc.s4;
        coord_out.z ++;
    } while (coord_out.z < depth);

}

__kernel void resize_nearest_U8toU8_OP_S4_No_Quant
    (
    __read_only  image2d_array_t input,
    __write_only image2d_array_t output,
    __read_only  image2d_array_t mask_t
    )
{
    int4 coord_out    =  (int4)(get_global_id(0), get_global_id(1), 0, 0);
    float in_x        = convert_float(coord_out.x) * scale_xy.x;
    float in_x_f      = floor(in_x);
    int   in_x_idx    = convert_int(in_x_f);
    float  in_y       = convert_float(coord_out.y) * scale_xy.y;
    float  in_y_f     = floor(in_y);
    int    in_y_idx   = convert_int(in_y_f);
    vxc_uchar16 src0, dst;
    int4 coord_in = (int4)(in_x_idx, in_y_idx, 0, 0);
    vxc_uchar16 mask = (vxc_uchar16)(8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8);
    VXC_ReadImage(mask, mask_t, coord_out.xw, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    int8 input_desc;
    _viv_asm(COPY, input_desc, input, sizeof(input_desc));
    int baseAddr = (int)coord_in.z * input_desc.s4 + input_desc.s0;
    _viv_asm(MOV, coord_in.w, baseAddr);
    int8 output_desc;
    _viv_asm(COPY, output_desc, output, sizeof(output_desc));
    baseAddr = (int)coord_out.z * output_desc.s4 + output_desc.s0;
    _viv_asm(MOV, coord_out.w, baseAddr);

    do
    {
        VXC_OP4(img_load_3d, src0, input, coord_in.xywz, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
        coord_in.zw = coord_in.zw + (int2)(1, input_desc.s4);
        VXC_BitExtract(dst, src0, src0, mask, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
        VXC_OP4_NoDest(img_store_3d, output, coord_out.xywz, dst, VXC_MODIFIER(0, 3, 0,VXC_RM_TowardZero, 0));
        coord_out.w += output_desc.s4;
        coord_out.z ++;
    } while (coord_out.z < depth);

}


__kernel void resize_nearest_U8toU8_OP_S2
    (
    __read_only  image2d_array_t input,
    __write_only image2d_array_t output,
    __read_only  image2d_array_t mask_t
    )
{
    int4 coord_out  =  (int4)(get_global_id(0), get_global_id(1), 0, 0);
    float in_x        = convert_float(coord_out.x) * scale_xy.x;
    float in_x_f      = floor(in_x);
    int   in_x_idx    = convert_int(in_x_f);
    float  in_y        = convert_float(coord_out.y) * scale_xy.y;
    float  in_y_f     = floor(in_y);
    int    in_y_idx   = convert_int(in_y_f);
    vxc_uchar16 src0, dst;
    int4 coord_in = (int4)(in_x_idx, in_y_idx, 0, 0);
    vxc_uchar16 mask = (vxc_uchar16)(8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8);
    VXC_ReadImage(mask, mask_t, coord_out.xw, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    vxc_ushort8 multiplier;
    _viv_asm(COPY, multiplier, multAndoutZP, 16);
    int8 input_desc;
    _viv_asm(COPY, input_desc, input, sizeof(input_desc));
    int baseAddr = (int)coord_in.z * input_desc.s4 + input_desc.s0;
    _viv_asm(MOV, coord_in.w, baseAddr);
    int8 output_desc;
    _viv_asm(COPY, output_desc, output, sizeof(output_desc));
    baseAddr = (int)coord_out.z * output_desc.s4 + output_desc.s0;
    _viv_asm(MOV, coord_out.w, baseAddr);

    do
    {
        VXC_OP4(img_load_3d, src0, input, coord_in.xywz, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
        coord_in.zw = coord_in.zw + (int2)(1, input_desc.s4);
        VXC_BitExtract(dst, src0, src0, mask, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
        VXC_DP2x8(dst, dst, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniMultiplyAndPostShift_2x8);
        VXC_OP4_NoDest(img_store_3d, output, coord_out.xywz, dst, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
        coord_out.w += output_desc.s4;
        coord_out.z ++;
    } while (coord_out.z < depth);

}

__kernel void resize_nearest_U8toU8_OP_S2_No_Quant
    (
    __read_only  image2d_array_t input,
    __write_only image2d_array_t output,
    __read_only  image2d_array_t mask_t
    )
{
    int4 coord_out    =  (int4)(get_global_id(0), get_global_id(1), 0, 0);
    float in_x        = convert_float(coord_out.x) * scale_xy.x;
    float in_x_f      = floor(in_x);
    int   in_x_idx    = convert_int(in_x_f);
    float  in_y       = convert_float(coord_out.y) * scale_xy.y;
    float  in_y_f     = floor(in_y);
    int    in_y_idx   = convert_int(in_y_f);
    vxc_uchar16 src0, dst;
    int4 coord_in = (int4)(in_x_idx, in_y_idx, 0, 0);
    vxc_uchar16 mask = (vxc_uchar16)(8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8);
    VXC_ReadImage(mask, mask_t, coord_out.xw, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    int8 input_desc;
    _viv_asm(COPY, input_desc, input, sizeof(input_desc));
    int baseAddr = (int)coord_in.z * input_desc.s4 + input_desc.s0;
    _viv_asm(MOV, coord_in.w, baseAddr);
    int8 output_desc;
    _viv_asm(COPY, output_desc, output, sizeof(output_desc));
    baseAddr = (int)coord_out.z * output_desc.s4 + output_desc.s0;
    _viv_asm(MOV, coord_out.w, baseAddr);

    do
    {
        VXC_OP4(img_load_3d, src0, input, coord_in.xywz, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
        coord_in.zw = coord_in.zw + (int2)(1, input_desc.s4);
        VXC_BitExtract(dst, src0, src0, mask, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
        VXC_OP4_NoDest(img_store_3d, output, coord_out.xywz, dst, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
        coord_out.w += output_desc.s4;
        coord_out.z ++;
    } while (coord_out.z < depth);

}

_viv_uniform VXC_512Bits uniMultiplyAndPostShift2_2x8;

__kernel void resize_nearest_U8toU8_OP_S1
    (
    __read_only  image2d_array_t input,
    __write_only image2d_array_t output,
    __read_only  image2d_array_t mask_t
    )
{
    int4 coord_out    =  (int4)(get_global_id(0), get_global_id(1), 0, 0);
    float in_x        = convert_float(coord_out.x) * scale_xy.x;
    float in_x_f      = floor(in_x);
    int   in_x_idx    = convert_int(in_x_f);
    float  in_y       = convert_float(coord_out.y) * scale_xy.y;
    float  in_y_f     = floor(in_y);
    int    in_y_idx   = convert_int(in_y_f);
    vxc_uchar16 src0, dst;
    int4 coord_in = (int4)(in_x_idx, in_y_idx, 0, 0);
    vxc_uchar16 mask  = (vxc_uchar16)(8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8);
    vxc_uchar16 mask2 = (vxc_uchar16)(8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8);
    VXC_ReadImage(mask,  mask_t, coord_out.xw, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(mask2, mask_t, coord_out.xw, VXC_5BITOFFSET_XY(8, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    vxc_ushort8 multiplier;
    _viv_asm(COPY, multiplier, multAndoutZP, 16);
    int8 input_desc;
    _viv_asm(COPY, input_desc, input, sizeof(input_desc));
    int baseAddr = (int)coord_in.z * input_desc.s4 + input_desc.s0;
    _viv_asm(MOV, coord_in.w, baseAddr);
    int8 output_desc;
    _viv_asm(COPY, output_desc, output, sizeof(output_desc));
    baseAddr = (int)coord_out.z * output_desc.s4 + output_desc.s0;
    _viv_asm(MOV, coord_out.w, baseAddr);

    do
    {
        VXC_OP4(img_load_3d, src0, input, coord_in.xywz, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
        coord_in.zw = coord_in.zw + (int2)(1, input_desc.s4);
        VXC_BitExtract(dst, src0, src0, mask,  VXC_MODIFIER(0,  7, 0, VXC_RM_TowardZero, 0));
        VXC_BitExtract(dst, src0, src0, mask2, VXC_MODIFIER(8, 15, 0, VXC_RM_TowardZero, 0));
        VXC_DP2x8(dst, dst, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1),  uniMultiplyAndPostShift_2x8);
        VXC_DP2x8(dst, dst, multiplier, VXC_MODIFIER(8, 15, 0, VXC_RM_ToNearestEven, 1), uniMultiplyAndPostShift2_2x8);
        VXC_OP4_NoDest(img_store_3d, output, coord_out.xywz, dst, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
        coord_out.w += output_desc.s4;
        coord_out.z ++;
    } while (coord_out.z < depth);

}

__kernel void resize_nearest_U8toU8_OP_S1_No_Quant
    (
    __read_only  image2d_array_t input,
    __write_only image2d_array_t output,
    __read_only  image2d_array_t mask_t
    )
{
    int4 coord_out    =  (int4)(get_global_id(0), get_global_id(1), 0, 0);
    float in_x        = convert_float(coord_out.x) * scale_xy.x;
    float in_x_f      = floor(in_x);
    int   in_x_idx    = convert_int(in_x_f);
    float  in_y       = convert_float(coord_out.y) * scale_xy.y;
    float  in_y_f     = floor(in_y);
    int    in_y_idx   = convert_int(in_y_f);
    vxc_uchar16 src0, dst;
    int4 coord_in = (int4)(in_x_idx, in_y_idx, 0, 0);
    vxc_uchar16 mask  = (vxc_uchar16)(8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8);
    vxc_uchar16 mask2 = (vxc_uchar16)(8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8);
    VXC_ReadImage(mask,  mask_t, coord_out.xw, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(mask2, mask_t, coord_out.xw, VXC_5BITOFFSET_XY(8, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    int8 input_desc;
    _viv_asm(COPY, input_desc, input, sizeof(input_desc));
    int baseAddr = (int)coord_in.z * input_desc.s4 + input_desc.s0;
    _viv_asm(MOV, coord_in.w, baseAddr);
    int8 output_desc;
    _viv_asm(COPY, output_desc, output, sizeof(output_desc));
    baseAddr = (int)coord_out.z * output_desc.s4 + output_desc.s0;
    _viv_asm(MOV, coord_out.w, baseAddr);

    do
    {
        VXC_OP4(img_load_3d, src0, input, coord_in.xywz, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
        coord_in.zw = coord_in.zw + (int2)(1, input_desc.s4);
        VXC_BitExtract(dst, src0, src0, mask, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
        VXC_BitExtract(dst, src0, src0, mask2, VXC_MODIFIER(8, 15, 0, VXC_RM_TowardZero, 0));
        VXC_OP4_NoDest(img_store_3d, output, coord_out.xywz, dst, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
        coord_out.w += output_desc.s4;
        coord_out.z ++;
    } while (coord_out.z < depth);

}

__kernel void resize_nearest_I16toI16_2x_upsample
    (
    __read_only image2d_array_t input,
    __write_only image2d_array_t output
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    vxc_short8 src, dst0, dst1;

    int8 input_desc;
    _viv_asm(COPY, input_desc, input, sizeof(input_desc));
    int baseAddr = (int)coord.z * input_desc.s4 + input_desc.s0;
    _viv_asm(MOV, coord.w, baseAddr);
    VXC_OP4(img_load_3d, src, input, coord.xywz, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

    coord.xy <<= 1;
    int8 output_desc;
    _viv_asm(COPY, output_desc, output, sizeof(output_desc));
    baseAddr = (int)coord.z * output_desc.s4 + output_desc.s0;
    _viv_asm(MOV, coord.w, baseAddr);

    VXC_DP2x8(dst0, src, src, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniI8toI8_2x_part0_2x8);
    VXC_DP2x8(dst1, src, src, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniI8toI8_2x_part1_2x8);

    VXC_OP4_NoDest(img_store_3d, output, coord.xywz, dst0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
    coord.y ++;
    VXC_OP4_NoDest(img_store_3d, output, coord.xywz, dst0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
    coord.xy = coord.xy + (int2)(8, -1);
    VXC_OP4_NoDest(img_store_3d, output, coord.xywz, dst1, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
    coord.y ++;
    VXC_OP4_NoDest(img_store_3d, output, coord.xywz, dst1, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
}

_viv_uniform VXC_512Bits uniI16toI16_2xDown_2x8;
__kernel void resize_nearest_I16toI16_2x_downsample
    (
    __read_only image2d_array_t input,
    __write_only image2d_array_t output
    )
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    vxc_short8 src0, src1;
    vxc_short8 dst;
    VXC_ReadImage(src0, input, coord.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src1, input, coord.xy, VXC_5BITOFFSET_XY(8, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

    coord = coord >> 1;
    VXC_DP2x8(dst, src0, src1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniI16toI16_2xDown_2x8);

    VXC_WriteImage(output, coord, dst, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
}

__kernel void resize_nearest_I16toI16
    (
    __read_only  image2d_array_t input,
    __write_only image2d_array_t output
    )
{
    int4 coord_out  =  (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);

    int4   coord_x     = coord_out.xxxx + (int4)(0, 1, 2, 3);
    float4 in_x        = convert_float4(coord_x) * scale_xy.xxxx;
    float4 in_x_f      = floor(in_x);
    int4   in_x_idx    = convert_int4(in_x_f);

    float  in_y        = convert_float(coord_out.y) * scale_xy.y;
    float  in_y_f     = floor(in_y);
    int    in_y_idx   = convert_int(in_y_f);


    vxc_short8 src;

    int4 coord_in = (int4)(in_x_idx.x, in_y_idx, coord_out.z, 0);

    int8 input_desc;
    _viv_asm(COPY, input_desc, input, sizeof(input_desc));
    int baseAddr = (int)coord_in.z * input_desc.s4 + input_desc.s0;
    _viv_asm(MOV, coord_in.w, baseAddr);
    VXC_OP4(img_load_3d, src, input, coord_in.xywz, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    coord_in.x = in_x_idx.y;
    VXC_OP4(img_load_3d, src, input, coord_in.xywz, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));
    coord_in.x = in_x_idx.z;
    VXC_OP4(img_load_3d, src, input, coord_in.xywz, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));
    coord_in.x = in_x_idx.w;
    VXC_OP4(img_load_3d, src, input, coord_in.xywz, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));

    int8 output_desc;
    _viv_asm(COPY, output_desc, output, sizeof(output_desc));
    baseAddr = (int)coord_out.z * output_desc.s4 + output_desc.s0;
    _viv_asm(MOV, coord_out.w, baseAddr);

    VXC_DP2x8(src, src, src, VXC_MODIFIER(0, 3, 0, VXC_RM_ToNearestEven, 1), uniConvertI8toI8_2x8);

    VXC_OP4_NoDest(img_store_3d, output, coord_out.xywz, src, VXC_MODIFIER(0, 3, 0,VXC_RM_TowardZero, 0));
}

__kernel void resize_nearest_I16toI16_OP
    (
    __read_only  image2d_array_t input,
    __write_only image2d_array_t output
    )
{
    int4 coord_out  =  (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);

    int4   coord_x     = coord_out.xxxx + (int4)(0, 1, 2, 3);
    float4 in_x        = convert_float4(coord_x) * scale_xy.xxxx;
    float4 in_x_f      = floor(in_x);
    int4   in_x_idx    = convert_int4(in_x_f);

    float  in_y        = convert_float(coord_out.y) * scale_xy.y;
    float  in_y_f     = floor(in_y);
    int    in_y_idx   = convert_int(in_y_f);


    vxc_ushort8 src0, src1, dst0;
    vxc_short8 dst;

    int4 coord_in = (int4)(in_x_idx.x, in_y_idx, coord_out.z, 0);

    int8 input_desc;
    _viv_asm(COPY, input_desc, input, sizeof(input_desc));
    int baseAddr = (int)coord_in.z * input_desc.s4 + input_desc.s0;
    _viv_asm(MOV, coord_in.w, baseAddr);
    VXC_OP4(img_load_3d, src0, input, coord_in.xywz, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_OP4(img_load_3d, src1, input, coord_in.xywz, VXC_5BITOFFSET_XY(8, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

    int8 output_desc;
    _viv_asm(COPY, output_desc, output, sizeof(output_desc));
    baseAddr = (int)coord_out.z * output_desc.s4 + output_desc.s0;
    _viv_asm(MOV, coord_out.w, baseAddr);

    //in_x_idx = in_x_idx - in_x_idx.xxxx;
    vxc_uchar16 mask = (vxc_uchar16)(8, 8, 8, 8, 8, 8, 8, 8, 16, 16, 16, 16, 16, 16, 16, 16);
    vxc_ushort8 input_idx;
    _viv_asm(COPY, input_idx, in_x_idx, 16);
    VXC_DP2x8(mask, input_idx, input_idx, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniGetExtractData_2x8);

    VXC_BitExtract(dst0, src0, src1, mask, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));

    _viv_asm(COPY, dst, dst0, 8);
    VXC_DP2x8(dst, dst, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_ToNearestEven, 1), uniConvertI8toI8_2x8);

    VXC_OP4_NoDest(img_store_3d, output, coord_out.xywz, dst, VXC_MODIFIER(0, 3, 0,VXC_RM_TowardZero, 0));
}
