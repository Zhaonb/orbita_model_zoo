#pragma OPENCL EXTENSION cl_viv_vx_extension : enable

#include "cl_viv_vx_ext.h"

_viv_uniform VXC_512Bits uniF16Mul2F16_2x8;

#define TENSOR_ABS_F16(dst_name, dst_type, copy_type) \
    __kernel void abs_F16to##dst_name \
    ( \
    __read_only  image2d_array_t    input, \
    __write_only image2d_array_t    output \
    ) \
{ \
    vxc_short8 src0, src1; \
    vxc_half8  line0, line1; \
    dst_type   temp; \
    copy_type  dst; \
 \
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0); \
 \
    VXC_ReadImage2DArray(src0, input, coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, line0, src0, 16); \
    src1 = min(src0, 0); \
 \
    _viv_asm(COPY, line1, src1, 16); \
    VXC_DP2x8(temp, line0, line1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniF16Mul2F16_2x8); \
    _viv_asm(COPY, dst, temp, 16); \
 \
    VXC_WriteImage2DArray(output, coord, dst, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
}
TENSOR_ABS_F16(F16, vxc_half8, vxc_short8)
TENSOR_ABS_F16(I8,  vxc_char8, vxc_char8)
TENSOR_ABS_F16(I16, vxc_short8, vxc_short8)

#define TENSOR_ABS_F16_2D(dst_name, dst_type, copy_type) \
    __kernel void abs_F16to##dst_name##_2D \
    ( \
    __read_only  image2d_array_t    input, \
    __write_only image2d_array_t    output \
    ) \
{ \
    vxc_short8 src0, src1; \
    vxc_half8  line0, line1; \
    dst_type   temp; \
    copy_type  dst; \
 \
    int2 coord = (int2)(get_global_id(0), get_global_id(1)); \
 \
    VXC_ReadImage(src0, input, coord.xy, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, line0, src0, 16); \
 \
    src1 = min(src0, 0); \
    _viv_asm(COPY, line1, src1, 16); \
 \
    VXC_DP2x8(temp, line0, line1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniF16Mul2F16_2x8); \
    _viv_asm(COPY, dst, temp, 16); \
 \
    VXC_WriteImage(output, coord.xy, dst, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
}
TENSOR_ABS_F16_2D(F16, vxc_half8, vxc_short8)
TENSOR_ABS_F16_2D(I8,  vxc_char8, vxc_char8)
TENSOR_ABS_F16_2D(I16, vxc_short8, vxc_short8)

_viv_uniform VXC_512Bits uniAbsI8Lo_2x8;
_viv_uniform VXC_512Bits uniAbsI8Hi_2x8;

__kernel void abs_I8toI8
    (
    __read_only  image2d_array_t    input,
    __write_only image2d_array_t    output
    )
{
    vxc_char16  src0, dst;
    vxc_uchar16 src1;

    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);

    VXC_ReadImage2DArray(src0, input, coord, 0, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));

    src1 = abs(src0);
    VXC_DP2x8(src0, src1, src1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniAbsI8Lo_2x8);
    VXC_DP2x8(src0, src1, src1, VXC_MODIFIER(8, 15, 0, VXC_RM_ToNearestEven, 1), uniAbsI8Hi_2x8);
    VXC_WriteImage2DArray(output, coord, src0, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
}

__kernel void abs_I8toI8_2D
    (
    __read_only  image2d_array_t    input,
    __write_only image2d_array_t    output
    )
{
    vxc_char16  src0, dst;
    vxc_uchar16 src1;

    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(1), get_global_id(1));

    VXC_ReadImage(src0, input, coord.xy, 0, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));

    src1 = abs(src0);
    VXC_DP2x8(src0, src1, src1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniAbsI8Lo_2x8);
    VXC_DP2x8(src0, src1, src1, VXC_MODIFIER(8, 15, 0, VXC_RM_ToNearestEven, 1), uniAbsI8Hi_2x8);
    VXC_WriteImage(output, coord.xy, src0, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
}

__kernel void abs_I8toF16
    (
    __read_only  image2d_array_t    input,
    __write_only image2d_array_t    output
    )
{
    vxc_char16  src0;
    vxc_uchar16 src1;
    vxc_short8  vec0, vec1;
    vxc_half8   dst0, dst1;

    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);

    VXC_ReadImage2DArray(src0, input, coord, 0, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));

    src1 = abs(src0);
    VXC_DP2x8(dst0, src1, src1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniAbsI8Lo_2x8);
    VXC_DP2x8(dst1, src1, src1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniAbsI8Hi_2x8);
    _viv_asm(COPY, vec0, dst0, 16);
    _viv_asm(COPY, vec1, dst1, 16);

    VXC_WriteImage2DArray(output, coord, vec0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    coord.x += 8;
    VXC_WriteImage2DArray(output, coord, vec1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}

__kernel void abs_I8toF16_2D
    (
    __read_only  image2d_array_t    input,
    __write_only image2d_array_t    output
    )
{
    vxc_char16  src0;
    vxc_uchar16 src1;
    vxc_short8  vec0, vec1;
    vxc_half8   dst0, dst1;

    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(0), get_global_id(0));

    VXC_ReadImage(src0, input, coord.xy, 0, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));

    coord.z += 8;

    src1 = abs(src0);
    VXC_DP2x8(dst0, src1, src1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniAbsI8Lo_2x8);
    VXC_DP2x8(dst1, src1, src1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniAbsI8Hi_2x8);
    _viv_asm(COPY, vec0, dst0, 16);
    _viv_asm(COPY, vec1, dst1, 16);

    VXC_WriteImage(output, coord.xy, vec0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_WriteImage(output, coord.zy, vec1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}

__kernel void abs_I16toI16
    (
    __read_only  image2d_array_t    input,
    __write_only image2d_array_t    output
    )
{
    vxc_short8  src0, dst;
    vxc_ushort8 src1;

    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);

    VXC_ReadImage2DArray(src0, input, coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

    src1 = abs(src0);
    VXC_DP2x8(src0, src1, src1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniAbsI8Lo_2x8);
    VXC_WriteImage2DArray(output, coord, src0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}

__kernel void abs_I16toI16_2D
    (
    __read_only  image2d_array_t    input,
    __write_only image2d_array_t    output
    )
{
    vxc_short8  src0, dst;
    vxc_ushort8 src1;

    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(1), get_global_id(1));

    VXC_ReadImage(src0, input, coord.xy, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

    src1 = abs(src0);
    VXC_DP2x8(src0, src1, src1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniAbsI8Lo_2x8);
    VXC_WriteImage(output, coord.xy, src0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}

__kernel void abs_I16toF16
    (
    __read_only  image2d_array_t    input,
    __write_only image2d_array_t    output
    )
{
    vxc_short8  src0;
    vxc_ushort8 src1;
    vxc_short8  vec0;
    vxc_half8   dst0;

    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);

    VXC_ReadImage2DArray(src0, input, coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

    src1 = abs(src0);
    VXC_DP2x8(dst0, src1, src1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniAbsI8Lo_2x8);
    _viv_asm(COPY, vec0, dst0, 16);

    VXC_WriteImage2DArray(output, coord, vec0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}

__kernel void abs_I16toF16_2D
    (
    __read_only  image2d_array_t    input,
    __write_only image2d_array_t    output
    )
{
    vxc_short8  src0;
    vxc_ushort8 src1;
    vxc_short8  vec0, vec1;
    vxc_half8   dst0, dst1;

    int2 coord = (int2)(get_global_id(0), get_global_id(1));

    VXC_ReadImage(src0, input, coord.xy, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

    src1 = abs(src0);
    VXC_DP2x8(dst0, src1, src1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniAbsI8Lo_2x8);
    _viv_asm(COPY, vec0, dst0, 16);

    VXC_WriteImage(output, coord.xy, vec0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}

_viv_uniform int input_zp;
_viv_uniform int2 multAndoutZP;//[0:15] multiplier, [31:63] output zp
_viv_uniform VXC_512Bits uniDataMulAndPostShift_2x8;
_viv_uniform VXC_512Bits uniU8toI16Lo_2x8;
_viv_uniform VXC_512Bits uniU8toI16Hi_2x8;

__kernel void abs_U8toU8
    (
    __read_only  image2d_array_t    input,
    __write_only image2d_array_t    output
    )
{
    vxc_uchar16 src, dst;
    vxc_short8  src0, src1;
    vxc_ushort8 srcA, srcB;

    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);

    VXC_ReadImage2DArray(src, input, coord, 0, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));

    vxc_uchar16 zp;

    _viv_asm(COPY, zp, input_zp, 16);
    VXC_DP2x8(src0, src, zp, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniU8toI16Lo_2x8);
    VXC_DP2x8(src1, src, zp, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniU8toI16Hi_2x8);

    srcA = abs(src0);
    srcB = abs(src1);

    vxc_ushort8 multiplier;
    _viv_asm(COPY, multiplier, multAndoutZP, 16);
    VXC_DP2x8(dst, srcA, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniDataMulAndPostShift_2x8);
    VXC_DP2x8(dst, srcB, multiplier, VXC_MODIFIER(8, 15, 0, VXC_RM_ToNearestEven, 1), uniDataMulAndPostShift_2x8);

    VXC_WriteImage2DArray(output, coord, dst, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
}

__kernel void abs_U8toU8_2D
    (
    __read_only  image2d_array_t    input,
    __write_only image2d_array_t    output
    )
{
    vxc_uchar16 src, dst;
    vxc_short8  src0, src1;
    vxc_ushort8 srcA, srcB;

    int2 coord = (int2)(get_global_id(0), get_global_id(1));

    VXC_ReadImage(src, input, coord, 0, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));

    vxc_uchar16 zp;

    _viv_asm(COPY, zp, input_zp, 16);
    VXC_DP2x8(src0, src, zp, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniU8toI16Lo_2x8);
    VXC_DP2x8(src1, src, zp, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniU8toI16Hi_2x8);

    srcA = abs(src0);
    srcB = abs(src1);

    vxc_ushort8 multiplier;
    _viv_asm(COPY, multiplier, multAndoutZP, 16);
    VXC_DP2x8(dst, srcA, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniDataMulAndPostShift_2x8);
    VXC_DP2x8(dst, srcB, multiplier, VXC_MODIFIER(8, 15, 0, VXC_RM_ToNearestEven, 1), uniDataMulAndPostShift_2x8);

    VXC_WriteImage(output, coord, dst, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
}


__kernel void abs_U8toF16
    (
    __read_only  image2d_array_t    input,
    __write_only image2d_array_t    output
    )
{
    vxc_uchar16 src, dst;
    vxc_short8  src0, src1;
    vxc_ushort8 srcA, srcB;
    vxc_short8  vec0, vec1;
    vxc_half8   dst0, dst1;

    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);

    VXC_ReadImage2DArray(src, input, coord, 0, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));

    vxc_uchar16 zp;

    _viv_asm(COPY, zp, input_zp, 16);
    VXC_DP2x8(src0, src, zp, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniU8toI16Lo_2x8);
    VXC_DP2x8(src1, src, zp, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniU8toI16Hi_2x8);

    srcA = abs(src0);
    srcB = abs(src1);

    vxc_ushort8 multiplier;
    _viv_asm(COPY, multiplier, multAndoutZP, 16);
    VXC_DP2x8(dst0, srcA, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniDataMulAndPostShift_2x8);
    VXC_DP2x8(dst1, srcB, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniDataMulAndPostShift_2x8);
    _viv_asm(COPY, vec0, dst0, 16);
    _viv_asm(COPY, vec1, dst1, 16);

    VXC_WriteImage2DArray(output, coord, vec0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    coord.x += 8;
    VXC_WriteImage2DArray(output, coord, vec1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}

__kernel void abs_U8toF16_2D
    (
    __read_only  image2d_array_t    input,
    __write_only image2d_array_t    output
    )
{
    vxc_uchar16 src, dst;
    vxc_short8  src0, src1;
    vxc_ushort8 srcA, srcB;
    vxc_short8  vec0, vec1;
    vxc_half8   dst0, dst1;

    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(0), get_global_id(0));

    VXC_ReadImage(src, input, coord.xy, 0, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));

    coord.z += 8;

    vxc_uchar16 zp;

    _viv_asm(COPY, zp, input_zp, 16);
    VXC_DP2x8(src0, src, zp, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniU8toI16Lo_2x8);
    VXC_DP2x8(src1, src, zp, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniU8toI16Hi_2x8);

    srcA = abs(src0);
    srcB = abs(src1);

    vxc_ushort8 multiplier;
    _viv_asm(COPY, multiplier, multAndoutZP, 16);
    VXC_DP2x8(dst0, srcA, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniDataMulAndPostShift_2x8);
    VXC_DP2x8(dst1, srcB, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniDataMulAndPostShift_2x8);
    _viv_asm(COPY, vec0, dst0, 16);
    _viv_asm(COPY, vec1, dst1, 16);

    VXC_WriteImage(output, coord.xy, vec0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_WriteImage(output, coord.zy, vec1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}

__kernel void abs_F16toU8
    (
    __read_only  image2d_t          input,
    __write_only image2d_array_t    output
    )
{
    vxc_short8 src0, src1;
    vxc_half8  line0, line1;
    vxc_uchar8 dst;

    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);

    VXC_ReadImage2DArray(src0, input, coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, line0, src0, 16);
    src1 = min(src0, 0);

    _viv_asm(COPY, line1, src1, 16);
    VXC_DP2x8(line0, line0, line1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniF16Mul2F16_2x8);

    vxc_ushort8 multiplier;
    _viv_asm(COPY, multiplier, multAndoutZP, 16);
    VXC_DP2x8(dst, line0, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniDataMulAndPostShift_2x8);

    VXC_WriteImage2DArray(output, coord, dst, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}

__kernel void abs_F16toU8_2D
    (
    __read_only  image2d_t          input,
    __write_only image2d_array_t    output
    )
{
    vxc_short8 src0, src1;
    vxc_half8  line0, line1;
    vxc_uchar8 dst;

    int2 coord = (int2)(get_global_id(0), get_global_id(1));

    VXC_ReadImage(src0, input, coord.xy, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, line0, src0, 16);
    src1 = min(src0, 0);

    _viv_asm(COPY, line1, src1, 16);
    VXC_DP2x8(line0, line0, line1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniF16Mul2F16_2x8);

    vxc_ushort8 multiplier;
    _viv_asm(COPY, multiplier, multAndoutZP, 16);
    VXC_DP2x8(dst, line0, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniDataMulAndPostShift_2x8);

    VXC_WriteImage(output, coord.xy, dst, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}

_viv_uniform VXC_512Bits uniConvBF16toF32_Part0_2x8;
_viv_uniform VXC_512Bits uniConvBF16toF32_Part1_2x8;
_viv_uniform VXC_512Bits uniExtractOddData_2x8;

__kernel void abs_BF16toBF16(
    __read_only  image2d_array_t  input,
    __write_only image2d_array_t  output
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    vxc_ushort8   src0, src1, dst;
    VXC_ReadImage2DArray(src0, input, coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    float4 vecA;
    float4 vecB;
    vxc_short8 zero = (vxc_short8)(0, 0, 0, 0, 0, 0, 0, 0);
    VXC_DP2x8(src1, src0, zero, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniConvBF16toF32_Part0_2x8);
    _viv_asm(COPY, vecA, src1, 16);
    VXC_DP2x8(src1, src0, zero, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniConvBF16toF32_Part1_2x8);
    _viv_asm(COPY, vecB, src1, 16);
    vecA = fabs(vecA);
    vecB = fabs(vecB);
    _viv_asm(COPY, src0, vecA, 16);
    _viv_asm(COPY, src1, vecB, 16);
    VXC_DP2x8(dst, src0, src1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniExtractOddData_2x8);
    VXC_WriteImage2DArray(output, coord, dst, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}

__kernel void abs_BF16toBF16_2D(
    __read_only  image2d_array_t  input,
    __write_only image2d_array_t  output
    )
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    vxc_ushort8   src0, src1, dst;
    VXC_ReadImage(src0, input, coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    float4 vecA;
    float4 vecB;
    vxc_short8 zero = (vxc_short8)(0, 0, 0, 0, 0, 0, 0, 0);
    VXC_DP2x8(src1, src0, zero, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniConvBF16toF32_Part0_2x8);
    _viv_asm(COPY, vecA, src1, 16);
    VXC_DP2x8(src1, src0, zero, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniConvBF16toF32_Part1_2x8);
    _viv_asm(COPY, vecB, src1, 16);
    vecA = fabs(vecA);
    vecB = fabs(vecB);
    _viv_asm(COPY, src0, vecA, 16);
    _viv_asm(COPY, src1, vecB, 16);
    VXC_DP2x8(dst, src0, src1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniExtractOddData_2x8);
    VXC_WriteImage(output, coord, dst, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}
