#pragma OPENCL EXTENSION cl_viv_vx_extension : enable

#include "cl_viv_vx_ext.h"

_viv_uniform int padChn;
_viv_uniform int padTop;
_viv_uniform int padLeft;
_viv_uniform int input_width_minus_1;
_viv_uniform int input_height_minus_1;
_viv_uniform int input_depth_minus_1;

__kernel void pad_reflect_16Bits_whc
    (
    __read_only  image2d_array_t input,
    __write_only image2d_array_t output
    )
{
    int gidx = get_global_id(0);
    int gidy = get_global_id(1);
    int gidz = get_global_id(2);
    int4 coord_out = (int4)(gidx, gidy, gidz, 0);
    int4 coord_in = coord_out;
    coord_in = coord_in - (int4)(padLeft, padTop, padChn, padChn);

    if (coord_in.x < 0)
    {
        coord_in.x = -coord_in.x;
    }
    else if (coord_in.x >= input_width_minus_1)
    {
        coord_in.x = input_width_minus_1 * 2 - coord_in.x;
    }
    if (coord_in.y < 0)
    {
        coord_in.y = -coord_in.y;
    }
    else if (coord_in.y >= input_height_minus_1)
    {
        coord_in.y = input_height_minus_1 * 2 - coord_in.y;
    }
    if (coord_in.z < 0)
    {
        coord_in.z = -coord_in.z;
    }
    else if (coord_in.z >= input_depth_minus_1)
    {
        coord_in.z = input_depth_minus_1 * 2 - coord_in.z;
    }

    vxc_short8 src0;
    VXC_ReadImage2DArray(src0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    VXC_WriteImage2DArray(output, coord_out, src0, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
}

__kernel void pad_reflect_8Bits_whc
    (
    __read_only  image2d_array_t input,
    __write_only image2d_array_t output
    )
{
    int gidx = get_global_id(0);
    int gidy = get_global_id(1);
    int gidz = get_global_id(2);
    int4 coord_out = (int4)(gidx, gidy, gidz, 0);
    int4 coord_in = coord_out;
    coord_in = coord_in - (int4)(padLeft, padTop, padChn, padChn);

    if (coord_in.x < 0)
    {
        coord_in.x = -coord_in.x;
    }
    else if (coord_in.x >= input_width_minus_1)
    {
        coord_in.x = input_width_minus_1 * 2 - coord_in.x;
    }
    if (coord_in.y < 0)
    {
        coord_in.y = -coord_in.y;
    }
    else if (coord_in.y >= input_height_minus_1)
    {
        coord_in.y = input_height_minus_1 * 2 - coord_in.y;
    }
    if (coord_in.z < 0)
    {
        coord_in.z = -coord_in.z;
    }
    else if (coord_in.z >= input_depth_minus_1)
    {
        coord_in.z = input_depth_minus_1 * 2 - coord_in.z;
    }

    vxc_char16 src0;
    VXC_ReadImage2DArray(src0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    VXC_WriteImage2DArray(output, coord_out, src0, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
}

__kernel void pad_reflect_buffer_16Bits_whc
    (
    __read_only  image2d_array_t input,
    __write_only image2d_array_t output
    )
{
    int gidx = get_global_id(0);
    int gidy = get_global_id(1);
    int gidz = get_global_id(2);
    int4 coord_out = (int4)(gidx, gidy, gidz, 0);
    int4 coord_in = coord_out;
    coord_in = coord_in - (int4)(padLeft, padTop, padChn, padChn);

    if (coord_in.x < 0)
    {
        coord_in.x = -coord_in.x;
    }
    else if (coord_in.x >= input_width_minus_1)
    {
        coord_in.x = input_width_minus_1 * 2 - coord_in.x;
    }
    if (coord_in.y < 0)
    {
        coord_in.y = -coord_in.y;
    }
    else if (coord_in.y >= input_height_minus_1)
    {
        coord_in.y = input_height_minus_1 * 2 - coord_in.y;
    }
    if (coord_in.z < 0)
    {
        coord_in.z = -coord_in.z;
    }
    else if (coord_in.z >= input_depth_minus_1)
    {
        coord_in.z = input_depth_minus_1 * 2 - coord_in.z;
    }

    Tensor input_t =  create_tensor_from_image2d_array(input, 2);
    Tensor output_t =  create_tensor_from_image2d_array(output, 2);
    short *input_ptr = (short *)get_tensor_ptr_from_coord(input_t, coord_in);
    short *output_ptr = (short *)get_tensor_ptr_from_coord(output_t, coord_out);

    output_ptr[0] = input_ptr[0];
}

__kernel void pad_reflect_buffer_8Bits_whc
    (
    __read_only  image2d_array_t input,
    __write_only image2d_array_t output
    )
{
    int gidx = get_global_id(0);
    int gidy = get_global_id(1);
    int gidz = get_global_id(2);
    int4 coord_out = (int4)(gidx, gidy, gidz, 0);
    int4 coord_in = coord_out;
    coord_in = coord_in - (int4)(padLeft, padTop, padChn, padChn);

    if (coord_in.x < 0)
    {
        coord_in.x = -coord_in.x;
    }
    else if (coord_in.x >= input_width_minus_1)
    {
        coord_in.x = input_width_minus_1 * 2 - coord_in.x;
    }
    if (coord_in.y < 0)
    {
        coord_in.y = -coord_in.y;
    }
    else if (coord_in.y >= input_height_minus_1)
    {
        coord_in.y = input_height_minus_1 * 2 - coord_in.y;
    }
    if (coord_in.z < 0)
    {
        coord_in.z = -coord_in.z;
    }
    else if (coord_in.z >= input_depth_minus_1)
    {
        coord_in.z = input_depth_minus_1 * 2 - coord_in.z;
    }

    Tensor input_t =  create_tensor_from_image2d_array(input, 1);
    Tensor output_t =  create_tensor_from_image2d_array(output, 1);
    uchar *input_ptr = (uchar *)get_tensor_ptr_from_coord(input_t, coord_in);
    uchar *output_ptr = (uchar *)get_tensor_ptr_from_coord(output_t, coord_out);

    output_ptr[0] = input_ptr[0];
}
