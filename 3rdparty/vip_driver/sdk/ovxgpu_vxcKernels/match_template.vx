__kernel void match_template_hamming
    (
    __read_only   image2d_t      input_img,
    __read_only   image2d_t      template_img,
    __read_only   int            matchingMethod,
    __write_only  image2d_t      output
    )
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    int2 coord_tp = (int2)(0, 0);
    int2 coord_src = (int2)(0, 0);
    int sum = 0;
    int i, j;
    uint template_width = get_image_width(template_img);
    uint template_height = get_image_height(template_img);
    float result;
    uint winLen = template_width * template_height;
    float FLT_EPSILSON1 = 1.192092896e-07F;
    float winCoeff = (float)1. / ((float)winLen + FLT_EPSILSON1);
    uint4 reg0, reg1, reg2;

    for(i = 0; i < template_height; i++)
    {
        for(j = 0; j < (int)(template_width); j ++)
        {
            coord_tp.x = j;
            coord_tp.y = i;
            coord_src.x = coord.x + j;
            coord_src.y = coord.y + i;

            reg0 = read_imageui(input_img, coord_src);
            reg1 = read_imageui(template_img, coord_tp);

            reg2 = reg0 ^ reg1;

            sum += as_int(reg2.x);
        }
    }

    int4 dst;
    result = (float)(winCoeff * ((float)sum));
    dst.x = (int)result;
    write_imagei(output, coord, dst.xxxx);
}

__kernel void match_template_l1
    (
    __read_only   image2d_t      input_img,
    __read_only   image2d_t      template_img,
    __read_only   int            matchingMethod,
    __write_only  image2d_t      output
    )
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    int2 coord_tp = (int2)(0, 0);
    int2 coord_src = (int2)(0, 0);
    int sum = 0;
    int i, j;
    uint template_width = get_image_width(template_img);
    uint template_height = get_image_height(template_img);
    float result;
    uint winLen = template_width * template_height;
    float FLT_EPSILSON1 = 1.192092896e-07F;
    float winCoeff = (float)1. / ((float)winLen + FLT_EPSILSON1);
    uint4 reg0, reg1, reg2;

    for(i = 0; i < template_height; i++)
    {
        for(j = 0; j < (int)template_width; j ++)
        {
            coord_tp.x = j;
            coord_tp.y = i;
            coord_src.x = coord.x + j;
            coord_src.y = coord.y + i;

            reg0 = read_imageui(input_img, coord_src);
            reg1 = read_imageui(template_img, coord_tp);

            reg2 = abs_diff(reg0, reg1);

            sum += as_int(reg2.x);
        }
    }

    int4 dst;
    result = (float)(winCoeff*((float)sum));
    dst.x = (int)result;
    write_imagei(output, coord, dst.xxxx);
}

__kernel void match_template_l2
    (
    __read_only   image2d_t      input_img,
    __read_only   image2d_t      template_img,
    __read_only   int            matchingMethod,
    __write_only  image2d_t      output
    )
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    int2 coord_tp = (int2)(0, 0);
    int2 coord_src = (int2)(0, 0);
    int sum = 0;
    int i, j;
    uint template_width = get_image_width(template_img);
    uint template_height = get_image_height(template_img);
    float result;
    uint winLen = template_width * template_height;
    float FLT_EPSILSON1 = 1.192092896e-07F;
    float winCoeff = (float)1. / ((float)winLen + FLT_EPSILSON1);
    uint4 reg0, reg1, reg2;

    for(i = 0; i < template_height; i++)
    {
        for(j = 0; j < template_width; j ++)
        {
            coord_tp.x = j;
            coord_tp.y = i;
            coord_src.x = coord.x + j;
            coord_src.y = coord.y + i;

            reg0 = read_imageui(input_img, coord_src);
            reg1 = read_imageui(template_img, coord_tp);

            reg2 = abs_diff(reg0, reg1);
            sum += as_int(reg2.x * reg2.x);
        }
    }

    int4 dst;
    result = (float)(winCoeff*((float)sum));
    dst.x = (int)result;
    write_imagei(output, coord, dst.xxxx);
}

__kernel void match_template_ccorr_norm
    (
    __read_only   image2d_t      input_img,
    __read_only   image2d_t      template_img,
    __read_only   int            matchingMethod,
    __write_only  image2d_t      output
    )
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    int2 coord_tp = (int2)(0, 0);
    int2 coord_src = (int2)(0, 0);
    int sum = 0;
    float sum_in = 0;
    float sum_tp = 0;
    int i, j;
    uint template_width = get_image_width(template_img);
    uint template_height = get_image_height(template_img);
    float result;
    short result_s16;
    float FLT_EPSILSON1 = 1.192092896e-07F;
    uint4 reg0, reg1, reg2;
    int in_value, tp_value;
    int dp_value;

    for(i = 0; i < template_height; i++)
    {
        for(j = 0; j < template_width; j++)
        {
            coord_tp.x = j;
            coord_tp.y = i;
            coord_src.x = coord.x + j;
            coord_src.y = coord.y + i;

            reg0 = read_imageui(input_img, coord_src);
            reg1 = read_imageui(template_img, coord_tp);

            int in_v = as_int(reg0.x);
            int tp_v = as_int(reg1.x);
            sum += in_v * tp_v;

            in_value = in_v * in_v;
            sum_in += convert_float_rtp(in_value);

            tp_value = tp_v * tp_v;
            sum_tp += convert_float_rtp(tp_value);
        }
    }

    int4 dst;
    float sqrtsum_v = sqrt(sum_in) * sqrt(sum_tp);
    result = (float)(sum / (sqrtsum_v + FLT_EPSILON));
    int temp = 2 << 13;
    dst.x = (int)(result * temp);
    write_imagei(output, coord, dst.xxxx);
}

__kernel void match_template_l2_norm
    (
    __read_only   image2d_t      input_img,
    __read_only   image2d_t      template_img,
    __read_only   int            matchingMethod,
    __write_only  image2d_t      output
    )
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    int2 coord_tp = (int2)(0, 0);
    int2 coord_src = (int2)(0, 0);
    int sum = 0;
    float sum_in = 0;
    float sum_tp = 0;
    int i, j;
    uint template_width = get_image_width(template_img);
    uint template_height = get_image_height(template_img);
    float result;
    short result_s16;
    float FLT_EPSILSON1 = 1.192092896e-07F;
    uint4 reg0, reg1, reg2;
    int dp_value, in_value, tp_value;

    for(i = 0; i < template_height; i++)
    {
        for(j = 0; j < template_width; j++)
        {
            coord_tp.x = j;
            coord_tp.y = i;
            coord_src.x = coord.x + j;
            coord_src.y = coord.y + i;

            reg0 = read_imageui(input_img, coord_src);
            reg1 = read_imageui(template_img, coord_tp);

            int in_v = as_int(reg0.x);
            int tp_v = as_int(reg1.x);

            int diff = in_v - tp_v;
            sum += diff * diff;

            in_value = in_v * in_v;
            sum_in += convert_float_rtp(in_value);

            tp_value = tp_v * tp_v;
            sum_tp += convert_float_rtp(tp_value);
        }
    }

    int4 dst;
    float sqrtsum_v = sqrt(sum_in) * sqrt(sum_tp);
    result = (float)(sum / (sqrtsum_v + FLT_EPSILON));
    int temp = 2 << 7;
    dst.x = (int)(result * temp);
    write_imagei(output, coord, dst.xxxx);
}

__kernel void match_template_ccorr
    (
    __read_only   image2d_t      input_img,
    __read_only   image2d_t      template_img,
    __read_only   int            matchingMethod,
    __write_only  image2d_t      output
    )
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    int2 coord_tp = (int2)(0, 0);
    int2 coord_src = (int2)(0, 0);
    int sum = 0;
    int i, j;
    uint template_width = get_image_width(template_img);
    uint template_height = get_image_height(template_img);
    float result;
    short result_s16;
    uint winLen = template_width * template_height;
    float FLT_EPSILSON1 = 1.192092896e-07F;
    float winCoeff = (float)1. / ((float)winLen + FLT_EPSILSON1);
    uint4 reg0, reg1, reg2;
    int dp_value;

    for(i = 0; i < template_height; i++)
    {
        for(j = 0; j < template_width; j++)
        {
            coord_tp.x = j;
            coord_tp.y = i;
            coord_src.x = coord.x + j;
            coord_src.y = coord.y + i;

            reg0 = read_imageui(input_img, coord_src);
            reg1 = read_imageui(template_img, coord_tp);

            int in_v = as_int(reg0.x);
            int tp_v = as_int(reg1.x);

            sum += in_v * tp_v;
        }
    }

    int4 dst;
    result = (float)(winCoeff*((float)sum));
    dst.x = (int)(result);
    write_imagei(output, coord, dst.xxxx);
}
