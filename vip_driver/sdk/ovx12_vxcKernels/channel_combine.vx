#pragma OPENCL EXTENSION cl_viv_vx_extension : enable

#include "cl_viv_vx_ext.h"

_viv_uniform VXC_512Bits uniCombineRgbA_2x8;
_viv_uniform VXC_512Bits uniCombineRgbB_2x8;
_viv_uniform VXC_512Bits uniCombineRgbC_2x8;
_viv_uniform VXC_512Bits uniCombineRgbD_2x8;
_viv_uniform VXC_512Bits uniCombineRgbE_2x8;
_viv_uniform VXC_512Bits uniCombineRgbF_2x8;
_viv_uniform VXC_512Bits uniCombineRgbG_2x8;
_viv_uniform VXC_512Bits uniCombineRgbH_2x8;
_viv_uniform VXC_512Bits uniCombineRgbI_2x8;
_viv_uniform VXC_512Bits uniCombineRgbJ_2x8;

_viv_uniform VXC_512Bits uniCombineRgbxA_2x8;
_viv_uniform VXC_512Bits uniCombineRgbxB_2x8;
_viv_uniform VXC_512Bits uniCombineRgbxC_2x8;
_viv_uniform VXC_512Bits uniCombineRgbxD_2x8;

_viv_uniform VXC_512Bits uniCombineUyvyA_2x8;
_viv_uniform VXC_512Bits uniCombineUyvyB_2x8;
_viv_uniform VXC_512Bits uniCombineUyvyC_2x8;
_viv_uniform VXC_512Bits uniCombineUyvyD_2x8;

_viv_uniform VXC_512Bits uniCombineYuyvA_2x8;
_viv_uniform VXC_512Bits uniCombineYuyvB_2x8;
_viv_uniform VXC_512Bits uniCombineYuyvC_2x8;
_viv_uniform VXC_512Bits uniCombineYuyvD_2x8;

_viv_uniform VXC_512Bits uniCombineNv12A_2x8;
_viv_uniform VXC_512Bits uniCombineNv12B_2x8;

_viv_uniform int height_y;
_viv_uniform int height_rsYu;
_viv_uniform int height_rsy;
_viv_uniform int height_u;
_viv_uniform int width;

__kernel void channel_combine_rgb
    (
    __read_only  image2d_t input0,
    __read_only  image2d_t input1,
    __read_only  image2d_t input2,
    __read_only  image2d_t input3,
    __write_only image2d_t output,
    __write_only image2d_t output0,
    __write_only image2d_t output1,
    __write_only image2d_t output2
    )
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    vxc_uchar16 src0, src1, src2;
    vxc_uchar16 tmpVal0, tmpVal1;
    vxc_uchar16 dst0, dst1, dst2;
    VXC_ReadImage(src0, input0, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src1, input1, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src2, input2, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    int4 coord_out = (int4)(get_global_id(0) * 3, get_global_id(1), get_global_id(0) * 3 + 16, get_global_id(0) * 3 + 32);
    VXC_DP2x8(tmpVal0, src0, src1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniCombineRgbA_2x8);
    VXC_DP2x8(tmpVal0, src0, src1, VXC_MODIFIER(8, 15, 0, VXC_RM_TowardZero, 0), uniCombineRgbB_2x8);
    VXC_DP2x8(tmpVal1, src0, src1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniCombineRgbC_2x8);
    VXC_DP2x8(tmpVal1, src0, src1, VXC_MODIFIER(8, 15, 0, VXC_RM_TowardZero, 0), uniCombineRgbD_2x8);

    VXC_DP2x8(dst0, tmpVal0, src2, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniCombineRgbE_2x8);
    VXC_DP2x8(dst0, tmpVal0, src2, VXC_MODIFIER(8, 15, 0, VXC_RM_TowardZero, 0), uniCombineRgbF_2x8);
    VXC_DP2x8(dst1, tmpVal0, src2, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniCombineRgbG_2x8);
    VXC_DP2x8(dst1, tmpVal1, src2, VXC_MODIFIER(8, 15, 0, VXC_RM_TowardZero, 0), uniCombineRgbH_2x8);
    VXC_DP2x8(dst2, tmpVal1, src2, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniCombineRgbI_2x8);
    VXC_DP2x8(dst2, tmpVal1, src2, VXC_MODIFIER(8, 15, 0, VXC_RM_TowardZero, 0), uniCombineRgbJ_2x8);

    VXC_WriteImage(output, coord_out.xy, dst0, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    VXC_WriteImage(output, coord_out.zy, dst1, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    VXC_WriteImage(output, coord_out.wy, dst2, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
}

__kernel void channel_combine_rgbx
    (
    __read_only  image2d_t input0,
    __read_only  image2d_t input1,
    __read_only  image2d_t input2,
    __read_only  image2d_t input3,
    __write_only image2d_t output,
    __write_only image2d_t output0,
    __write_only image2d_t output1,
    __write_only image2d_t output2
    )
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    vxc_uchar16 src0, src1, src2, src3;
    vxc_uchar16 tmpVal0, tmpVal1, tmpVal2, tmpVal3;
    vxc_uchar16 dst0, dst1, dst2, dst3;
    VXC_ReadImage(src0, input0, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src1, input1, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src2, input2, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src3, input3, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    int4 coord_out = (int4)(get_global_id(0) * 4, get_global_id(1), get_global_id(0) * 4 + 16, get_global_id(0) * 4 + 32);
    VXC_DP2x8(tmpVal0, src0, src1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniCombineRgbA_2x8);
    VXC_DP2x8(tmpVal0, src0, src1, VXC_MODIFIER(8, 15, 0, VXC_RM_TowardZero, 0), uniCombineRgbB_2x8);
    VXC_DP2x8(tmpVal1, src0, src1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniCombineRgbC_2x8);
    VXC_DP2x8(tmpVal1, src0, src1, VXC_MODIFIER(8, 15, 0, VXC_RM_TowardZero, 0), uniCombineRgbD_2x8);

    VXC_DP2x8(tmpVal2, src2, src3, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniCombineRgbA_2x8);
    VXC_DP2x8(tmpVal2, src2, src3, VXC_MODIFIER(8, 15, 0, VXC_RM_TowardZero, 0), uniCombineRgbB_2x8);
    VXC_DP2x8(tmpVal3, src2, src3, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniCombineRgbC_2x8);
    VXC_DP2x8(tmpVal3, src2, src3, VXC_MODIFIER(8, 15, 0, VXC_RM_TowardZero, 0), uniCombineRgbD_2x8);

    VXC_DP2x8(dst0, tmpVal0, tmpVal2, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniCombineRgbxA_2x8);
    VXC_DP2x8(dst0, tmpVal0, tmpVal2, VXC_MODIFIER(8, 15, 0, VXC_RM_TowardZero, 0), uniCombineRgbxB_2x8);
    VXC_DP2x8(dst1, tmpVal0, tmpVal2, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniCombineRgbxC_2x8);
    VXC_DP2x8(dst1, tmpVal0, tmpVal2, VXC_MODIFIER(8, 15, 0, VXC_RM_TowardZero, 0), uniCombineRgbxD_2x8);
    VXC_DP2x8(dst2, tmpVal1, tmpVal3, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniCombineRgbxA_2x8);
    VXC_DP2x8(dst2, tmpVal1, tmpVal3, VXC_MODIFIER(8, 15, 0, VXC_RM_TowardZero, 0), uniCombineRgbxB_2x8);
    VXC_DP2x8(dst3, tmpVal1, tmpVal3, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniCombineRgbxC_2x8);
    VXC_DP2x8(dst3, tmpVal1, tmpVal3, VXC_MODIFIER(8, 15, 0, VXC_RM_TowardZero, 0), uniCombineRgbxD_2x8);

    VXC_WriteImage(output, coord_out.xy, dst0, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    VXC_WriteImage(output, coord_out.zy, dst1, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    VXC_WriteImage(output, coord_out.wy, dst2, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    coord_out.w+=16;
    VXC_WriteImage(output, coord_out.wy, dst3, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
}

// 4:2:2
// u0 y0 v0 y1    u1 y2 v1 y3
// follow uv width
__kernel void channel_combine_uyvy
    (
    __read_only  image2d_t input0,
    __read_only  image2d_t input1,
    __read_only  image2d_t input2,
    __read_only  image2d_t input3,
    __write_only image2d_t output,
    __write_only image2d_t output0,
    __write_only image2d_t output1,
    __write_only image2d_t output2
    )
{
    int2 coord_c = (int2)(get_global_id(0), get_global_id(1));
    int4 coord = (int4)(get_global_id(0) * 2, get_global_id(1), get_global_id(0) * 4, get_global_id(0) * 4 + 16);
    vxc_uchar16 src0, src1;
    vxc_uchar16 dst0, dst1;
    VXC_ReadImage(src0, input0, coord.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src1, input1, coord_c, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src1, input2, coord_c, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(8, 15, 0, VXC_RM_TowardZero, 0));

    VXC_DP2x8(dst0, src0, src1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniCombineUyvyA_2x8);
    VXC_DP2x8(dst0, src0, src1, VXC_MODIFIER(8, 15, 0, VXC_RM_TowardZero, 0), uniCombineUyvyB_2x8);
    VXC_DP2x8(dst1, src0, src1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniCombineUyvyC_2x8);
    VXC_DP2x8(dst1, src0, src1, VXC_MODIFIER(8, 15, 0, VXC_RM_TowardZero, 0), uniCombineUyvyD_2x8);

    VXC_WriteImage(output, coord.zy, dst0, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    VXC_WriteImage(output, coord.wy, dst1, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
}

// 4:2:2
// y0 u0 y1 v0    y2 u1 y3 v1
// follow uv width
__kernel void channel_combine_yuyv
    (
    __read_only  image2d_t input0,
    __read_only  image2d_t input1,
    __read_only  image2d_t input2,
    __read_only  image2d_t input3,
    __write_only image2d_t output,
    __write_only image2d_t output0,
    __write_only image2d_t output1,
    __write_only image2d_t output2
    )
{
    int2 coord_c = (int2)(get_global_id(0), get_global_id(1));
    int4 coord = (int4)(get_global_id(0) * 2, get_global_id(1), get_global_id(0) * 4, get_global_id(0) * 4 + 16);
    vxc_uchar16 src0, src1;
    vxc_uchar16 dst0, dst1;
    VXC_ReadImage(src0, input0, coord.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src1, input1, coord_c, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src1, input2, coord_c, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(8, 15, 0, VXC_RM_TowardZero, 0));

    VXC_DP2x8(dst0, src0, src1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniCombineYuyvA_2x8);
    VXC_DP2x8(dst0, src0, src1, VXC_MODIFIER(8, 15, 0, VXC_RM_TowardZero, 0), uniCombineYuyvB_2x8);
    VXC_DP2x8(dst1, src0, src1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniCombineYuyvC_2x8);
    VXC_DP2x8(dst1, src0, src1, VXC_MODIFIER(8, 15, 0, VXC_RM_TowardZero, 0), uniCombineYuyvD_2x8);

    VXC_WriteImage(output, coord.zy, dst0, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    VXC_WriteImage(output, coord.wy, dst1, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
}

// 4:2:0
// y0 y1 y2 y3
// y4 y5 y6 y7
// u0 v0 u1 v1
// follow uv width
__kernel void channel_combine_nv12
    (
    __read_only  image2d_t input0,
    __read_only  image2d_t input1,
    __read_only  image2d_t input2,
    __read_only  image2d_t input3,
    __write_only image2d_t output,
    __write_only image2d_t output0,
    __write_only image2d_t output1,
    __write_only image2d_t output2
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(0) * 2, get_global_id(1) * 2);
    vxc_uchar16 src0, src1, src2, src3;
    vxc_uchar16 dst0, dst1;
    VXC_ReadImage(src0, input0, coord.zw, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src1, input0, coord.zw, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src2, input1, coord.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src3, input2, coord.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    //coord.y += height_y;
    VXC_DP2x8(dst0, src2, src3, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniCombineNv12A_2x8);
    VXC_DP2x8(dst0, src2, src3, VXC_MODIFIER(8, 15, 0, VXC_RM_TowardZero, 0), uniCombineNv12B_2x8);

    VXC_WriteImage(output0, coord.zw, src0, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    coord.w++;
    VXC_WriteImage(output0, coord.zw, src1, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    VXC_WriteImage(output1, coord.zy, dst0, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
}

// 4:2:0
// y0 y1 y2 y3
// y4 y5 y6 y7
// v0 u0 v1 u1
// follow uv width
__kernel void channel_combine_nv21
    (
    __read_only  image2d_t input0,
    __read_only  image2d_t input1,
    __read_only  image2d_t input2,
    __read_only  image2d_t input3,
    __write_only image2d_t output,
    __write_only image2d_t output0,
    __write_only image2d_t output1,
    __write_only image2d_t output2
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(0) * 2, get_global_id(1) * 2);
    vxc_uchar16 src0, src1, src2, src3;
    vxc_uchar16 dst0, dst1;
    VXC_ReadImage(src0, input0, coord.zw, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src1, input0, coord.zw, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src2, input1, coord.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src3, input2, coord.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    //coord.y += height_y;
    VXC_DP2x8(dst0, src3, src2, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniCombineNv12A_2x8);
    VXC_DP2x8(dst0, src3, src2, VXC_MODIFIER(8, 15, 0, VXC_RM_TowardZero, 0), uniCombineNv12B_2x8);

    VXC_WriteImage(output0, coord.zw, src0, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    coord.w++;
    VXC_WriteImage(output0, coord.zw, src1, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    VXC_WriteImage(output1, coord.zy, dst0, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
}

// 4:2:0
// y0 y1 y2 y3
// y4 y5 y6 y7
// u0 u1
// v0 v1
// reshape y width to uv width, main uv
__kernel void channel_combine_iyuv
    (
    __read_only  image2d_t input0,
    __read_only  image2d_t input1,
    __read_only  image2d_t input2,
    __read_only  image2d_t input3,
    __write_only image2d_t output,
    __write_only image2d_t output0,
    __write_only image2d_t output1,
    __write_only image2d_t output2
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(0) * 2, get_global_id(1) * 2 );
    vxc_uchar16 src0, src1, src2, src3, src4, src5;

    VXC_ReadImage(src0, input0, coord.zw, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src1, input0, coord.zw, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src4, input1, coord.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src5, input2, coord.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

    VXC_WriteImage(output0, coord.zw, src0, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    coord.w++;
    VXC_WriteImage(output0, coord.zw, src1, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));

    VXC_WriteImage(output1, coord.xy, src4, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_WriteImage(output2, coord.xy, src5, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}

// yuv4:4:4
__kernel void channel_combine_yuv4
    (
    __read_only  image2d_t input0,
    __read_only  image2d_t input1,
    __read_only  image2d_t input2,
    __read_only  image2d_t input3,
    __write_only image2d_t output,
    __write_only image2d_t output0,
    __write_only image2d_t output1,
    __write_only image2d_t output2
    )
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    vxc_uchar16 src0, src1, src2;
    VXC_ReadImage(src0, input0, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src1, input1, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src2, input2, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));

    VXC_WriteImage(output0, coord, src0, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    VXC_WriteImage(output1, coord, src1, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    VXC_WriteImage(output2, coord, src2, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
}
