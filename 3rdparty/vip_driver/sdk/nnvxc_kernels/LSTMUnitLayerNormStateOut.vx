/*
 ============================================================================
 Author      : Sam
 Version     :
 Copyright   : Your copyright notice
 Description :
 ============================================================================
 */
#pragma OPENCL EXTENSION cl_viv_vx_extension : enable

#include "cl_viv_vx_ext.h"

_viv_uniform float logE;
_viv_uniform float twoLogE;
_viv_uniform int num_units;
_viv_uniform float forget_bias;
float4 sigmoid(float4 x)
{
    x *= -logE;
    x = 1 + exp2(x);
    return 1 / x;
}
float4 tangentH(float4 x)
{
    x *= -twoLogE;
    x = 1 + exp2(x);
    x = 1 / x;
    return 2 * x - 1;
}
_viv_uniform float outputScale;
_viv_uniform float outputZP;
_viv_uniform VXC_512Bits uniExtract8Data_2x8;
_viv_uniform VXC_512Bits uniFp16toFp32_4x4;
_viv_uniform float4 clip_Min_F;
_viv_uniform float4 clip_Max_F;

#define LSTMUNIT_LAYER_NORM_CELL_FP32_PROJECTION_CIFG(out_type_name, convert_type, dst_type, copy_type) \
__kernel void vxcLSTMUnit_LayerNorm_F16to##out_type_name##_CELL_F32_Projection_CIFG( \
    __read_only  image2d_array_t  input_conv, \
    __read_only  image2d_t        cell_state_in, \
    __read_only  image2d_t        biases, \
    __read_only  image2d_t        layer_norm_weights, \
    __write_only image2d_array_t  output, \
    __write_only image2d_t        cell_state_out \
    ) \
{ \
    int4 coord_in = (int4)(get_global_id(0), get_global_id(1), get_global_id(0), 0); \
    vxc_short8 vect0, vect1, vect2, vect3; \
    vxc_half8  src0, src1, src2, src3; \
    float4 data_i_t, data_f_t, data_g_t, data_o_t, data_c_t; \
    float4 w0, w1, w2, b0, b1, b2; \
    VXC_ReadImage(vect1, input_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src1, vect1, 16); \
    coord_in.x += num_units; \
    VXC_ReadImage(vect2, input_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src2, vect2, 16); \
    coord_in.x += num_units; \
    VXC_ReadImage(vect3, input_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src3, vect3, 16); \
    coord_in.z >>= 2; \
    w0 = read_imagef(layer_norm_weights, coord_in.wz); \
    coord_in.w += 4; \
    w1 = read_imagef(layer_norm_weights, coord_in.wz); \
    coord_in.w += 4; \
    w2 = read_imagef(layer_norm_weights, coord_in.wz); \
    coord_in.w = 0; \
    coord_in.x -= 2 * num_units; \
    data_c_t = read_imagef(cell_state_in, coord_in.xy); \
    b0 = read_imagef(biases, coord_in.wz); \
    coord_in.w += 4; \
    b1 = read_imagef(biases, coord_in.wz); \
    coord_in.w += 4; \
    b2 = read_imagef(biases, coord_in.wz); \
    coord_in.z <<= 2; \
 \
    VXC_DP4x4(data_f_t, src1, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4); \
    VXC_DP4x4(data_g_t, src2, src2, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4); \
    VXC_DP4x4(data_o_t, src3, src3, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4); \
    data_f_t = data_f_t * w0 + b0; \
    data_g_t = data_g_t * w1 + b1; \
    data_o_t = data_o_t * w2 + b2; \
 \
    convert_type dst0; \
    data_f_t = sigmoid(data_f_t + forget_bias); \
    data_g_t = tangentH(data_g_t); \
    data_i_t = 1.0 - data_f_t; \
    data_i_t = data_i_t * data_g_t; \
    data_c_t = data_c_t * data_f_t + data_i_t; \
    data_o_t = sigmoid(data_o_t); \
    data_c_t = data_c_t > clip_Max_F ? clip_Max_F : data_c_t; \
    data_c_t = data_c_t < clip_Min_F ? clip_Min_F : data_c_t; \
    write_imagef(cell_state_out, coord_in.zy, data_c_t); \
    data_c_t = tangentH(data_c_t); \
    data_o_t = data_o_t * data_c_t * outputScale + outputZP; \
    _viv_asm(CONV_RTE, dst0, data_o_t); \
    dst_type dst1; \
    VXC_DP2x8(dst1, dst0, dst0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniExtract8Data_2x8); \
    copy_type dst; \
    _viv_asm(COPY, dst, dst1, 16); \
    VXC_WriteImage(output, coord_in.zy, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
}
//LSTMUNIT_LAYER_NORM_CELL_FP32_PROJECTION_CIFG(I8,  int4,  vxc_char4,  vxc_char4)
//LSTMUNIT_LAYER_NORM_CELL_FP32_PROJECTION_CIFG(U8,  int4,  vxc_uchar4, vxc_uchar4)
//LSTMUNIT_LAYER_NORM_CELL_FP32_PROJECTION_CIFG(I16, int4,  vxc_short4, vxc_short4)
LSTMUNIT_LAYER_NORM_CELL_FP32_PROJECTION_CIFG(F16, half4, vxc_half4,  vxc_short4)

_viv_uniform VXC_512Bits uniExtractHalf4_4x4;
#define LSTMUNIT_LAYER_NORM_CELL_FP16_PROJECTION_CIFG(out_type_name, convert_type, dst_type, copy_type) \
__kernel void vxcLSTMUnit_LayerNorm_F16to##out_type_name##_CELL_F16_Projection_CIFG( \
    __read_only  image2d_array_t  input_conv, \
    __read_only  image2d_t        cell_state_in, \
    __read_only  image2d_t        biases, \
    __read_only  image2d_t        layer_norm_weights, \
    __write_only image2d_array_t  output, \
    __write_only image2d_t        cell_state_out \
    ) \
{ \
    int4 coord_in = (int4)(get_global_id(0), get_global_id(1), get_global_id(0), 0); \
    vxc_short8 vect0, vect1, vect2, vect3, vect4; \
    vxc_half8  src0, src1, src2, src3, src4; \
    float4 data_i_t, data_f_t, data_g_t, data_o_t, data_c_t; \
    float4 w0, w1, w2, b0, b1, b2; \
    VXC_ReadImage(vect1, input_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src1, vect1, 16); \
    coord_in.x += num_units; \
    VXC_ReadImage(vect2, input_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src2, vect2, 16); \
    coord_in.x += num_units; \
    VXC_ReadImage(vect3, input_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src3, vect3, 16); \
    coord_in.x -= 2 * num_units; \
    VXC_ReadImage(vect4, cell_state_in, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src4, vect4, 16); \
    coord_in.z >>= 2; \
    w0 = read_imagef(layer_norm_weights, coord_in.wz); \
    coord_in.w += 4; \
    w1 = read_imagef(layer_norm_weights, coord_in.wz); \
    coord_in.w += 4; \
    w2 = read_imagef(layer_norm_weights, coord_in.wz); \
    coord_in.w = 0; \
    b0 = read_imagef(biases, coord_in.wz); \
    coord_in.w += 4; \
    b1 = read_imagef(biases, coord_in.wz); \
    coord_in.w += 4; \
    b2 = read_imagef(biases, coord_in.wz); \
    coord_in.z <<= 2; \
 \
    VXC_DP4x4(data_f_t, src1, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4); \
    VXC_DP4x4(data_g_t, src2, src2, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4); \
    VXC_DP4x4(data_o_t, src3, src3, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4); \
    VXC_DP4x4(data_c_t, src4, src4, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4); \
    data_f_t = data_f_t * w0 + b0; \
    data_g_t = data_g_t * w1 + b1; \
    data_o_t = data_o_t * w2 + b2; \
 \
    convert_type dst0; \
    half4 cell_data; \
    data_f_t = sigmoid(data_f_t + forget_bias); \
    data_g_t = tangentH(data_g_t); \
    data_i_t = 1.0 - data_f_t; \
    data_i_t = data_i_t * data_g_t; \
    data_c_t = data_c_t * data_f_t + data_i_t; \
    data_c_t = data_c_t > clip_Max_F ? clip_Max_F : data_c_t; \
    data_c_t = data_c_t < clip_Min_F ? clip_Min_F : data_c_t; \
    _viv_asm(CONV, cell_data, data_c_t); \
    VXC_DP4x4(src0, cell_data, cell_data, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniExtractHalf4_4x4); \
    _viv_asm(COPY, vect0, src0, 8); \
    VXC_WriteImage(cell_state_out, coord_in.zy, vect0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    data_o_t = sigmoid(data_o_t); \
    data_c_t = tangentH(data_c_t); \
    data_o_t = data_o_t * data_c_t * outputScale + outputZP; \
    _viv_asm(CONV_RTE, dst0, data_o_t); \
    dst_type dst1; \
    VXC_DP2x8(dst1, dst0, dst0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniExtract8Data_2x8); \
    copy_type dst; \
    _viv_asm(COPY, dst, dst1, 16); \
    VXC_WriteImage(output, coord_in.zy, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
}
//LSTMUNIT_LAYER_NORM_CELL_FP16_PROJECTION_CIFG(I8,  int4,  vxc_char4,  vxc_char4)
//LSTMUNIT_LAYER_NORM_CELL_FP16_PROJECTION_CIFG(U8,  int4,  vxc_uchar4, vxc_uchar4)
//LSTMUNIT_LAYER_NORM_CELL_FP16_PROJECTION_CIFG(I16, int4,  vxc_short4, vxc_short4)
LSTMUNIT_LAYER_NORM_CELL_FP16_PROJECTION_CIFG(F16, half4, vxc_half4,  vxc_short4)

#define LSTMUNIT_LAYER_NORM_CELL_FP32_PROJECTION(out_type_name, convert_type, dst_type, copy_type) \
__kernel void vxcLSTMUnit_LayerNorm_F16to##out_type_name##_CELL_F32_Projection( \
    __read_only  image2d_array_t  input_conv, \
    __read_only  image2d_t        cell_state_in, \
    __read_only  image2d_t        biases, \
    __read_only  image2d_t        layer_norm_weights, \
    __write_only image2d_array_t  output, \
    __write_only image2d_t        cell_state_out \
    ) \
{ \
    int4 coord_in = (int4)(get_global_id(0), get_global_id(1), get_global_id(0), 0); \
    vxc_short8 vect0, vect1, vect2, vect3; \
    vxc_half8  src0, src1, src2, src3; \
    float4 data_i_t, data_f_t, data_g_t, data_o_t, data_c_t; \
    float4 w0, w1, w2, w3, b0, b1, b2, b3; \
    VXC_ReadImage(vect0, input_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src0, vect0, 16); \
    coord_in.x += num_units; \
    VXC_ReadImage(vect1, input_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src1, vect1, 16); \
    coord_in.x += num_units; \
    VXC_ReadImage(vect2, input_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src2, vect2, 16); \
    coord_in.x += num_units; \
    VXC_ReadImage(vect3, input_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src3, vect3, 16); \
    coord_in.z >>= 2; \
    w0 = read_imagef(layer_norm_weights, coord_in.wz); \
    coord_in.w += 4; \
    w1 = read_imagef(layer_norm_weights, coord_in.wz); \
    coord_in.w += 4; \
    w2 = read_imagef(layer_norm_weights, coord_in.wz); \
    coord_in.w += 4; \
    w3 = read_imagef(layer_norm_weights, coord_in.wz); \
    coord_in.w = 0; \
    coord_in.x -= 3 * num_units; \
    data_c_t = read_imagef(cell_state_in, coord_in.xy); \
    b0 = read_imagef(biases, coord_in.wz); \
    coord_in.w += 4; \
    b1 = read_imagef(biases, coord_in.wz); \
    coord_in.w += 4; \
    b2 = read_imagef(biases, coord_in.wz); \
    coord_in.w += 4; \
    b3 = read_imagef(biases, coord_in.wz); \
    coord_in.z <<= 2; \
 \
    VXC_DP4x4(data_i_t, src0, src0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4); \
    VXC_DP4x4(data_f_t, src1, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4); \
    VXC_DP4x4(data_g_t, src2, src2, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4); \
    VXC_DP4x4(data_o_t, src3, src3, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4); \
    data_i_t = data_i_t * w0 + b0; \
    data_f_t = data_f_t * w1 + b1; \
    data_g_t = data_g_t * w2 + b2; \
    data_o_t = data_o_t * w3 + b3; \
 \
    convert_type dst0; \
    data_i_t = sigmoid(data_i_t); \
    data_f_t = sigmoid(data_f_t + forget_bias); \
    data_g_t = tangentH(data_g_t); \
    data_i_t = data_i_t * data_g_t; \
    data_c_t = data_c_t * data_f_t + data_i_t; \
    data_o_t = sigmoid(data_o_t); \
    data_c_t = data_c_t > clip_Max_F ? clip_Max_F : data_c_t; \
    data_c_t = data_c_t < clip_Min_F ? clip_Min_F : data_c_t; \
    write_imagef(cell_state_out, coord_in.zy, data_c_t); \
    data_c_t = tangentH(data_c_t); \
    data_o_t = data_o_t * data_c_t * outputScale + outputZP; \
    _viv_asm(CONV_RTE, dst0, data_o_t); \
    dst_type dst1; \
    VXC_DP2x8(dst1, dst0, dst0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniExtract8Data_2x8); \
    copy_type dst; \
    _viv_asm(COPY, dst, dst1, 16); \
    VXC_WriteImage(output, coord_in.zy, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
}
//LSTMUNIT_LAYER_NORM_CELL_FP32_PROJECTION(I8,  int4,  vxc_char4,  vxc_char4)
//LSTMUNIT_LAYER_NORM_CELL_FP32_PROJECTION(U8,  int4,  vxc_uchar4, vxc_uchar4)
//LSTMUNIT_LAYER_NORM_CELL_FP32_PROJECTION(I16, int4,  vxc_short4, vxc_short4)
LSTMUNIT_LAYER_NORM_CELL_FP32_PROJECTION(F16, half4, vxc_half4,  vxc_short4)

#define LSTMUNIT_LAYER_NORM_CELL_FP16_PROJECTION(out_type_name, convert_type, dst_type, copy_type) \
__kernel void vxcLSTMUnit_LayerNorm_F16to##out_type_name##_CELL_F16_Projection( \
    __read_only  image2d_array_t  input_conv, \
    __read_only  image2d_t        cell_state_in, \
    __read_only  image2d_t        biases, \
    __read_only  image2d_t        layer_norm_weights, \
    __write_only image2d_array_t  output, \
    __write_only image2d_t        cell_state_out \
    ) \
{ \
    int4 coord_in = (int4)(get_global_id(0), get_global_id(1), get_global_id(0), 0); \
    vxc_short8 vect0, vect1, vect2, vect3, vect4; \
    vxc_half8  src0, src1, src2, src3, src4; \
    float4 data_i_t, data_f_t, data_g_t, data_o_t, data_c_t; \
    float4 w0, w1, w2, w3, b0, b1, b2, b3; \
    VXC_ReadImage(vect0, input_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src0, vect0, 16); \
    coord_in.x += num_units; \
    VXC_ReadImage(vect1, input_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src1, vect1, 16); \
    coord_in.x += num_units; \
    VXC_ReadImage(vect2, input_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src2, vect2, 16); \
    coord_in.x += num_units; \
    VXC_ReadImage(vect3, input_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src3, vect3, 16); \
    coord_in.x -= 3 * num_units; \
    VXC_ReadImage(vect4, cell_state_in, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src4, vect4, 16); \
    coord_in.z >>= 2; \
    w0 = read_imagef(layer_norm_weights, coord_in.wz); \
    coord_in.w += 4; \
    w1 = read_imagef(layer_norm_weights, coord_in.wz); \
    coord_in.w += 4; \
    w2 = read_imagef(layer_norm_weights, coord_in.wz); \
    coord_in.w += 4; \
    w3 = read_imagef(layer_norm_weights, coord_in.wz); \
    coord_in.w = 0; \
    b0 = read_imagef(biases, coord_in.wz); \
    coord_in.w += 4; \
    b1 = read_imagef(biases, coord_in.wz); \
    coord_in.w += 4; \
    b2 = read_imagef(biases, coord_in.wz); \
    coord_in.w += 4; \
    b3 = read_imagef(biases, coord_in.wz); \
    coord_in.z <<= 2; \
 \
    VXC_DP4x4(data_i_t, src0, src0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4); \
    VXC_DP4x4(data_f_t, src1, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4); \
    VXC_DP4x4(data_g_t, src2, src2, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4); \
    VXC_DP4x4(data_o_t, src3, src3, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4); \
    VXC_DP4x4(data_c_t, src4, src4, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4); \
    data_i_t = data_i_t * w0 + b0; \
    data_f_t = data_f_t * w1 + b1; \
    data_g_t = data_g_t * w2 + b2; \
    data_o_t = data_o_t * w3 + b3; \
 \
    convert_type dst0; \
    half4 cell_data; \
    data_i_t = sigmoid(data_i_t); \
    data_f_t = sigmoid(data_f_t + forget_bias); \
    data_g_t = tangentH(data_g_t); \
    data_i_t = data_i_t * data_g_t; \
    data_c_t = data_c_t * data_f_t + data_i_t; \
    data_c_t = data_c_t > clip_Max_F ? clip_Max_F : data_c_t; \
    data_c_t = data_c_t < clip_Min_F ? clip_Min_F : data_c_t; \
    _viv_asm(CONV, cell_data, data_c_t); \
    VXC_DP4x4(src0, cell_data, cell_data, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniExtractHalf4_4x4); \
    _viv_asm(COPY, vect0, src0, 8); \
    VXC_WriteImage(cell_state_out, coord_in.zy, vect0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    data_o_t = sigmoid(data_o_t); \
    data_c_t = tangentH(data_c_t); \
    data_o_t = data_o_t * data_c_t * outputScale + outputZP; \
    _viv_asm(CONV_RTE, dst0, data_o_t); \
    dst_type dst1; \
    VXC_DP2x8(dst1, dst0, dst0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniExtract8Data_2x8); \
    copy_type dst; \
    _viv_asm(COPY, dst, dst1, 16); \
    VXC_WriteImage(output, coord_in.zy, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
}
//LSTMUNIT_LAYER_NORM_CELL_FP16_PROJECTION(I8,  int4,  vxc_char4,  vxc_char4)
//LSTMUNIT_LAYER_NORM_CELL_FP16_PROJECTION(U8,  int4,  vxc_uchar4, vxc_uchar4)
//LSTMUNIT_LAYER_NORM_CELL_FP16_PROJECTION(I16, int4,  vxc_short4, vxc_short4)
LSTMUNIT_LAYER_NORM_CELL_FP16_PROJECTION(F16, half4, vxc_half4,  vxc_short4)

#define LSTMUNIT_LAYER_NORM_CELL_FP32_CIFG(out_type_name, convert_type, dst_type, copy_type) \
__kernel void vxcLSTMUnit_LayerNorm_F16to##out_type_name##_CELL_F32_CIFG( \
    __read_only  image2d_array_t  input_conv, \
    __read_only  image2d_t        cell_state_in, \
    __read_only  image2d_t        biases, \
    __read_only  image2d_t        layer_norm_weights, \
    __write_only image2d_array_t  output, \
    __write_only image2d_t        cell_state_out, \
    __write_only image2d_t        h_state_out \
    ) \
{ \
    int4 coord_in = (int4)(get_global_id(0), get_global_id(1), get_global_id(0), 0); \
    vxc_short8 vect0, vect1, vect2, vect3; \
    vxc_half8  src0, src1, src2, src3; \
    float4 data_i_t, data_f_t, data_g_t, data_o_t, data_c_t; \
    float4 w0, w1, w2, b0, b1, b2; \
    VXC_ReadImage(vect1, input_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src1, vect1, 16); \
    coord_in.x += num_units; \
    VXC_ReadImage(vect2, input_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src2, vect2, 16); \
    coord_in.x += num_units; \
    VXC_ReadImage(vect3, input_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src3, vect3, 16); \
    coord_in.z >>= 2; \
    w0 = read_imagef(layer_norm_weights, coord_in.wz); \
    coord_in.w += 4; \
    w1 = read_imagef(layer_norm_weights, coord_in.wz); \
    coord_in.w += 4; \
    w2 = read_imagef(layer_norm_weights, coord_in.wz); \
    coord_in.w = 0; \
    coord_in.x -= 2 * num_units; \
    data_c_t = read_imagef(cell_state_in, coord_in.xy); \
    b0 = read_imagef(biases, coord_in.wz); \
    coord_in.w += 4; \
    b1 = read_imagef(biases, coord_in.wz); \
    coord_in.w += 4; \
    b2 = read_imagef(biases, coord_in.wz); \
    coord_in.z <<= 2; \
 \
    VXC_DP4x4(data_f_t, src1, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4); \
    VXC_DP4x4(data_g_t, src2, src2, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4); \
    VXC_DP4x4(data_o_t, src3, src3, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4); \
    data_f_t = data_f_t * w0 + b0; \
    data_g_t = data_g_t * w1 + b1; \
    data_o_t = data_o_t * w2 + b2; \
 \
    convert_type dst0; \
    data_f_t = sigmoid(data_f_t + forget_bias); \
    data_g_t = tangentH(data_g_t); \
    data_i_t = 1.0 - data_f_t; \
    data_i_t = data_i_t * data_g_t; \
    data_c_t = data_c_t * data_f_t + data_i_t; \
    data_o_t = sigmoid(data_o_t); \
    data_c_t = data_c_t > clip_Max_F ? clip_Max_F : data_c_t; \
    data_c_t = data_c_t < clip_Min_F ? clip_Min_F : data_c_t; \
    write_imagef(cell_state_out, coord_in.zy, data_c_t); \
    data_c_t = tangentH(data_c_t); \
    data_o_t = data_o_t * data_c_t * outputScale + outputZP; \
    _viv_asm(CONV_RTE, dst0, data_o_t); \
    dst_type dst1; \
    VXC_DP2x8(dst1, dst0, dst0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniExtract8Data_2x8); \
    copy_type dst; \
    _viv_asm(COPY, dst, dst1, 16); \
    VXC_WriteImage(output, coord_in.zy, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    VXC_WriteImage(h_state_out, coord_in.zy, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
}
LSTMUNIT_LAYER_NORM_CELL_FP32_CIFG(I8,  int4,  vxc_char4,  vxc_char4)
LSTMUNIT_LAYER_NORM_CELL_FP32_CIFG(U8,  int4,  vxc_uchar4, vxc_uchar4)
LSTMUNIT_LAYER_NORM_CELL_FP32_CIFG(I16, int4,  vxc_short4, vxc_short4)
LSTMUNIT_LAYER_NORM_CELL_FP32_CIFG(F16, half4, vxc_half4,  vxc_short4)

#define LSTMUNIT_LAYER_NORM_CELL_FP16_CIFG(out_type_name, convert_type, dst_type, copy_type) \
__kernel void vxcLSTMUnit_LayerNorm_F16to##out_type_name##_CELL_F16_CIFG( \
    __read_only  image2d_array_t  input_conv, \
    __read_only  image2d_t        cell_state_in, \
    __read_only  image2d_t        biases, \
    __read_only  image2d_t        layer_norm_weights, \
    __write_only image2d_array_t  output, \
    __write_only image2d_t        cell_state_out, \
    __write_only image2d_t        h_state_out \
    ) \
{ \
    int4 coord_in = (int4)(get_global_id(0), get_global_id(1), get_global_id(0), 0); \
    vxc_short8 vect0, vect1, vect2, vect3, vect4; \
    vxc_half8  src0, src1, src2, src3, src4; \
    float4 data_i_t, data_f_t, data_g_t, data_o_t, data_c_t; \
    float4 w0, w1, w2, b0, b1, b2; \
    VXC_ReadImage(vect1, input_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src1, vect1, 16); \
    coord_in.x += num_units; \
    VXC_ReadImage(vect2, input_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src2, vect2, 16); \
    coord_in.x += num_units; \
    VXC_ReadImage(vect3, input_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src3, vect3, 16); \
    coord_in.x -= 2 * num_units; \
    VXC_ReadImage(vect4, cell_state_in, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src4, vect4, 16); \
    coord_in.z >>= 2; \
    w0 = read_imagef(layer_norm_weights, coord_in.wz); \
    coord_in.w += 4; \
    w1 = read_imagef(layer_norm_weights, coord_in.wz); \
    coord_in.w += 4; \
    w2 = read_imagef(layer_norm_weights, coord_in.wz); \
    coord_in.w = 0; \
    b0 = read_imagef(biases, coord_in.wz); \
    coord_in.w += 4; \
    b1 = read_imagef(biases, coord_in.wz); \
    coord_in.w += 4; \
    b2 = read_imagef(biases, coord_in.wz); \
    coord_in.z <<= 2; \
 \
    VXC_DP4x4(data_f_t, src1, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4); \
    VXC_DP4x4(data_g_t, src2, src2, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4); \
    VXC_DP4x4(data_o_t, src3, src3, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4); \
    VXC_DP4x4(data_c_t, src4, src4, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4); \
    data_f_t = data_f_t * w0 + b0; \
    data_g_t = data_g_t * w1 + b1; \
    data_o_t = data_o_t * w2 + b2; \
 \
    convert_type dst0; \
    half4 cell_data; \
    data_f_t = sigmoid(data_f_t + forget_bias); \
    data_g_t = tangentH(data_g_t); \
    data_i_t = 1.0 - data_f_t; \
    data_i_t = data_i_t * data_g_t; \
    data_c_t = data_c_t * data_f_t + data_i_t; \
    data_c_t = data_c_t > clip_Max_F ? clip_Max_F : data_c_t; \
    data_c_t = data_c_t < clip_Min_F ? clip_Min_F : data_c_t; \
    _viv_asm(CONV, cell_data, data_c_t); \
    VXC_DP4x4(src0, cell_data, cell_data, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniExtractHalf4_4x4); \
    _viv_asm(COPY, vect0, src0, 8); \
    VXC_WriteImage(cell_state_out, coord_in.zy, vect0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    data_o_t = sigmoid(data_o_t); \
    data_c_t = tangentH(data_c_t); \
    data_o_t = data_o_t * data_c_t * outputScale + outputZP; \
    _viv_asm(CONV_RTE, dst0, data_o_t); \
    dst_type dst1; \
    VXC_DP2x8(dst1, dst0, dst0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniExtract8Data_2x8); \
    copy_type dst; \
    _viv_asm(COPY, dst, dst1, 16); \
    VXC_WriteImage(output, coord_in.zy, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    VXC_WriteImage(h_state_out, coord_in.zy, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
}
LSTMUNIT_LAYER_NORM_CELL_FP16_CIFG(I8,  int4,  vxc_char4,  vxc_char4)
LSTMUNIT_LAYER_NORM_CELL_FP16_CIFG(U8,  int4,  vxc_uchar4, vxc_uchar4)
LSTMUNIT_LAYER_NORM_CELL_FP16_CIFG(I16, int4,  vxc_short4, vxc_short4)
LSTMUNIT_LAYER_NORM_CELL_FP16_CIFG(F16, half4, vxc_half4,  vxc_short4)

#define LSTMUNIT_LAYER_NORM_CELL_FP32(out_type_name, convert_type, dst_type, copy_type) \
__kernel void vxcLSTMUnit_LayerNorm_F16to##out_type_name##_CELL_F32( \
    __read_only  image2d_array_t  input_conv, \
    __read_only  image2d_t        cell_state_in, \
    __read_only  image2d_t        biases, \
    __read_only  image2d_t        layer_norm_weights, \
    __write_only image2d_array_t  output, \
    __write_only image2d_t        cell_state_out, \
    __write_only image2d_t        h_state_out \
    ) \
{ \
    int4 coord_in = (int4)(get_global_id(0), get_global_id(1), get_global_id(0), 0); \
    vxc_short8 vect0, vect1, vect2, vect3; \
    vxc_half8  src0, src1, src2, src3; \
    float4 data_i_t, data_f_t, data_g_t, data_o_t, data_c_t; \
    float4 w0, w1, w2, w3, b0, b1, b2, b3; \
    VXC_ReadImage(vect0, input_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src0, vect0, 16); \
    coord_in.x += num_units; \
    VXC_ReadImage(vect1, input_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src1, vect1, 16); \
    coord_in.x += num_units; \
    VXC_ReadImage(vect2, input_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src2, vect2, 16); \
    coord_in.x += num_units; \
    VXC_ReadImage(vect3, input_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src3, vect3, 16); \
    coord_in.z >>= 2; \
    w0 = read_imagef(layer_norm_weights, coord_in.wz); \
    coord_in.w += 4; \
    w1 = read_imagef(layer_norm_weights, coord_in.wz); \
    coord_in.w += 4; \
    w2 = read_imagef(layer_norm_weights, coord_in.wz); \
    coord_in.w += 4; \
    w3 = read_imagef(layer_norm_weights, coord_in.wz); \
    coord_in.w = 0; \
    coord_in.x -= 3 * num_units; \
    data_c_t = read_imagef(cell_state_in, coord_in.xy); \
    b0 = read_imagef(biases, coord_in.wz); \
    coord_in.w += 4; \
    b1 = read_imagef(biases, coord_in.wz); \
    coord_in.w += 4; \
    b2 = read_imagef(biases, coord_in.wz); \
    coord_in.w += 4; \
    b3 = read_imagef(biases, coord_in.wz); \
    coord_in.z <<= 2; \
 \
    VXC_DP4x4(data_i_t, src0, src0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4); \
    VXC_DP4x4(data_f_t, src1, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4); \
    VXC_DP4x4(data_g_t, src2, src2, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4); \
    VXC_DP4x4(data_o_t, src3, src3, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4); \
    data_i_t = data_i_t * w0 + b0; \
    data_f_t = data_f_t * w1 + b1; \
    data_g_t = data_g_t * w2 + b2; \
    data_o_t = data_o_t * w3 + b3; \
 \
    convert_type dst0; \
    data_i_t = sigmoid(data_i_t); \
    data_f_t = sigmoid(data_f_t + forget_bias); \
    data_g_t = tangentH(data_g_t); \
    data_i_t = data_i_t * data_g_t; \
    data_c_t = data_c_t * data_f_t + data_i_t; \
    data_o_t = sigmoid(data_o_t); \
    data_c_t = data_c_t > clip_Max_F ? clip_Max_F : data_c_t; \
    data_c_t = data_c_t < clip_Min_F ? clip_Min_F : data_c_t; \
    write_imagef(cell_state_out, coord_in.zy, data_c_t); \
    data_c_t = tangentH(data_c_t); \
    data_o_t = data_o_t * data_c_t * outputScale + outputZP; \
    _viv_asm(CONV_RTE, dst0, data_o_t); \
    dst_type dst1; \
    VXC_DP2x8(dst1, dst0, dst0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniExtract8Data_2x8); \
    copy_type dst; \
    _viv_asm(COPY, dst, dst1, 16); \
    VXC_WriteImage(output, coord_in.zy, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    VXC_WriteImage(h_state_out, coord_in.zy, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
}
LSTMUNIT_LAYER_NORM_CELL_FP32(I8,  int4,  vxc_char4,  vxc_char4)
LSTMUNIT_LAYER_NORM_CELL_FP32(U8,  int4,  vxc_uchar4, vxc_uchar4)
LSTMUNIT_LAYER_NORM_CELL_FP32(I16, int4,  vxc_short4, vxc_short4)
LSTMUNIT_LAYER_NORM_CELL_FP32(F16, half4, vxc_half4,  vxc_short4)

#define LSTMUNIT_LAYER_NORM_CELL_FP16(out_type_name, convert_type, dst_type, copy_type) \
__kernel void vxcLSTMUnit_LayerNorm_F16to##out_type_name##_CELL_F16( \
    __read_only  image2d_array_t  input_conv, \
    __read_only  image2d_t        cell_state_in, \
    __read_only  image2d_t        biases, \
    __read_only  image2d_t        layer_norm_weights, \
    __write_only image2d_array_t  output, \
    __write_only image2d_t        cell_state_out, \
    __write_only image2d_t        h_state_out \
    ) \
{ \
    int4 coord_in = (int4)(get_global_id(0), get_global_id(1), get_global_id(0), 0); \
    vxc_short8 vect0, vect1, vect2, vect3, vect4; \
    vxc_half8  src0, src1, src2, src3, src4; \
    float4 data_i_t, data_f_t, data_g_t, data_o_t, data_c_t; \
    float4 w0, w1, w2, w3, b0, b1, b2, b3; \
    VXC_ReadImage(vect0, input_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src0, vect0, 16); \
    coord_in.x += num_units; \
    VXC_ReadImage(vect1, input_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src1, vect1, 16); \
    coord_in.x += num_units; \
    VXC_ReadImage(vect2, input_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src2, vect2, 16); \
    coord_in.x += num_units; \
    VXC_ReadImage(vect3, input_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src3, vect3, 16); \
    coord_in.x -= 3 * num_units; \
    VXC_ReadImage(vect4, cell_state_in, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src4, vect4, 16); \
    coord_in.z >>= 2; \
    w0 = read_imagef(layer_norm_weights, coord_in.wz); \
    coord_in.w += 4; \
    w1 = read_imagef(layer_norm_weights, coord_in.wz); \
    coord_in.w += 4; \
    w2 = read_imagef(layer_norm_weights, coord_in.wz); \
    coord_in.w += 4; \
    w3 = read_imagef(layer_norm_weights, coord_in.wz); \
    coord_in.w = 0; \
    b0 = read_imagef(biases, coord_in.wz); \
    coord_in.w += 4; \
    b1 = read_imagef(biases, coord_in.wz); \
    coord_in.w += 4; \
    b2 = read_imagef(biases, coord_in.wz); \
    coord_in.w += 4; \
    b3 = read_imagef(biases, coord_in.wz); \
    coord_in.z <<= 2; \
 \
    VXC_DP4x4(data_i_t, src0, src0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4); \
    VXC_DP4x4(data_f_t, src1, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4); \
    VXC_DP4x4(data_g_t, src2, src2, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4); \
    VXC_DP4x4(data_o_t, src3, src3, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4); \
    VXC_DP4x4(data_c_t, src4, src4, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4); \
    data_i_t = data_i_t * w0 + b0; \
    data_f_t = data_f_t * w1 + b1; \
    data_g_t = data_g_t * w2 + b2; \
    data_o_t = data_o_t * w3 + b3; \
 \
    convert_type dst0; \
    half4 cell_data; \
    data_i_t = sigmoid(data_i_t); \
    data_f_t = sigmoid(data_f_t + forget_bias); \
    data_g_t = tangentH(data_g_t); \
    data_i_t = data_i_t * data_g_t; \
    data_c_t = data_c_t * data_f_t + data_i_t; \
    data_c_t = data_c_t > clip_Max_F ? clip_Max_F : data_c_t; \
    data_c_t = data_c_t < clip_Min_F ? clip_Min_F : data_c_t; \
    _viv_asm(CONV, cell_data, data_c_t); \
    VXC_DP4x4(src0, cell_data, cell_data, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniExtractHalf4_4x4); \
    _viv_asm(COPY, vect0, src0, 8); \
    VXC_WriteImage(cell_state_out, coord_in.zy, vect0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    data_o_t = sigmoid(data_o_t); \
    data_c_t = tangentH(data_c_t); \
    data_o_t = data_o_t * data_c_t * outputScale + outputZP; \
    _viv_asm(CONV_RTE, dst0, data_o_t); \
    dst_type dst1; \
    VXC_DP2x8(dst1, dst0, dst0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniExtract8Data_2x8); \
    copy_type dst; \
    _viv_asm(COPY, dst, dst1, 16); \
    VXC_WriteImage(output, coord_in.zy, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    VXC_WriteImage(h_state_out, coord_in.zy, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
}
LSTMUNIT_LAYER_NORM_CELL_FP16(I8,  int4,  vxc_char4,  vxc_char4)
LSTMUNIT_LAYER_NORM_CELL_FP16(U8,  int4,  vxc_uchar4, vxc_uchar4)
LSTMUNIT_LAYER_NORM_CELL_FP16(I16, int4,  vxc_short4, vxc_short4)
LSTMUNIT_LAYER_NORM_CELL_FP16(F16, half4, vxc_half4,  vxc_short4)
