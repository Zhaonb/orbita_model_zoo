#pragma OPENCL EXTENSION CL_VIV_asm : enable

__kernel void gpuTensorPad_F32toF32
    (
    __read_only  image2d_array_t input,
    __write_only image2d_array_t output,
                 int             padLeft,
                 int             padTop,
                 int             in_width,
                 int             in_height,
                 float           pad_value
    )
{
    int x = get_global_id(0);
    int y = get_global_id(1);
    int z = get_global_id(2);
    int4 coord_out = (int4)(x, y, z, 0);
    int inx = x - padLeft;
    int iny = y - padTop;
    int4 coord_in = (int4)(inx, iny, z, 0);
    float4 tmp;

    tmp = read_imagef(input, coord_in);
    write_imagef(output, coord_out, tmp);
}

__kernel void gpuTensorPad_U8toU8
    (
    __read_only  image2d_array_t input,
    __write_only image2d_array_t output,
                 int             padLeft,
                 int             padTop
    )
{
    int x = get_global_id(0);
    int y = get_global_id(1);
    int z = get_global_id(2);
    int4 coord_out = (int4)(x, y, z, 0);
    int inx = x - padLeft;
    int iny = y - padTop;
    int4 coord_in = (int4)(inx, iny, z, 0);
    uint4 tmp = {0.0};

    tmp = read_imageui(input, coord_in);
    write_imageui(output, coord_out, tmp);
}

__kernel void gpuTensorPad_I32toI32
    (
    __read_only  image2d_array_t input,
    __write_only image2d_array_t output,
                 int             padLeft,
                 int             padTop
    )
{
    int x = get_global_id(0);
    int y = get_global_id(1);
    int z = get_global_id(2);
    int4 coord_out = (int4)(x, y, z, 0);
    int inx = x - padLeft;
    int iny = y - padTop;
    int4 coord_in = (int4)(inx, iny, z, 0);
    int4 tmp = {0.0};

    tmp = read_imagei(input, coord_in);
    write_imagei(output, coord_out, tmp);
}

__kernel void gpuTensorPad_F32toBF16
    (
    __read_only  image2d_array_t input,
    __write_only image2d_array_t output,
                 int             padLeft,
                 int             padTop,
                 int             in_width,
                 int             in_height,
                 float           pad_value
    )
{
    int x = get_global_id(0);
    int y = get_global_id(1);
    int z = get_global_id(2);
    int4 coord_out = (int4)(x, y, z, 0);
    int inx = x - padLeft;
    int iny = y - padTop;
    int4 coord_in = (int4)(inx, iny, z, 0);
    float4 tmp;

    tmp = read_imagef(input, coord_in);
    uint4 src, dst;
    _viv_asm(COPY, src, tmp, 16);
    dst = src >> 16;
    write_imageui(output, coord_out, dst);
}

__kernel void gpuTensorPad_BF16toF32
    (
    __read_only  image2d_array_t input,
    __write_only image2d_array_t output,
                 int             padLeft,
                 int             padTop
    )
{
    int x = get_global_id(0);
    int y = get_global_id(1);
    int z = get_global_id(2);
    int4 coord_out = (int4)(x, y, z, 0);
    int inx = x - padLeft;
    int iny = y - padTop;
    int4 coord_in = (int4)(inx, iny, z, 0);
    uint4 src = read_imageui(input, coord_in);
    float4 dst;
    src = src << 16;
    _viv_asm(COPY, dst, src, 16);
    write_imagef(output, coord_out, dst);
}

__kernel void gpuTensorPad_F32toF32_constant
    (
    __read_only  image2d_array_t input,
    __write_only image2d_array_t output,
                 int             padLeft,
                 int             padTop,
                 int             in_width,
                 int             in_height,
                 float           pad_value
    )
{
    int x = get_global_id(0);
    int y = get_global_id(1);
    int z = get_global_id(2);
    int4 coord_out = (int4)(x, y, z, 0);
    int inx = x - padLeft;
    int iny = y - padTop;
    int4 coord_in = (int4)(inx, iny, z, 0);
    float4 tmp = {pad_value, pad_value, pad_value, pad_value};

    if (coord_in.x >= 0 && coord_in.x < in_width &&
        coord_in.y >= 0 && coord_in.y < in_height)
    {
        tmp = read_imagef(input, coord_in);
        write_imagef(output, coord_out, tmp);
    }
    else
    {
        write_imagef(output, coord_out, tmp);
    }
}

__kernel void gpuTensorPad_F32toBF16_constant
    (
    __read_only  image2d_array_t input,
    __write_only image2d_array_t output,
                 int             padLeft,
                 int             padTop,
                 int             in_width,
                 int             in_height,
                 float           pad_value
    )
{
    int x = get_global_id(0);
    int y = get_global_id(1);
    int z = get_global_id(2);
    int4 coord_out = (int4)(x, y, z, 0);
    int inx = x - padLeft;
    int iny = y - padTop;
    int4 coord_in = (int4)(inx, iny, z, 0);
    float4 tmp = {pad_value, pad_value, pad_value, pad_value};

    if (coord_in.x >= 0 && coord_in.x < in_width &&
        coord_in.y >= 0 && coord_in.y < in_height)
    {
        tmp = read_imagef(input, coord_in);
        uint4 src, dst;
        _viv_asm(COPY, src, tmp, 16);
        dst = src >> 16;
        write_imageui(output, coord_out, dst);
    }
    else
    {
        uint4 src, dst;
        _viv_asm(COPY, src, tmp, 16);
        dst = src >> 16;
        write_imageui(output, coord_out, dst);
    }
}
