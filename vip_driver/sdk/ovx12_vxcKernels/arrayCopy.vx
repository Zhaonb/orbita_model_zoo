#pragma OPENCL EXTENSION cl_viv_vx_extension : enable

#include "cl_viv_vx_ext.h"

__kernel void copy_16Bto16B(
    global unsigned char* input,
    global unsigned char* output,
    global int* siSize,
    global int* diSize,
    global int* outNum
)
{
    const int idx = get_global_id(0);

    vxc_uchar16 src;
    unsigned char* input_offset_ptr = input + idx * 16;

    VXC_Vload16(src, input_offset_ptr, 0);

    int offset = *outNum;
    unsigned char* output_offset_ptr = output + idx * 16 + offset * 16;

    VXC_Vstore16(output_offset_ptr, 0, src);
}

__kernel void copy_8Bto8B(
    global unsigned char* input,
    global unsigned char* output,
    global int* siSize,
    global int* diSize,
    global int* outNum
)
{
    const int idx = get_global_id(0);

    vxc_uchar8 src;
    unsigned char* input_offset_ptr = input + idx * 8;

    VXC_Vload8(src, input_offset_ptr, 0);

    int offset = *outNum;
    unsigned char* output_offset_ptr = output + idx * 8 + offset * 8;

    VXC_Vstore8(output_offset_ptr, 0, src);
}

__kernel void copy_4Bto4B(
    global unsigned char* input,
    global unsigned char* output,
    global int* siSize,
    global int* diSize,
    global int* outNum
)
{
    const int idx = get_global_id(0);

    vxc_uchar4 src;
    unsigned char* input_offset_ptr = input + idx * 4;

    VXC_Vload4(src, input_offset_ptr, 0);

    int offset = *outNum;
    unsigned char* output_offset_ptr = output + idx * 4 + offset * 4;

    VXC_Vstore4(output_offset_ptr, 0, src);
}

__kernel void copy_2Bto2B(
    global unsigned char* input,
    global unsigned char* output,
    global int* siSize,
    global int* diSize,
    global int* outNum
)
{
    const int idx = get_global_id(0);

    vxc_uchar2 src;
    unsigned char* input_offset_ptr = input + idx * 2;

    VXC_Vload2(src, input_offset_ptr, 0);

    int offset = *outNum;
    unsigned char* output_offset_ptr = output + idx * 2 + offset * 2;

    VXC_Vstore2(output_offset_ptr, 0, src);
}

__kernel void copy_1Bto1B(
    global unsigned char* input,
    global unsigned char* output,
    global int* siSize,
    global int* diSize,
    global int* outNum
)
{
    const int idx = get_global_id(0);

    unsigned char src;
    unsigned char* input_offset_ptr = input + idx;

    src = * input_offset_ptr;

    int offset = *outNum;
    unsigned char* output_offset_ptr = output + idx + offset;

    *output_offset_ptr = src;
}

__kernel void copy(
    global unsigned char* in0,
    global unsigned char* in1,
    global int* siSize,
    global int* diSize,
    global int* outNum
)
{
    const int pX = get_global_id(0);
    const int pY = get_global_id(1);
    int ss = *siSize;
    int ds = *diSize;
    int it = *outNum;
    for(int i=0;i<ds;i++){
        in1[pX*ds + it*ds + i] = in0[pX*ss + i];
    }
}
