#pragma OPENCL EXTENSION cl_viv_vx_extension : enable

#include "cl_viv_vx_ext.h"

_viv_uniform float4 matrix0;
_viv_uniform float2 matrix1;
_viv_uniform float4 matrix4;
_viv_uniform float2 offset;
__kernel void warp_affine_nearest_neighbor_U8toU8
(
    __read_only  image2d_t  input,
        vx_matrix_float    matrix,
                 int        type,
    __write_only image2d_t output,
                 int       xPos,
                 int       yPos
)
{
    int2   coord = (int2)(get_global_id(0), get_global_id(1));
    int4   coord_in = (int4)(get_global_id(0), get_global_id(1), get_global_id(0) + 1, get_global_id(1));

    float4 coord_f = convert_float4(coord_in);

    coord_f = coord_f.xxzz * matrix0.xyxy + coord_f.yyww * matrix0.zwzw + matrix1.xyxy - offset.xyxy;;

    coord_in = convert_int4(coord_f);

    vxc_uchar16 dst;
    VXC_ReadImage(dst, input, coord_in.xy, 0, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(dst, input, coord_in.zw, 0, VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));
    coord_f = coord_f.zwzw + matrix4;
    coord_in = convert_int4(coord_f);
    VXC_ReadImage(dst, input, coord_in.xy, 0, VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(dst, input, coord_in.zw, 0, VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));
    coord_f = coord_f.zwzw + matrix4;
    coord_in = convert_int4(coord_f);
    VXC_ReadImage(dst, input, coord_in.xy, 0, VXC_MODIFIER(4, 4, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(dst, input, coord_in.zw, 0, VXC_MODIFIER(5, 5, 0, VXC_RM_TowardZero, 0));
    coord_f = coord_f.zwzw + matrix4;
    coord_in = convert_int4(coord_f);
    VXC_ReadImage(dst, input, coord_in.xy, 0, VXC_MODIFIER(6, 6, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(dst, input, coord_in.zw, 0, VXC_MODIFIER(7, 7, 0, VXC_RM_TowardZero, 0));


    VXC_WriteImage(output, coord, dst, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}

__kernel void warp_affine_bilinear_U8toU8
(
    __read_only image2d_t  input,
        vx_matrix_float    matrix,
                int        type,
    __write_only image2d_t output,
                 int       xPos,
                 int       yPos
)
{
    int2   coord = (int2)(get_global_id(0), get_global_id(1));
    int4   coord_in = (int4)(get_global_id(0), get_global_id(1), get_global_id(0) + 1, get_global_id(1));

    float4 coord_f = convert_float4(coord_in);

    coord_f = coord_f.xxzz * matrix0.xyxy + coord_f.yyww * matrix0.zwzw + matrix1.xyxy - offset.xyxy;

    coord_in = convert_int4(coord_f);

    vxc_uchar16 src0, src1, dst;
    VXC_ReadImage(src0, input, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src1, input, coord_in.xy, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
#if (VX_VERSION==1)
    VXC_BiLinear(dst, src0, src1, coord_f.xy, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
#else
    VXC_Lerp(src0, src0, src1, coord_f.y, VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    src1.s0 = src0.s1;
    VXC_Lerp(dst, src0, src1, coord_f.x, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
#endif

    VXC_ReadImage(src0, input, coord_in.zw, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src1, input, coord_in.zw, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
#if (VX_VERSION==1)
    VXC_BiLinear(dst, src0, src1, coord_f.zw, VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));
#else
    VXC_Lerp(src0, src0, src1, coord_f.w, VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    src1.s0 = src0.s1;
    VXC_Lerp(dst, src0, src1, coord_f.z, VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));
#endif

    coord_f = coord_f.zwzw + matrix4;
    coord_in = convert_int4(coord_f);
    VXC_ReadImage(src0, input, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src1, input, coord_in.xy, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
#if (VX_VERSION==1)
    VXC_BiLinear(dst, src0, src1, coord_f.xy, VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));
#else
    VXC_Lerp(src0, src0, src1, coord_f.y, VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    src1.s0 = src0.s1;
    VXC_Lerp(dst, src0, src1, coord_f.x, VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));
#endif

    VXC_ReadImage(src0, input, coord_in.zw, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src1, input, coord_in.zw, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
#if (VX_VERSION==1)
    VXC_BiLinear(dst, src0, src1, coord_f.zw, VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));
#else
    VXC_Lerp(src0, src0, src1, coord_f.w, VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    src1.s0 = src0.s1;
    VXC_Lerp(dst, src0, src1, coord_f.z, VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));
#endif

    coord_f = coord_f.zwzw + matrix4;
    coord_in = convert_int4(coord_f);
    VXC_ReadImage(src0, input, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src1, input, coord_in.xy, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
#if (VX_VERSION==1)
    VXC_BiLinear(dst, src0, src1, coord_f.xy, VXC_MODIFIER(4, 4, 0, VXC_RM_TowardZero, 0));
#else
    VXC_Lerp(src0, src0, src1, coord_f.y, VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    src1.s0 = src0.s1;
    VXC_Lerp(dst, src0, src1, coord_f.x, VXC_MODIFIER(4, 4, 0, VXC_RM_TowardZero, 0));
#endif

    VXC_ReadImage(src0, input, coord_in.zw, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src1, input, coord_in.zw, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
#if (VX_VERSION==1)
    VXC_BiLinear(dst, src0, src1, coord_f.zw, VXC_MODIFIER(5, 5, 0, VXC_RM_TowardZero, 0));
#else
    VXC_Lerp(src0, src0, src1, coord_f.w, VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    src1.s0 = src0.s1;
    VXC_Lerp(dst, src0, src1, coord_f.z, VXC_MODIFIER(5, 5, 0, VXC_RM_TowardZero, 0));
#endif

    coord_f = coord_f.zwzw + matrix4;
    coord_in = convert_int4(coord_f);
    VXC_ReadImage(src0, input, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src1, input, coord_in.xy, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
#if (VX_VERSION==1)
    VXC_BiLinear(dst, src0, src1, coord_f.xy, VXC_MODIFIER(6, 6, 0, VXC_RM_TowardZero, 0));
#else
    VXC_Lerp(src0, src0, src1, coord_f.y, VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    src1.s0 = src0.s1;
    VXC_Lerp(dst, src0, src1, coord_f.x, VXC_MODIFIER(6, 6, 0, VXC_RM_TowardZero, 0));
#endif

    VXC_ReadImage(src0, input, coord_in.zw, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src1, input, coord_in.zw, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
#if (VX_VERSION==1)
    VXC_BiLinear(dst, src0, src1, coord_f.zw, VXC_MODIFIER(7, 7, 0, VXC_RM_TowardZero, 0));
#else
    VXC_Lerp(src0, src0, src1, coord_f.w, VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    src1.s0 = src0.s1;
    VXC_Lerp(dst, src0, src1, coord_f.z, VXC_MODIFIER(7, 7, 0, VXC_RM_TowardZero, 0));
#endif

    VXC_WriteImage(output, coord, dst, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}

_viv_uniform VXC_512Bits uniPackedU1_2x8;
_viv_uniform VXC_512Bits uniBitOft0_4x4;
_viv_uniform VXC_512Bits uniBitOft1_4x4;
__kernel void warp_affine_nearest_neighbor_U1toU1
(
    __read_only  image2d_t input,
        vx_matrix_float    matrix,
                 int       type,
    __write_only image2d_t output,
                 int       xPos,
                 int       yPos
)
{
    int2   coord = (int2)(get_global_id(0), get_global_id(1));


    int4   coord_in = (int4)(get_global_id(0) * 8, get_global_id(1), get_global_id(0) * 8 + 1, get_global_id(1));

    float4 coord_f = convert_float4(coord_in);

    coord_f = coord_f.xxzz * matrix0.xyxy + coord_f.yyww * matrix0.zwzw + matrix1.xyxy - offset.xyxy;;

    coord_in = convert_int4(coord_f);

    vxc_uchar16 dst;

    int4 oft_0;
    int4 oft_1;
    oft_0.xy = coord_in.xz & (int2)(0x7, 0x7);

    coord_in.xz >>= 3;
    VXC_ReadImage(dst, input, coord_in.xy, 0, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(dst, input, coord_in.zw, 0, VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));
    coord_f = coord_f.zwzw + matrix4;
    coord_in = convert_int4(coord_f);

    oft_0.zw = coord_in.xz & (int2)(0x7, 0x7);

    coord_in.xz >>= 3;
    VXC_ReadImage(dst, input, coord_in.xy, 0, VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(dst, input, coord_in.zw, 0, VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));
    coord_f = coord_f.zwzw + matrix4;
    coord_in = convert_int4(coord_f);

    oft_1.xy = coord_in.xz & (int2)(0x7, 0x7);

    coord_in.xz >>= 3;
    VXC_ReadImage(dst, input, coord_in.xy, 0, VXC_MODIFIER(4, 4, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(dst, input, coord_in.zw, 0, VXC_MODIFIER(5, 5, 0, VXC_RM_TowardZero, 0));
    coord_f = coord_f.zwzw + matrix4;
    coord_in = convert_int4(coord_f);

    oft_1.zw = coord_in.xz & (int2)(0x7, 0x7);

    coord_in.xz >>= 3;
    VXC_ReadImage(dst, input, coord_in.xy, 0, VXC_MODIFIER(6, 6, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(dst, input, coord_in.zw, 0, VXC_MODIFIER(7, 7, 0, VXC_RM_TowardZero, 0));

    vxc_uchar16 config = (vxc_uchar16)(0, 8, 16, 24, 32, 40, 48, 56, 1, 1, 1, 1, 1, 1, 1, 1);
    VXC_DP4x4(config, config, oft_0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniBitOft0_4x4);
    VXC_DP4x4(config, config, oft_1, VXC_MODIFIER(4, 7, 0, VXC_RM_TowardZero, 0), uniBitOft1_4x4);

    VXC_BitExtract(dst, dst, dst, config, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_DP16x1(dst, dst, dst, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0), uniPackedU1_2x8);

    VXC_WriteImage(output, coord, dst, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
}

__kernel void warp_affine_bilinear_U1toU1
(
    __read_only image2d_t  input,
        vx_matrix_float    matrix,
                int        type,
    __write_only image2d_t output,
                 int       xPos,
                 int       yPos
)
{
    int2   coord = (int2)(get_global_id(0), get_global_id(1));
    int4   coord_in = (int4)(get_global_id(0) * 8, get_global_id(1), get_global_id(0) * 8 + 1, get_global_id(1));

    float4 coord_f = convert_float4(coord_in);

    coord_f = coord_f.xxzz * matrix0.xyxy + coord_f.yyww * matrix0.zwzw + matrix1.xyxy - offset.xyxy;

    coord_in = convert_int4(coord_f);

    vxc_uchar16 src0, src1, dst;
    int4 oft;
    vxc_uchar16 config;
    oft.xz = coord_in.xz & (int2)(0x7, 0x7);
    oft.yw = oft.xz + 1;

    coord_in.xz >>= 3;
    VXC_ReadImage(src0, input, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src1, input, coord_in.xy, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));

    config = (vxc_uchar16)(0, 0, 16, 24, 32, 40, 48, 56, 1, 1, 1, 1, 1, 1, 1, 1);
    VXC_DP4x4(config, config, oft, VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0), uniBitOft0_4x4);
    VXC_BitExtract(src0, src0, src0, config, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_BitExtract(src1, src1, src1, config, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

#if (VX_VERSION==1)
    VXC_BiLinear(dst, src0, src1, coord_f.xy, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
#else
    VXC_Lerp(src0, src0, src1, coord_f.y, VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    src1.s0 = src0.s1;
    VXC_Lerp(dst, src0, src1, coord_f.x, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
#endif

    VXC_ReadImage(src0, input, coord_in.zw, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src1, input, coord_in.zw, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));

    VXC_BitExtract(src0, src0, src0, config, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_BitExtract(src1, src1, src1, config, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
#if (VX_VERSION==1)
    VXC_BiLinear(dst, src0, src1, coord_f.zw, VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));
#else
    VXC_Lerp(src0, src0, src1, coord_f.w, VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    src1.s0 = src0.s1;
    VXC_Lerp(dst, src0, src1, coord_f.z, VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));
#endif

    coord_f = coord_f.zwzw + matrix4;
    coord_in = convert_int4(coord_f);

    oft.xz = coord_in.xz & (int2)(0x7, 0x7);
    oft.yw = oft.xz + 1;
    coord_in.xz >>= 3;
    VXC_ReadImage(src0, input, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src1, input, coord_in.xy, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));

    config = (vxc_uchar16)(0, 0, 16, 24, 32, 40, 48, 56, 1, 1, 1, 1, 1, 1, 1, 1);
    VXC_DP4x4(config, config, oft, VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0), uniBitOft0_4x4);
    VXC_BitExtract(src0, src0, src0, config, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_BitExtract(src1, src1, src1, config, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
#if (VX_VERSION==1)
    VXC_BiLinear(dst, src0, src1, coord_f.xy, VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));
#else
    VXC_Lerp(src0, src0, src1, coord_f.y, VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    src1.s0 = src0.s1;
    VXC_Lerp(dst, src0, src1, coord_f.x, VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));
#endif

    VXC_ReadImage(src0, input, coord_in.zw, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src1, input, coord_in.zw, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));

    VXC_BitExtract(src0, src0, src0, config, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_BitExtract(src1, src1, src1, config, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
#if (VX_VERSION==1)
    VXC_BiLinear(dst, src0, src1, coord_f.zw, VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));
#else
    VXC_Lerp(src0, src0, src1, coord_f.w, VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    src1.s0 = src0.s1;
    VXC_Lerp(dst, src0, src1, coord_f.z, VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));
#endif

    coord_f = coord_f.zwzw + matrix4;
    coord_in = convert_int4(coord_f);

    oft.xz = coord_in.xz & (int2)(0x7, 0x7);
    oft.yw = oft.xz + 1;
    coord_in.xz >>= 3;
    VXC_ReadImage(src0, input, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src1, input, coord_in.xy, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));

    config = (vxc_uchar16)(0, 0, 16, 24, 32, 40, 48, 56, 1, 1, 1, 1, 1, 1, 1, 1);
    VXC_DP4x4(config, config, oft, VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0), uniBitOft0_4x4);
    VXC_BitExtract(src0, src0, src0, config, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_BitExtract(src1, src1, src1, config, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
#if (VX_VERSION==1)
    VXC_BiLinear(dst, src0, src1, coord_f.xy, VXC_MODIFIER(4, 4, 0, VXC_RM_TowardZero, 0));
#else
    VXC_Lerp(src0, src0, src1, coord_f.y, VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    src1.s0 = src0.s1;
    VXC_Lerp(dst, src0, src1, coord_f.x, VXC_MODIFIER(4, 4, 0, VXC_RM_TowardZero, 0));
#endif

    VXC_ReadImage(src0, input, coord_in.zw, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src1, input, coord_in.zw, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));

    VXC_BitExtract(src0, src0, src0, config, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_BitExtract(src1, src1, src1, config, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
#if (VX_VERSION==1)
    VXC_BiLinear(dst, src0, src1, coord_f.zw, VXC_MODIFIER(5, 5, 0, VXC_RM_TowardZero, 0));
#else
    VXC_Lerp(src0, src0, src1, coord_f.w, VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    src1.s0 = src0.s1;
    VXC_Lerp(dst, src0, src1, coord_f.z, VXC_MODIFIER(5, 5, 0, VXC_RM_TowardZero, 0));
#endif

    coord_f = coord_f.zwzw + matrix4;
    coord_in = convert_int4(coord_f);

    oft.xz = coord_in.xz & (int2)(0x7, 0x7);
    oft.yw = oft.xz + 1;
    coord_in.xz >>= 3;
    VXC_ReadImage(src0, input, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src1, input, coord_in.xy, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));

    config = (vxc_uchar16)(0, 0, 16, 24, 32, 40, 48, 56, 1, 1, 1, 1, 1, 1, 1, 1);
    VXC_DP4x4(config, config, oft, VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0), uniBitOft0_4x4);
    VXC_BitExtract(src0, src0, src0, config, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_BitExtract(src1, src1, src1, config, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
#if (VX_VERSION==1)
    VXC_BiLinear(dst, src0, src1, coord_f.xy, VXC_MODIFIER(6, 6, 0, VXC_RM_TowardZero, 0));
#else
    VXC_Lerp(src0, src0, src1, coord_f.y, VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    src1.s0 = src0.s1;
    VXC_Lerp(dst, src0, src1, coord_f.x, VXC_MODIFIER(6, 6, 0, VXC_RM_TowardZero, 0));
#endif

    VXC_ReadImage(src0, input, coord_in.zw, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src1, input, coord_in.zw, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));

    VXC_BitExtract(src0, src0, src0, config, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_BitExtract(src1, src1, src1, config, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
#if (VX_VERSION==1)
    VXC_BiLinear(dst, src0, src1, coord_f.zw, VXC_MODIFIER(7, 7, 0, VXC_RM_TowardZero, 0));
#else
    VXC_Lerp(src0, src0, src1, coord_f.w, VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    src1.s0 = src0.s1;
    VXC_Lerp(dst, src0, src1, coord_f.z, VXC_MODIFIER(7, 7, 0, VXC_RM_TowardZero, 0));
#endif

    VXC_DP16x1(dst, dst, dst, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0), uniPackedU1_2x8);

    VXC_WriteImage(output, coord, dst, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
}

_viv_uniform int width;
__kernel void warp_affine_nearest_neighbor_U1toU1_constant
(
    __read_only  image2d_t input,
        vx_matrix_float    matrix,
                 int       type,
    __write_only image2d_t output,
                 int       xPos,
                 int       yPos
)
{
    int2   coord = (int2)(get_global_id(0), get_global_id(1));


    int4   coord_in = (int4)(get_global_id(0) * 8, get_global_id(1), get_global_id(0) * 8 + 1, get_global_id(1));

    float4 coord_f = convert_float4(coord_in);

    coord_f = coord_f.xxzz * matrix0.xyxy + coord_f.yyww * matrix0.zwzw + matrix1.xyxy - offset.xyxy;;

    coord_in = convert_int4(coord_f);

    vxc_uchar16 dst;

    int4 oft_0;
    int4 oft_1;
    oft_0.xy = coord_in.xz & (int2)(0x7, 0x7);

    if ( coord_in.x >= width )
        coord_in.x += 80;

    if ( coord_in.z >= width )
        coord_in.z += 80;

    coord_in.xz >>= 3;
    VXC_ReadImage(dst, input, coord_in.xy, 0, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(dst, input, coord_in.zw, 0, VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));
    coord_f = coord_f.zwzw + matrix4;
    coord_in = convert_int4(coord_f);

    oft_0.zw = coord_in.xz & (int2)(0x7, 0x7);

    if ( coord_in.x >= width )
        coord_in.x += 80;

    if ( coord_in.z >= width )
        coord_in.z += 80;

    coord_in.xz >>= 3;
    VXC_ReadImage(dst, input, coord_in.xy, 0, VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(dst, input, coord_in.zw, 0, VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));
    coord_f = coord_f.zwzw + matrix4;
    coord_in = convert_int4(coord_f);

    oft_1.xy = coord_in.xz & (int2)(0x7, 0x7);

    if ( coord_in.x >= width )
        coord_in.x += 80;

    if ( coord_in.z >= width )
        coord_in.z += 80;

    coord_in.xz >>= 3;
    VXC_ReadImage(dst, input, coord_in.xy, 0, VXC_MODIFIER(4, 4, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(dst, input, coord_in.zw, 0, VXC_MODIFIER(5, 5, 0, VXC_RM_TowardZero, 0));
    coord_f = coord_f.zwzw + matrix4;
    coord_in = convert_int4(coord_f);

    oft_1.zw = coord_in.xz & (int2)(0x7, 0x7);

    if ( coord_in.x >= width )
        coord_in.x += 80;

    if ( coord_in.z >= width )
        coord_in.z += 80;

    coord_in.xz >>= 3;
    VXC_ReadImage(dst, input, coord_in.xy, 0, VXC_MODIFIER(6, 6, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(dst, input, coord_in.zw, 0, VXC_MODIFIER(7, 7, 0, VXC_RM_TowardZero, 0));

    vxc_uchar16 config = (vxc_uchar16)(0, 8, 16, 24, 32, 40, 48, 56, 1, 1, 1, 1, 1, 1, 1, 1);
    VXC_DP4x4(config, config, oft_0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniBitOft0_4x4);
    VXC_DP4x4(config, config, oft_1, VXC_MODIFIER(4, 7, 0, VXC_RM_TowardZero, 0), uniBitOft1_4x4);

    VXC_BitExtract(dst, dst, dst, config, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_DP16x1(dst, dst, dst, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0), uniPackedU1_2x8);

    VXC_WriteImage(output, coord, dst, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
}
