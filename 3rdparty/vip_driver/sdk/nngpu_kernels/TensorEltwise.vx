#pragma OPENCL EXTENSION cl_viv_bitfield_extension : enable
#pragma OPENCL EXTENSION cl_viv_vx_extension : enable
#pragma OPENCL EXTENSION  CL_VIV_asm : enable

__kernel void gpuMul_F32_F32toF32
    (
    __read_only  image2d_array_t input0,
    __read_only  image2d_array_t input1,
    __write_only image2d_array_t output,
                 float           scale,
                 int             depth0_minus_1,
                 int             depth1_minus_1,
                 float           input0_zp,
                 float           input1_zp,
                 float           output_zp
    )
{
    int x = get_global_id(0);
    int y = get_global_id(1);
    int z = get_global_id(2);
    int4 coord = (int4)(x, y, z, z);
    float4 src0, src1, dst;
    int4 coord_in0 = (int4)(x, y, z, z);
    int4 coord_in1 = (int4)(x, y, z, z);

    _viv_asm(CLAMP0MAX, coord_in0.z, coord_in0.z, depth0_minus_1);
    src0 = read_imagef(input0, coord_in0);
    _viv_asm(CLAMP0MAX, coord_in1.z, coord_in1.z, depth1_minus_1);
    src1 = read_imagef(input1, coord_in1);

    dst.x = src0.x * src1.x * scale;
    write_imagef(output, coord, dst.xxxx);
}

__kernel void gpuMul_F32_F32toF32_BroadCastZ
    (
    __read_only  image2d_array_t input0,
    __read_only  image2d_t       input1,
    __write_only image2d_array_t output,
                 float           scale,
                 int             depth0_minus_1,
                 int             depth1_minus_1,
                 float           input0_zp,
                 float           input1_zp,
                 float           output_zp
    )
{
    int x = get_global_id(0);
    int y = get_global_id(1);
    int z = get_global_id(2);
    int4 coord = (int4)(x, y, z, z);
    float4 src0, src1, dst;

    src0 = read_imagef(input0, coord);
    src1 = read_imagef(input1, coord.xy);

    dst.x = src0.x * src1.x * scale;
    write_imagef(output, coord, dst.xxxx);
}

__kernel void gpuMul_I32_I32toI32
    (
    __read_only  image2d_array_t input0,
    __read_only  image2d_array_t input1,
    __write_only image2d_array_t output,
                 float           scale,
                 int             depth0_minus_1,
                 int             depth1_minus_1,
                 float           input0_zp,
                 float           input1_zp,
                 float           output_zp
    )
{
    int x = get_global_id(0);
    int y = get_global_id(1);
    int z = get_global_id(2);
    int4 coord = (int4)(x, y, z, z);
    int4 src0, src1, dst;
    int4 coord_in0 = (int4)(x, y, z, z);
    int4 coord_in1 = (int4)(x, y, z, z);

    _viv_asm(CLAMP0MAX, coord_in0.z, coord_in0.z, depth0_minus_1);
    src0 = read_imagei(input0, coord_in0);
    _viv_asm(CLAMP0MAX, coord_in1.z, coord_in1.z, depth1_minus_1);
    src1 = read_imagei(input1, coord_in1);

    float data = (convert_float(src0.x) - input0_zp) * (convert_float(src1.x) - input1_zp) * scale + output_zp;
    dst.x = convert_int_rte(data);
    write_imagei(output, coord, dst.xxxx);
}

__kernel void gpuMul_I32_I32toI32_BroadCastZ
    (
    __read_only  image2d_array_t input0,
    __read_only  image2d_t       input1,
    __write_only image2d_array_t output,
                 float           scale,
                 int             depth0_minus_1,
                 int             depth1_minus_1,
                 float           input0_zp,
                 float           input1_zp,
                 float           output_zp
    )
{
    int x = get_global_id(0);
    int y = get_global_id(1);
    int z = get_global_id(2);
    int4 coord = (int4)(x, y, z, z);
    int4 src0, src1, dst;

    src0 = read_imagei(input0, coord);
    src1 = read_imagei(input1, coord.xy);

    float data = (convert_float(src0.x) - input0_zp) * (convert_float(src1.x) - input1_zp) * scale + output_zp;
    dst.x = convert_int_rte(data);
    write_imagei(output, coord, dst.xxxx);
}

__kernel void gpuMul_U32_U32toU32
    (
    __read_only  image2d_array_t input0,
    __read_only  image2d_array_t input1,
    __write_only image2d_array_t output,
                 float           scale,
                 int             depth0_minus_1,
                 int             depth1_minus_1,
                 float           input0_zp,
                 float           input1_zp,
                 float           output_zp
    )
{
    int x = get_global_id(0);
    int y = get_global_id(1);
    int z = get_global_id(2);
    int4 coord = (int4)(x, y, z, z);
    uint4 src0, src1, dst;
    int4 coord_in0 = (int4)(x, y, z, z);
    int4 coord_in1 = (int4)(x, y, z, z);

    _viv_asm(CLAMP0MAX, coord_in0.z, coord_in0.z, depth0_minus_1);
    src0 = read_imageui(input0, coord_in0);
    _viv_asm(CLAMP0MAX, coord_in1.z, coord_in1.z, depth1_minus_1);
    src1 = read_imageui(input1, coord_in1);

    float data = (convert_float(src0.x) - input0_zp) * (convert_float(src1.x) - input1_zp) * scale + output_zp;
    dst.x = convert_uint_rte(data);
    write_imageui(output, coord, dst.xxxx);
}

__kernel void gpuMul_U32_U32toU32_BroadCastZ
    (
    __read_only  image2d_array_t input0,
    __read_only  image2d_t       input1,
    __write_only image2d_array_t output,
                 float           scale,
                 int             depth0_minus_1,
                 int             depth1_minus_1,
                 float           input0_zp,
                 float           input1_zp,
                 float           output_zp
    )
{
    int x = get_global_id(0);
    int y = get_global_id(1);
    int z = get_global_id(2);
    int4 coord = (int4)(x, y, z, z);
    uint4 src0, src1, dst;

    src0 = read_imageui(input0, coord);
    src1 = read_imageui(input1, coord.xy);

    float data = (convert_float(src0.x) - input0_zp) * (convert_float(src1.x) - input1_zp) * scale + output_zp;
    dst.x = convert_uint_rte(data);
    write_imageui(output, coord, dst.xxxx);
}

__kernel void gpuDiv_F32_F32toF32
    (
    __read_only  image2d_array_t input0,
    __read_only  image2d_array_t input1,
    __write_only image2d_array_t output,
                 float           scale,
                 int             depth0_minus_1,
                 int             depth1_minus_1,
                 float           input0_zp,
                 float           input1_zp,
                 float           output_zp
    )
{
    int x = get_global_id(0);
    int y = get_global_id(1);
    int z = get_global_id(2);
    int4 coord = (int4)(x, y, z, z);
    float4 src0, src1, dst;
    int4 coord_in0 = (int4)(x, y, z, z);
    int4 coord_in1 = (int4)(x, y, z, z);

    _viv_asm(CLAMP0MAX, coord_in0.z, coord_in0.z, depth0_minus_1);
    src0 = read_imagef(input0, coord_in0);
    _viv_asm(CLAMP0MAX, coord_in1.z, coord_in1.z, depth1_minus_1);
    src1 = read_imagef(input1, coord_in1);

    dst.x = src0.x / src1.x * scale;
    write_imagef(output, coord, dst.xxxx);
}

__kernel void gpuDiv_F32_F32toF32_BroadCastZ
    (
    __read_only  image2d_array_t input0,
    __read_only  image2d_t       input1,
    __write_only image2d_array_t output,
                 float           scale,
                 int             depth0_minus_1,
                 int             depth1_minus_1,
                 float           input0_zp,
                 float           input1_zp,
                 float           output_zp
    )
{
    int x = get_global_id(0);
    int y = get_global_id(1);
    int z = get_global_id(2);
    int4 coord = (int4)(x, y, z, z);
    float4 src0, src1, dst;

    src0 = read_imagef(input0, coord);
    src1 = read_imagef(input1, coord.xy);

    dst.x = src0.x / src1.x * scale;
    write_imagef(output, coord, dst.xxxx);
}

__kernel void gpuDiv_I32_I32toI32
    (
    __read_only  image2d_array_t input0,
    __read_only  image2d_array_t input1,
    __write_only image2d_array_t output,
                 float           scale,
                 int             depth0_minus_1,
                 int             depth1_minus_1,
                 float           input0_zp,
                 float           input1_zp,
                 float           output_zp
    )
{
    int x = get_global_id(0);
    int y = get_global_id(1);
    int z = get_global_id(2);
    int4 coord = (int4)(x, y, z, z);
    int4 src0, src1, dst;
    int4 coord_in0 = (int4)(x, y, z, z);
    int4 coord_in1 = (int4)(x, y, z, z);

    _viv_asm(CLAMP0MAX, coord_in0.z, coord_in0.z, depth0_minus_1);
    src0 = read_imagei(input0, coord_in0);
    _viv_asm(CLAMP0MAX, coord_in1.z, coord_in1.z, depth1_minus_1);
    src1 = read_imagei(input1, coord_in1);

    float data = (convert_float(src0.x) - input0_zp) / (convert_float(src1.x) - input1_zp) * scale + output_zp;
    dst.x = convert_int_rte(data);
    write_imagei(output, coord, dst.xxxx);
}

__kernel void gpuDiv_I32_I32toI32_BroadCastZ
    (
    __read_only  image2d_array_t input0,
    __read_only  image2d_t       input1,
    __write_only image2d_array_t output,
                 float           scale,
                 int             depth0_minus_1,
                 int             depth1_minus_1,
                 float           input0_zp,
                 float           input1_zp,
                 float           output_zp
    )
{
    int x = get_global_id(0);
    int y = get_global_id(1);
    int z = get_global_id(2);
    int4 coord = (int4)(x, y, z, z);
    int4 src0, src1, dst;

    src0 = read_imagei(input0, coord);
    src1 = read_imagei(input1, coord.xy);

    float data = (convert_float(src0.x) - input0_zp) / (convert_float(src1.x) - input1_zp) * scale + output_zp;
    dst.x = convert_int_rte(data);
    write_imagei(output, coord, dst.xxxx);
}

__kernel void gpuDiv_U32_U32toU32
    (
    __read_only  image2d_array_t input0,
    __read_only  image2d_array_t input1,
    __write_only image2d_array_t output,
                 float           scale,
                 int             depth0_minus_1,
                 int             depth1_minus_1,
                 float           input0_zp,
                 float           input1_zp,
                 float           output_zp
    )
{
    int x = get_global_id(0);
    int y = get_global_id(1);
    int z = get_global_id(2);
    int4 coord = (int4)(x, y, z, z);
    uint4 src0, src1, dst;
    int4 coord_in0 = (int4)(x, y, z, z);
    int4 coord_in1 = (int4)(x, y, z, z);

    _viv_asm(CLAMP0MAX, coord_in0.z, coord_in0.z, depth0_minus_1);
    src0 = read_imageui(input0, coord_in0);
    _viv_asm(CLAMP0MAX, coord_in1.z, coord_in1.z, depth1_minus_1);
    src1 = read_imageui(input1, coord_in1);

    float data = (convert_float(src0.x) - input0_zp) / (convert_float(src1.x) - input1_zp) * scale + output_zp;
    dst.x = convert_uint_rte(data);
    write_imageui(output, coord, dst.xxxx);
}

__kernel void gpuDiv_U32_U32toU32_BroadCastZ
    (
    __read_only  image2d_array_t input0,
    __read_only  image2d_t       input1,
    __write_only image2d_array_t output,
                 float           scale,
                 int             depth0_minus_1,
                 int             depth1_minus_1,
                 float           input0_zp,
                 float           input1_zp,
                 float           output_zp
    )
{
    int x = get_global_id(0);
    int y = get_global_id(1);
    int z = get_global_id(2);
    int4 coord = (int4)(x, y, z, z);
    uint4 src0, src1, dst;

    src0 = read_imageui(input0, coord);
    src1 = read_imageui(input1, coord.xy);

    float data = (convert_float(src0.x) - input0_zp) / (convert_float(src1.x) - input1_zp) * scale + output_zp;
    dst.x = convert_uint_rte(data);
    write_imageui(output, coord, dst.xxxx);
}
