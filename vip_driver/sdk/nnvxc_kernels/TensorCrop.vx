#pragma OPENCL EXTENSION cl_viv_vx_extension : enable

#include "cl_viv_vx_ext.h"

_viv_uniform int4 offset4;

__kernel void tensorCrop_16Bitsto16Bits
    (
    __read_only  image2d_array_t input,
    __write_only image2d_array_t output
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    vxc_short8 src0;
    VXC_ReadImage2DArray(src0, input, coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

    coord.xyz -= offset4.xyz;

    VXC_WriteImage2DArray(output, coord, src0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
}

__kernel void tensorCrop_16Bitsto16Bits_2D
    (
    __read_only  image2d_array_t input,
    __write_only image2d_array_t output
    )
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    vxc_short8 src0;
    VXC_ReadImage(src0, input,coord.xy, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

    coord.xy -= offset4.xy;

    VXC_WriteImage(output, coord.xy, src0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
}

_viv_uniform VXC_512Bits uniU8MulAndPostShift_2x8;
_viv_uniform VXC_512Bits uniU8MulAndPostShift_Hi_2x8;
_viv_uniform int2 multAndoutZP;//[0:15] multiplier, [31:63] output zp

#define CROP_8BITSTO8BITS_3D(name, src_type, dst_type) \
__kernel void tensorCrop_##name \
    ( \
    __read_only  image2d_array_t input, \
    __write_only image2d_array_t output \
    ) \
{ \
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), get_global_id(2)); \
    src_type src; \
    dst_type dst; \
    VXC_ReadImage2DArray(src, input,coord, 0, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0)); \
 \
    coord.xyz -= offset4.xyz; \
 \
    vxc_ushort8 multiplier; \
    _viv_asm(COPY, multiplier, multAndoutZP, 16); \
    VXC_DP2x8(dst, src, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniU8MulAndPostShift_2x8); \
    VXC_DP2x8(dst, src, multiplier, VXC_MODIFIER(8, 15, 0, VXC_RM_ToNearestEven, 1), uniU8MulAndPostShift_Hi_2x8); \
    VXC_WriteImage2DArray(output, coord, dst, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0)); \
}
CROP_8BITSTO8BITS_3D(U8toU8, vxc_uchar16, vxc_uchar16)
CROP_8BITSTO8BITS_3D(I8toI8, vxc_char16,  vxc_char16)

#define CROP_8BITSTO8BITS_2D(name, src_type, dst_type) \
__kernel void tensorCrop_##name \
    ( \
    __read_only  image2d_array_t input, \
    __write_only image2d_array_t output \
    ) \
{ \
    int2 coord = (int2)(get_global_id(0), get_global_id(1)); \
    src_type src; \
    dst_type dst; \
    VXC_ReadImage(src, input,coord, 0, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0)); \
 \
    coord.xy -= offset4.xy; \
 \
    vxc_ushort8 multiplier; \
    _viv_asm(COPY, multiplier, multAndoutZP, 16); \
    VXC_DP2x8(dst, src, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniU8MulAndPostShift_2x8); \
    VXC_DP2x8(dst, src, multiplier, VXC_MODIFIER(8, 15, 0, VXC_RM_ToNearestEven, 1), uniU8MulAndPostShift_Hi_2x8); \
    VXC_WriteImage(output, coord, dst, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0)); \
}
CROP_8BITSTO8BITS_2D(U8toU8_2D, vxc_uchar16, vxc_uchar16)
CROP_8BITSTO8BITS_2D(I8toI8_2D, vxc_char16,  vxc_char16)


#define CROP_TO16BITS_3D(name0, name1, src_type, dst_type, save_type) \
__kernel void tensorCrop_##name0##to##name1 \
    ( \
    __read_only  image2d_array_t input, \
    __write_only image2d_array_t output \
    ) \
{ \
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), get_global_id(2)); \
    src_type src0; \
    VXC_ReadImage2DArray(src0, input,coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
 \
    coord.xyz -= offset4.xyz; \
 \
    dst_type data; \
    save_type dst; \
 \
    vxc_ushort8 multiplier; \
    _viv_asm(COPY, multiplier, multAndoutZP, 16); \
    VXC_DP2x8(data, src0, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniU8MulAndPostShift_2x8); \
    _viv_asm(COPY, dst, data, 16); \
    VXC_WriteImage2DArray(output, coord, dst, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0)); \
}
CROP_TO16BITS_3D(U8,  F16, vxc_uchar8, vxc_half8, vxc_short8)
CROP_TO16BITS_3D(I8,  F16, vxc_char8,  vxc_half8, vxc_short8)
CROP_TO16BITS_3D(I16, F16, vxc_short8, vxc_half8, vxc_short8)
CROP_TO16BITS_3D(I8,  I16, vxc_char8,  vxc_half8, vxc_short8)
CROP_TO16BITS_3D(I16, I16, vxc_short8, vxc_half8, vxc_short8)

#define CROP_TO16BITS_2D(name0, name1, src_type, dst_type, save_type) \
__kernel void tensorCrop_##name0##to##name1##_2D \
    ( \
    __read_only  image2d_array_t input, \
    __write_only image2d_array_t output \
    ) \
{ \
    int2 coord = (int2)(get_global_id(0), get_global_id(1)); \
    src_type src0; \
    VXC_ReadImage(src0, input,coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
 \
    coord.xy -= offset4.xy; \
 \
    dst_type data; \
    save_type dst; \
 \
    vxc_ushort8 multiplier; \
    _viv_asm(COPY, multiplier, multAndoutZP, 16); \
    VXC_DP2x8(data, src0, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniU8MulAndPostShift_2x8); \
    _viv_asm(COPY, dst, data, 16); \
    VXC_WriteImage(output, coord, dst, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0)); \
}
CROP_TO16BITS_2D(U8,  F16, vxc_uchar8, vxc_half8, vxc_short8)
CROP_TO16BITS_2D(I8,  F16, vxc_char8,  vxc_half8, vxc_short8)
CROP_TO16BITS_2D(I16, F16, vxc_short8, vxc_half8, vxc_short8)
CROP_TO16BITS_2D(I8,  I16, vxc_char8,  vxc_half8, vxc_short8)
CROP_TO16BITS_2D(I16, I16, vxc_short8, vxc_half8, vxc_short8)

__kernel void tensorCrop_8Bitsto8Bits
    (
    __read_only     image2d_array_t input,
    __write_only    image2d_array_t output
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    vxc_uchar16 src0;
    VXC_ReadImage2DArray(src0, input,coord, 0, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));

    coord.xyz -= offset4.xyz;

    VXC_WriteImage2DArray(output, coord, src0, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
}

__kernel void tensorCrop_8Bitsto8Bits_2D
    (
    __read_only     image2d_array_t input,
    __write_only    image2d_array_t output
    )
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    vxc_uchar16 src0;
    VXC_ReadImage(src0, input, coord, 0, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));

    coord.xy -= offset4.xy;

    VXC_WriteImage(output, coord, src0, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
}

__kernel void tensorCrop_F16toI16
    (
    __read_only  image2d_array_t input,
    __write_only image2d_array_t output
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    vxc_short8 v0;
    vxc_half8 src0;
    vxc_short8 dst;
    VXC_ReadImage2DArray(v0, input, coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src0, v0, 16);

    coord.xyz -= offset4.xyz;

    vxc_ushort8 multiplier;
    _viv_asm(COPY, multiplier, multAndoutZP, 16);
    VXC_DP2x8(dst, src0, multiplier, VXC_MODIFIER(0, 7,  0, VXC_RM_ToNearestEven, 1), uniU8MulAndPostShift_2x8);

    VXC_WriteImage2DArray(output, coord, dst, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
}

__kernel void tensorCrop_F16toI16_2D
    (
    __read_only  image2d_array_t input,
    __write_only image2d_array_t output
    )
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    vxc_short8 v0;
    vxc_half8 src0;
    vxc_char16 dst;
    VXC_ReadImage(v0, input, coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src0, v0, 16);

    coord.xy -= offset4.xy;

    vxc_ushort8 multiplier;
    _viv_asm(COPY, multiplier, multAndoutZP, 16);
    VXC_DP2x8(dst, src0, multiplier, VXC_MODIFIER(0, 7,  0, VXC_RM_ToNearestEven, 1), uniU8MulAndPostShift_2x8);

    VXC_WriteImage(output, coord, dst, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
}

#define CROP_F16TO8BITS_3D(name, dst_type) \
__kernel void tensorCrop_F16to##name \
    ( \
    __read_only  image2d_array_t input, \
    __write_only image2d_array_t output \
    ) \
{ \
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), get_global_id(2)); \
 \
    vxc_short8 v0, v1; \
    vxc_half8 src0, src1; \
    dst_type dst; \
    VXC_ReadImage2DArray(v0, input, coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src0, v0, 16); \
    VXC_ReadImage2DArray(v1, input, coord, VXC_5BITOFFSET_XY(8, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src1, v1, 16); \
 \
    coord.xyz -= offset4.xyz; \
 \
    vxc_ushort8 multiplier; \
    _viv_asm(COPY, multiplier, multAndoutZP, 16); \
    VXC_DP2x8(dst, src0, multiplier, VXC_MODIFIER(0, 7,  0, VXC_RM_ToNearestEven, 1), uniU8MulAndPostShift_2x8); \
    VXC_DP2x8(dst, src1, multiplier, VXC_MODIFIER(8, 15, 0, VXC_RM_ToNearestEven, 1), uniU8MulAndPostShift_2x8); \
    VXC_WriteImage2DArray(output, coord, dst, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0)); \
}
CROP_F16TO8BITS_3D(U8, vxc_uchar16)
CROP_F16TO8BITS_3D(I8, vxc_char16)

#define CROP_F16TO8BITS_2D(name, dst_type) \
__kernel void tensorCrop_F16to##name##_2D \
    ( \
    __read_only  image2d_array_t input, \
    __write_only image2d_array_t output \
    ) \
{ \
    int2 coord = (int2)(get_global_id(0), get_global_id(1)); \
    vxc_short8 v0, v1; \
    vxc_half8 src0, src1; \
    dst_type dst; \
 \
    VXC_ReadImage(v0, input, coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src0, v0, 16); \
    VXC_ReadImage(v1, input, coord, VXC_5BITOFFSET_XY(8, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src1, v1, 16); \
 \
    coord.xy -= offset4.xy; \
 \
    vxc_ushort8 multiplier; \
    _viv_asm(COPY, multiplier, multAndoutZP, 16); \
    VXC_DP2x8(dst, src0, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniU8MulAndPostShift_2x8); \
    VXC_DP2x8(dst, src1, multiplier, VXC_MODIFIER(8, 15, 0, VXC_RM_ToNearestEven, 1), uniU8MulAndPostShift_2x8); \
 \
    VXC_WriteImage(output, coord.xy, dst, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0)); \
}
CROP_F16TO8BITS_2D(U8, vxc_uchar16)
CROP_F16TO8BITS_2D(I8, vxc_char16)
