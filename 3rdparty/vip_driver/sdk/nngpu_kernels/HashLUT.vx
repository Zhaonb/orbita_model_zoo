__kernel void gpuHashLUT_FP32(
    image2d_array_t input,
    image2d_array_t keys,
    image2d_array_t value,
    image2d_array_t hit,
    image2d_array_t output
    )
{
    int x = get_global_id(0);
    int y = get_global_id(1);
    int4 coord_input = (int4)(y, 0, 0, 0);
    int4 coord_value = (int4)(x, -1, 0, 0);
    int4 coord_out   = (int4)(x, y, 0, 0);
    int kw = get_image_width(keys);
    int4 key = read_imagei(input, coord_input);
    uint4 hitFlg = {0};
    float4 dst = {0.0};

    for(int i = 0; i < kw; i++)
    {
        int4 kId = read_imagei(keys, (int4)(i, 0, 0, 0));
        if(kId.x == key.x)
        {
            coord_value.y = i;
            hitFlg.x = 1;
            break;
        }
    }

    dst = read_imagef(value, coord_value);
    write_imagef(output, coord_out, dst);
    write_imageui(hit, (int4)(y, 0, 0, 0), hitFlg);
}

__kernel void gpuHashLUT_Quant8(
    image2d_array_t input,
    image2d_array_t keys,
    image2d_array_t value,
    image2d_array_t hit,
    image2d_array_t output
    )
{
    int x = get_global_id(0);
    int y = get_global_id(1);
    int4 coord_input = (int4)(y, 0, 0, 0);
    int4 coord_value = (int4)(x, -1, 0, 0);
    int4 coord_out   = (int4)(x, y, 0, 0);
    int kw = get_image_width(keys);
    int4 key = read_imagei(input, coord_input);
    uint4 hitFlg = {0};
    uint4 dst = {0.0};

    for(int i = 0; i < kw; i++)
    {
        int4 kId = read_imagei(keys, (int4)(i, 0, 0, 0));
        if(kId.x == key.x)
        {
            coord_value.y = i;
            hitFlg.x = 1;
            break;
        }
    }

    dst = read_imageui(value, coord_value);
    write_imageui(output, coord_out, dst);
    write_imageui(hit, (int4)(y, 0, 0, 0), hitFlg);
}

__kernel void gpuHashLUT_Int32(
    image2d_array_t input,
    image2d_array_t keys,
    image2d_array_t value,
    image2d_array_t hit,
    image2d_array_t output,
    float scaleInOut
    )
{
    int x = get_global_id(0);
    int y = get_global_id(1);
    int4 coord_input = (int4)(y, 0, 0, 0);
    int4 coord_value = (int4)(x, -1, 0, 0);
    int4 coord_out   = (int4)(x, y, 0, 0);
    int kw = get_image_width(keys);
    int4 key = read_imagei(input, coord_input);
    uint4 hitFlg = {0};
    int4 dst = {0.0};

    for(int i = 0; i < kw; i++)
    {
        int4 kId = read_imagei(keys, (int4)(i, 0, 0, 0));
        if(kId.x == key.x)
        {
            coord_value.y = i;
            hitFlg.x = 1;
            break;
        }
    }

    dst = read_imagei(value, coord_value);
    dst.x = floor(dst.x * scaleInOut + 0.5);
    write_imagei(output, coord_out, dst);
    write_imageui(hit, (int4)(y, 0, 0, 0), hitFlg);
}
