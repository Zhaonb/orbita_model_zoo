/****************************************************************************
*   Generated by ACUITY 6.12.4
*   Match ovxlib 1.1.53
*
*   Neural Network appliction network definition source file
****************************************************************************/
/*-------------------------------------------
                   Includes
 -------------------------------------------*/
#include <stdio.h>
#include <stdlib.h>

#include "vsi_nn_pub.h"

#include "vnn_global.h"
#include "vnn_yolov8sshapeslimcuint8.h"

/*-------------------------------------------
                   Macros
 -------------------------------------------*/

#define NEW_VXNODE(_node, _type, _in, _out, _uid) do {\
        _node = vsi_nn_AddNode( graph, _type, _in, _out, NULL );\
        if( NULL == _node ) {\
            goto error;\
        }\
        _node->uid = (uint32_t)_uid;\
    } while(0)

#define NEW_VIRTUAL_TENSOR(_id, _attr, _dtype) do {\
        memset( _attr.size, 0, VSI_NN_MAX_DIM_NUM * sizeof(vsi_size_t));\
        _attr.dim_num = VSI_NN_DIM_AUTO;\
        _attr.vtl = !VNN_APP_DEBUG;\
        _attr.is_const = FALSE;\
        _attr.dtype.vx_type = _dtype;\
        _id = vsi_nn_AddTensor( graph, VSI_NN_TENSOR_ID_AUTO,\
                & _attr, NULL );\
        if( VSI_NN_TENSOR_ID_NA == _id ) {\
            goto error;\
        }\
    } while(0)

// Set const tensor dims out of this macro.
#define NEW_CONST_TENSOR(_id, _attr, _dtype, _ofst, _size) do {\
        data = load_data( fp, _ofst, _size  );\
        _attr.vtl = FALSE;\
        _attr.is_const = TRUE;\
        _attr.dtype.vx_type = _dtype;\
        _id = vsi_nn_AddTensor( graph, VSI_NN_TENSOR_ID_AUTO,\
                & _attr, data );\
        free( data );\
        if( VSI_NN_TENSOR_ID_NA == _id ) {\
            goto error;\
        }\
    } while(0)

// Set generic tensor dims out of this macro.
#define NEW_NORM_TENSOR(_id, _attr, _dtype) do {\
        _attr.vtl = FALSE;\
        _attr.is_const = FALSE;\
        _attr.dtype.vx_type = _dtype;\
        if ( enable_from_handle )\
        {\
            _id = vsi_nn_AddTensorFromHandle( graph, VSI_NN_TENSOR_ID_AUTO,\
                    & _attr, NULL );\
        }\
        else\
        {\
            _id = vsi_nn_AddTensor( graph, VSI_NN_TENSOR_ID_AUTO,\
                    & _attr, NULL );\
        }\
        if( VSI_NN_TENSOR_ID_NA == _id ) {\
            goto error;\
        }\
    } while(0)

// Set generic tensor dims out of this macro.
#define NEW_NORM_TENSOR_FROM_HANDLE(_id, _attr, _dtype) do {\
        _attr.vtl = FALSE;\
        _attr.is_const = FALSE;\
        _attr.dtype.vx_type = _dtype;\
        _id = vsi_nn_AddTensorFromHandle( graph, VSI_NN_TENSOR_ID_AUTO,\
                & _attr, NULL );\
        if( VSI_NN_TENSOR_ID_NA == _id ) {\
            goto error;\
        }\
    } while(0)

#define NET_NODE_NUM            (167)
#define NET_NORM_TENSOR_NUM     (7)
#define NET_CONST_TENSOR_NUM    (132)
#define NET_VIRTUAL_TENSOR_NUM  (175)
#define NET_TOTAL_TENSOR_NUM    (NET_NORM_TENSOR_NUM + NET_CONST_TENSOR_NUM + NET_VIRTUAL_TENSOR_NUM)

/*-------------------------------------------
               Local Variables
 -------------------------------------------*/

/*-------------------------------------------
                  Functions
 -------------------------------------------*/
static uint8_t* load_data
    (
    FILE  * fp,
    size_t  ofst,
    size_t  sz
    )
{
    uint8_t* data;
    int32_t ret;
    data = NULL;
    if( NULL == fp )
    {
        return NULL;
    }

    ret = VSI_FSEEK(fp, ofst, SEEK_SET);
    if (ret != 0)
    {
        VSILOGE("blob seek failure.");
        return NULL;
    }

    data = (uint8_t*)malloc(sz);
    if (data == NULL)
    {
        VSILOGE("buffer malloc failure.");
        return NULL;
    }
    ret = fread(data, 1, sz, fp);
    return data;
} /* load_data() */

vsi_nn_graph_t * vnn_CreateYolov8sShapeSlimCUint8
    (
    const char * data_file_name,
    vsi_nn_context_t in_ctx,
    const vsi_nn_preprocess_map_element_t * pre_process_map,
    uint32_t pre_process_map_count,
    const vsi_nn_postprocess_map_element_t * post_process_map,
    uint32_t post_process_map_count
    )
{
    uint32_t                _infinity = VSI_NN_FLOAT32_INF;
    vsi_status              status;
    vsi_bool                release_ctx;
    vsi_nn_context_t        ctx;
    vsi_nn_graph_t *        graph;
    vsi_nn_node_t *         node[NET_NODE_NUM];
    vsi_nn_tensor_id_t      norm_tensor[NET_NORM_TENSOR_NUM];
    vsi_nn_tensor_id_t      const_tensor[NET_CONST_TENSOR_NUM];
    vsi_nn_tensor_attr_t    attr;
    FILE *                  fp;
    uint8_t *               data;
    uint32_t                i = 0;
    char *                  use_img_process_s;
    char *                  use_from_handle = NULL;
    int32_t                 enable_pre_post_process = 0;
    int32_t                 enable_from_handle = 0;
    vsi_bool                sort = FALSE;
    vsi_bool                inference_with_nbg = FALSE;
    char*                   pos = NULL;

    uint32_t   perm_1[] = { 0, 2, 1, 3 };
    uint32_t   perm_2[] = { 0, 2, 1, 3 };
    uint32_t   perm_3[] = { 0, 2, 1, 3 };
    vsi_size_t shape_1[] = { 6400, 16, 4, 1 };
    vsi_size_t shape_2[] = { 80, 80, 4, 1 };
    vsi_size_t shape_3[] = { 1600, 16, 4, 1 };
    vsi_size_t shape_4[] = { 40, 40, 4, 1 };
    vsi_size_t shape_5[] = { 400, 16, 4, 1 };
    vsi_size_t shape_6[] = { 20, 20, 4, 1 };
    uint32_t   slices_1[] = { 32, 32 };
    uint32_t   slices_2[] = { 64, 64 };
    uint32_t   slices_3[] = { 128, 128 };
    uint32_t   slices_4[] = { 256, 256 };
    uint32_t   slices_5[] = { 128, 128 };
    uint32_t   slices_6[] = { 64, 64 };
    uint32_t   slices_7[] = { 128, 128 };
    uint32_t   slices_8[] = { 256, 256 };




    (void)(_infinity);
    ctx = NULL;
    graph = NULL;
    status = VSI_FAILURE;
    memset( &attr, 0, sizeof( attr ) );
    memset( &node, 0, sizeof( vsi_nn_node_t * ) * NET_NODE_NUM );

    fp = fopen( data_file_name, "rb" );
    if( NULL == fp )
    {
        VSILOGE( "Open file %s failed.", data_file_name );
        goto error;
    }

    pos = strstr(data_file_name, ".nb");
    if( pos && strcmp(pos, ".nb") == 0 )
    {
        inference_with_nbg = TRUE;
    }

    if( NULL == in_ctx )
    {
        ctx = vsi_nn_CreateContext();
    }
    else
    {
        ctx = in_ctx;
    }

    use_img_process_s = getenv( "VSI_USE_IMAGE_PROCESS" );
    if( use_img_process_s )
    {
        enable_pre_post_process = atoi(use_img_process_s);
    }
    use_from_handle = getenv( "VSI_USE_FROM_HANDLE" );
    if ( use_from_handle )
    {
        enable_from_handle = atoi(use_from_handle);
    }

    graph = vsi_nn_CreateGraph( ctx, NET_TOTAL_TENSOR_NUM, NET_NODE_NUM );
    if( NULL == graph )
    {
        VSILOGE( "Create graph fail." );
        goto error;
    }
    vsi_nn_SetGraphVersion( graph, VNN_VERSION_MAJOR, VNN_VERSION_MINOR, VNN_VERSION_PATCH );
    vsi_nn_SetGraphInputs( graph, NULL, 1 );
    vsi_nn_SetGraphOutputs( graph, NULL, 6 );

/*-----------------------------------------
  Register client ops
 -----------------------------------------*/


/*-----------------------------------------
  Node definitions
 -----------------------------------------*/
    if( !inference_with_nbg )
    {

    /*-----------------------------------------
      lid       - Conv_/model.0/conv/Conv_234
      var       - node[0]
      name      - Conv_/model.0/conv/Conv
      operation - convolution
      input     - [640, 640, 3, 1]
      filter    - [3, 3, 3, 32]
      output    - [320, 320, 32, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[0], VSI_NN_OP_CONV2D, 3, 1, 234);
    node[0]->nn_param.conv2d.ksize[0] = 3;
    node[0]->nn_param.conv2d.ksize[1] = 3;
    node[0]->nn_param.conv2d.weights = 32;
    node[0]->nn_param.conv2d.stride[0] = 2;
    node[0]->nn_param.conv2d.stride[1] = 2;
    node[0]->nn_param.conv2d.pad[0] = 1;
    node[0]->nn_param.conv2d.pad[1] = 1;
    node[0]->nn_param.conv2d.pad[2] = 1;
    node[0]->nn_param.conv2d.pad[3] = 1;
    node[0]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[0]->nn_param.conv2d.group = 1;
    node[0]->nn_param.conv2d.dilation[0] = 1;
    node[0]->nn_param.conv2d.dilation[1] = 1;
    node[0]->nn_param.conv2d.multiplier = 0;
    node[0]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[0]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[0]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/model.0/act/Sigmoid_235_Mul_/model.0/act/Mul_233
      var       - node[1]
      name      - swish
      operation - swish
      input     - [320, 320, 32, 1]
      output    - [320, 320, 32, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[1], VSI_NN_OP_SWISH, 1, 1, 233);
    node[1]->nn_param.swish.type = VSI_NN_SWISH;
    node[1]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/model.1/conv/Conv_232
      var       - node[2]
      name      - Conv_/model.1/conv/Conv
      operation - convolution
      input     - [320, 320, 32, 1]
      filter    - [3, 3, 32, 64]
      output    - [160, 160, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[2], VSI_NN_OP_CONV2D, 3, 1, 232);
    node[2]->nn_param.conv2d.ksize[0] = 3;
    node[2]->nn_param.conv2d.ksize[1] = 3;
    node[2]->nn_param.conv2d.weights = 64;
    node[2]->nn_param.conv2d.stride[0] = 2;
    node[2]->nn_param.conv2d.stride[1] = 2;
    node[2]->nn_param.conv2d.pad[0] = 1;
    node[2]->nn_param.conv2d.pad[1] = 1;
    node[2]->nn_param.conv2d.pad[2] = 1;
    node[2]->nn_param.conv2d.pad[3] = 1;
    node[2]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[2]->nn_param.conv2d.group = 1;
    node[2]->nn_param.conv2d.dilation[0] = 1;
    node[2]->nn_param.conv2d.dilation[1] = 1;
    node[2]->nn_param.conv2d.multiplier = 0;
    node[2]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[2]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[2]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/model.1/act/Sigmoid_230_Mul_/model.1/act/Mul_229
      var       - node[3]
      name      - swish
      operation - swish
      input     - [160, 160, 64, 1]
      output    - [160, 160, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[3], VSI_NN_OP_SWISH, 1, 1, 229);
    node[3]->nn_param.swish.type = VSI_NN_SWISH;
    node[3]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/model.2/cv1/conv/Conv_225
      var       - node[4]
      name      - Conv_/model.2/cv1/conv/Conv
      operation - convolution
      input     - [160, 160, 64, 1]
      filter    - [1, 1, 64, 64]
      output    - [160, 160, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[4], VSI_NN_OP_CONV2D, 3, 1, 225);
    node[4]->nn_param.conv2d.ksize[0] = 1;
    node[4]->nn_param.conv2d.ksize[1] = 1;
    node[4]->nn_param.conv2d.weights = 64;
    node[4]->nn_param.conv2d.stride[0] = 1;
    node[4]->nn_param.conv2d.stride[1] = 1;
    node[4]->nn_param.conv2d.pad[0] = 0;
    node[4]->nn_param.conv2d.pad[1] = 0;
    node[4]->nn_param.conv2d.pad[2] = 0;
    node[4]->nn_param.conv2d.pad[3] = 0;
    node[4]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[4]->nn_param.conv2d.group = 1;
    node[4]->nn_param.conv2d.dilation[0] = 1;
    node[4]->nn_param.conv2d.dilation[1] = 1;
    node[4]->nn_param.conv2d.multiplier = 0;
    node[4]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[4]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[4]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/model.2/cv1/act/Sigmoid_226_Mul_/model.2/cv1/act/Mul_222
      var       - node[5]
      name      - swish
      operation - swish
      input     - [160, 160, 64, 1]
      output    - [160, 160, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[5], VSI_NN_OP_SWISH, 1, 1, 222);
    node[5]->nn_param.swish.type = VSI_NN_SWISH;
    node[5]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Split_/model.2/Split_217
      var       - node[6]
      name      - Split_/model.2/Split
      operation - split
      input     - [160, 160, 64, 1]
      output    - [160, 160, 32, 1]
                  [160, 160, 32, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[6], VSI_NN_OP_SPLIT, 1, 2, 217);
    node[6]->nn_param.split.axis = 2;
    node[6]->nn_param.split.slices = slices_1;
    node[6]->nn_param.split.slices_num = 2;

    /*-----------------------------------------
      lid       - Conv_/model.2/m.0/cv1/conv/Conv_216
      var       - node[7]
      name      - Conv_/model.2/m.0/cv1/conv/Conv
      operation - convolution
      input     - [160, 160, 32, 1]
      filter    - [3, 3, 32, 32]
      output    - [160, 160, 32, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[7], VSI_NN_OP_CONV2D, 3, 1, 216);
    node[7]->nn_param.conv2d.ksize[0] = 3;
    node[7]->nn_param.conv2d.ksize[1] = 3;
    node[7]->nn_param.conv2d.weights = 32;
    node[7]->nn_param.conv2d.stride[0] = 1;
    node[7]->nn_param.conv2d.stride[1] = 1;
    node[7]->nn_param.conv2d.pad[0] = 1;
    node[7]->nn_param.conv2d.pad[1] = 1;
    node[7]->nn_param.conv2d.pad[2] = 1;
    node[7]->nn_param.conv2d.pad[3] = 1;
    node[7]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[7]->nn_param.conv2d.group = 1;
    node[7]->nn_param.conv2d.dilation[0] = 1;
    node[7]->nn_param.conv2d.dilation[1] = 1;
    node[7]->nn_param.conv2d.multiplier = 0;
    node[7]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[7]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[7]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/model.2/m.0/cv1/act/Sigmoid_211_Mul_/model.2/m.0/cv1/act/Mul_210
      var       - node[8]
      name      - swish
      operation - swish
      input     - [160, 160, 32, 1]
      output    - [160, 160, 32, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[8], VSI_NN_OP_SWISH, 1, 1, 210);
    node[8]->nn_param.swish.type = VSI_NN_SWISH;
    node[8]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/model.2/m.0/cv2/conv/Conv_208
      var       - node[9]
      name      - Conv_/model.2/m.0/cv2/conv/Conv
      operation - convolution
      input     - [160, 160, 32, 1]
      filter    - [3, 3, 32, 32]
      output    - [160, 160, 32, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[9], VSI_NN_OP_CONV2D, 3, 1, 208);
    node[9]->nn_param.conv2d.ksize[0] = 3;
    node[9]->nn_param.conv2d.ksize[1] = 3;
    node[9]->nn_param.conv2d.weights = 32;
    node[9]->nn_param.conv2d.stride[0] = 1;
    node[9]->nn_param.conv2d.stride[1] = 1;
    node[9]->nn_param.conv2d.pad[0] = 1;
    node[9]->nn_param.conv2d.pad[1] = 1;
    node[9]->nn_param.conv2d.pad[2] = 1;
    node[9]->nn_param.conv2d.pad[3] = 1;
    node[9]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[9]->nn_param.conv2d.group = 1;
    node[9]->nn_param.conv2d.dilation[0] = 1;
    node[9]->nn_param.conv2d.dilation[1] = 1;
    node[9]->nn_param.conv2d.multiplier = 0;
    node[9]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[9]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[9]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/model.2/m.0/cv2/act/Sigmoid_209_Mul_/model.2/m.0/cv2/act/Mul_201
      var       - node[10]
      name      - swish
      operation - swish
      input     - [160, 160, 32, 1]
      output    - [160, 160, 32, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[10], VSI_NN_OP_SWISH, 1, 1, 201);
    node[10]->nn_param.swish.type = VSI_NN_SWISH;
    node[10]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Add_/model.2/m.0/Add_195
      var       - node[11]
      name      - Add_/model.2/m.0/Add
      operation - add
      input     - [160, 160, 32, 1]
                  [160, 160, 32, 1]
      output    - [160, 160, 32, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[11], VSI_NN_OP_ADD, 2, 1, 195);

    /*-----------------------------------------
      lid       - Concat_/model.2/Concat_190
      var       - node[12]
      name      - Concat_/model.2/Concat
      operation - concat
      input     - [160, 160, 32, 1]
                  [160, 160, 32, 1]
                  [160, 160, 32, 1]
      output    - [160, 160, 96, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[12], VSI_NN_OP_CONCAT, 3, 1, 190);
    node[12]->nn_param.concat.axis = 2;

    /*-----------------------------------------
      lid       - Conv_/model.2/cv2/conv/Conv_189
      var       - node[13]
      name      - Conv_/model.2/cv2/conv/Conv
      operation - convolution
      input     - [160, 160, 96, 1]
      filter    - [1, 1, 96, 64]
      output    - [160, 160, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[13], VSI_NN_OP_CONV2D, 3, 1, 189);
    node[13]->nn_param.conv2d.ksize[0] = 1;
    node[13]->nn_param.conv2d.ksize[1] = 1;
    node[13]->nn_param.conv2d.weights = 64;
    node[13]->nn_param.conv2d.stride[0] = 1;
    node[13]->nn_param.conv2d.stride[1] = 1;
    node[13]->nn_param.conv2d.pad[0] = 0;
    node[13]->nn_param.conv2d.pad[1] = 0;
    node[13]->nn_param.conv2d.pad[2] = 0;
    node[13]->nn_param.conv2d.pad[3] = 0;
    node[13]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[13]->nn_param.conv2d.group = 1;
    node[13]->nn_param.conv2d.dilation[0] = 1;
    node[13]->nn_param.conv2d.dilation[1] = 1;
    node[13]->nn_param.conv2d.multiplier = 0;
    node[13]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[13]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[13]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/model.2/cv2/act/Sigmoid_183_Mul_/model.2/cv2/act/Mul_182
      var       - node[14]
      name      - swish
      operation - swish
      input     - [160, 160, 64, 1]
      output    - [160, 160, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[14], VSI_NN_OP_SWISH, 1, 1, 182);
    node[14]->nn_param.swish.type = VSI_NN_SWISH;
    node[14]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/model.3/conv/Conv_176
      var       - node[15]
      name      - Conv_/model.3/conv/Conv
      operation - convolution
      input     - [160, 160, 64, 1]
      filter    - [3, 3, 64, 128]
      output    - [80, 80, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[15], VSI_NN_OP_CONV2D, 3, 1, 176);
    node[15]->nn_param.conv2d.ksize[0] = 3;
    node[15]->nn_param.conv2d.ksize[1] = 3;
    node[15]->nn_param.conv2d.weights = 128;
    node[15]->nn_param.conv2d.stride[0] = 2;
    node[15]->nn_param.conv2d.stride[1] = 2;
    node[15]->nn_param.conv2d.pad[0] = 1;
    node[15]->nn_param.conv2d.pad[1] = 1;
    node[15]->nn_param.conv2d.pad[2] = 1;
    node[15]->nn_param.conv2d.pad[3] = 1;
    node[15]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[15]->nn_param.conv2d.group = 1;
    node[15]->nn_param.conv2d.dilation[0] = 1;
    node[15]->nn_param.conv2d.dilation[1] = 1;
    node[15]->nn_param.conv2d.multiplier = 0;
    node[15]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[15]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[15]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/model.3/act/Sigmoid_177_Mul_/model.3/act/Mul_171
      var       - node[16]
      name      - swish
      operation - swish
      input     - [80, 80, 128, 1]
      output    - [80, 80, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[16], VSI_NN_OP_SWISH, 1, 1, 171);
    node[16]->nn_param.swish.type = VSI_NN_SWISH;
    node[16]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/model.4/cv1/conv/Conv_170
      var       - node[17]
      name      - Conv_/model.4/cv1/conv/Conv
      operation - convolution
      input     - [80, 80, 128, 1]
      filter    - [1, 1, 128, 128]
      output    - [80, 80, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[17], VSI_NN_OP_CONV2D, 3, 1, 170);
    node[17]->nn_param.conv2d.ksize[0] = 1;
    node[17]->nn_param.conv2d.ksize[1] = 1;
    node[17]->nn_param.conv2d.weights = 128;
    node[17]->nn_param.conv2d.stride[0] = 1;
    node[17]->nn_param.conv2d.stride[1] = 1;
    node[17]->nn_param.conv2d.pad[0] = 0;
    node[17]->nn_param.conv2d.pad[1] = 0;
    node[17]->nn_param.conv2d.pad[2] = 0;
    node[17]->nn_param.conv2d.pad[3] = 0;
    node[17]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[17]->nn_param.conv2d.group = 1;
    node[17]->nn_param.conv2d.dilation[0] = 1;
    node[17]->nn_param.conv2d.dilation[1] = 1;
    node[17]->nn_param.conv2d.multiplier = 0;
    node[17]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[17]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[17]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/model.4/cv1/act/Sigmoid_167_Mul_/model.4/cv1/act/Mul_166
      var       - node[18]
      name      - swish
      operation - swish
      input     - [80, 80, 128, 1]
      output    - [80, 80, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[18], VSI_NN_OP_SWISH, 1, 1, 166);
    node[18]->nn_param.swish.type = VSI_NN_SWISH;
    node[18]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Split_/model.4/Split_165
      var       - node[19]
      name      - Split_/model.4/Split
      operation - split
      input     - [80, 80, 128, 1]
      output    - [80, 80, 64, 1]
                  [80, 80, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[19], VSI_NN_OP_SPLIT, 1, 2, 165);
    node[19]->nn_param.split.axis = 2;
    node[19]->nn_param.split.slices = slices_2;
    node[19]->nn_param.split.slices_num = 2;

    /*-----------------------------------------
      lid       - Conv_/model.4/m.0/cv1/conv/Conv_164
      var       - node[20]
      name      - Conv_/model.4/m.0/cv1/conv/Conv
      operation - convolution
      input     - [80, 80, 64, 1]
      filter    - [3, 3, 64, 64]
      output    - [80, 80, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[20], VSI_NN_OP_CONV2D, 3, 1, 164);
    node[20]->nn_param.conv2d.ksize[0] = 3;
    node[20]->nn_param.conv2d.ksize[1] = 3;
    node[20]->nn_param.conv2d.weights = 64;
    node[20]->nn_param.conv2d.stride[0] = 1;
    node[20]->nn_param.conv2d.stride[1] = 1;
    node[20]->nn_param.conv2d.pad[0] = 1;
    node[20]->nn_param.conv2d.pad[1] = 1;
    node[20]->nn_param.conv2d.pad[2] = 1;
    node[20]->nn_param.conv2d.pad[3] = 1;
    node[20]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[20]->nn_param.conv2d.group = 1;
    node[20]->nn_param.conv2d.dilation[0] = 1;
    node[20]->nn_param.conv2d.dilation[1] = 1;
    node[20]->nn_param.conv2d.multiplier = 0;
    node[20]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[20]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[20]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/model.4/m.0/cv1/act/Sigmoid_157_Mul_/model.4/m.0/cv1/act/Mul_156
      var       - node[21]
      name      - swish
      operation - swish
      input     - [80, 80, 64, 1]
      output    - [80, 80, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[21], VSI_NN_OP_SWISH, 1, 1, 156);
    node[21]->nn_param.swish.type = VSI_NN_SWISH;
    node[21]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/model.4/m.0/cv2/conv/Conv_147
      var       - node[22]
      name      - Conv_/model.4/m.0/cv2/conv/Conv
      operation - convolution
      input     - [80, 80, 64, 1]
      filter    - [3, 3, 64, 64]
      output    - [80, 80, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[22], VSI_NN_OP_CONV2D, 3, 1, 147);
    node[22]->nn_param.conv2d.ksize[0] = 3;
    node[22]->nn_param.conv2d.ksize[1] = 3;
    node[22]->nn_param.conv2d.weights = 64;
    node[22]->nn_param.conv2d.stride[0] = 1;
    node[22]->nn_param.conv2d.stride[1] = 1;
    node[22]->nn_param.conv2d.pad[0] = 1;
    node[22]->nn_param.conv2d.pad[1] = 1;
    node[22]->nn_param.conv2d.pad[2] = 1;
    node[22]->nn_param.conv2d.pad[3] = 1;
    node[22]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[22]->nn_param.conv2d.group = 1;
    node[22]->nn_param.conv2d.dilation[0] = 1;
    node[22]->nn_param.conv2d.dilation[1] = 1;
    node[22]->nn_param.conv2d.multiplier = 0;
    node[22]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[22]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[22]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/model.4/m.0/cv2/act/Sigmoid_148_Mul_/model.4/m.0/cv2/act/Mul_139
      var       - node[23]
      name      - swish
      operation - swish
      input     - [80, 80, 64, 1]
      output    - [80, 80, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[23], VSI_NN_OP_SWISH, 1, 1, 139);
    node[23]->nn_param.swish.type = VSI_NN_SWISH;
    node[23]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Add_/model.4/m.0/Add_138
      var       - node[24]
      name      - Add_/model.4/m.0/Add
      operation - add
      input     - [80, 80, 64, 1]
                  [80, 80, 64, 1]
      output    - [80, 80, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[24], VSI_NN_OP_ADD, 2, 1, 138);

    /*-----------------------------------------
      lid       - Conv_/model.4/m.1/cv1/conv/Conv_158
      var       - node[25]
      name      - Conv_/model.4/m.1/cv1/conv/Conv
      operation - convolution
      input     - [80, 80, 64, 1]
      filter    - [3, 3, 64, 64]
      output    - [80, 80, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[25], VSI_NN_OP_CONV2D, 3, 1, 158);
    node[25]->nn_param.conv2d.ksize[0] = 3;
    node[25]->nn_param.conv2d.ksize[1] = 3;
    node[25]->nn_param.conv2d.weights = 64;
    node[25]->nn_param.conv2d.stride[0] = 1;
    node[25]->nn_param.conv2d.stride[1] = 1;
    node[25]->nn_param.conv2d.pad[0] = 1;
    node[25]->nn_param.conv2d.pad[1] = 1;
    node[25]->nn_param.conv2d.pad[2] = 1;
    node[25]->nn_param.conv2d.pad[3] = 1;
    node[25]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[25]->nn_param.conv2d.group = 1;
    node[25]->nn_param.conv2d.dilation[0] = 1;
    node[25]->nn_param.conv2d.dilation[1] = 1;
    node[25]->nn_param.conv2d.multiplier = 0;
    node[25]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[25]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[25]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/model.4/m.1/cv1/act/Sigmoid_159_Mul_/model.4/m.1/cv1/act/Mul_151
      var       - node[26]
      name      - swish
      operation - swish
      input     - [80, 80, 64, 1]
      output    - [80, 80, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[26], VSI_NN_OP_SWISH, 1, 1, 151);
    node[26]->nn_param.swish.type = VSI_NN_SWISH;
    node[26]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/model.4/m.1/cv2/conv/Conv_149
      var       - node[27]
      name      - Conv_/model.4/m.1/cv2/conv/Conv
      operation - convolution
      input     - [80, 80, 64, 1]
      filter    - [3, 3, 64, 64]
      output    - [80, 80, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[27], VSI_NN_OP_CONV2D, 3, 1, 149);
    node[27]->nn_param.conv2d.ksize[0] = 3;
    node[27]->nn_param.conv2d.ksize[1] = 3;
    node[27]->nn_param.conv2d.weights = 64;
    node[27]->nn_param.conv2d.stride[0] = 1;
    node[27]->nn_param.conv2d.stride[1] = 1;
    node[27]->nn_param.conv2d.pad[0] = 1;
    node[27]->nn_param.conv2d.pad[1] = 1;
    node[27]->nn_param.conv2d.pad[2] = 1;
    node[27]->nn_param.conv2d.pad[3] = 1;
    node[27]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[27]->nn_param.conv2d.group = 1;
    node[27]->nn_param.conv2d.dilation[0] = 1;
    node[27]->nn_param.conv2d.dilation[1] = 1;
    node[27]->nn_param.conv2d.multiplier = 0;
    node[27]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[27]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[27]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/model.4/m.1/cv2/act/Sigmoid_150_Mul_/model.4/m.1/cv2/act/Mul_140
      var       - node[28]
      name      - swish
      operation - swish
      input     - [80, 80, 64, 1]
      output    - [80, 80, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[28], VSI_NN_OP_SWISH, 1, 1, 140);
    node[28]->nn_param.swish.type = VSI_NN_SWISH;
    node[28]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Add_/model.4/m.1/Add_132
      var       - node[29]
      name      - Add_/model.4/m.1/Add
      operation - add
      input     - [80, 80, 64, 1]
                  [80, 80, 64, 1]
      output    - [80, 80, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[29], VSI_NN_OP_ADD, 2, 1, 132);

    /*-----------------------------------------
      lid       - Concat_/model.4/Concat_131
      var       - node[30]
      name      - Concat_/model.4/Concat
      operation - concat
      input     - [80, 80, 64, 1]
                  [80, 80, 64, 1]
                  [80, 80, 64, 1]
                  [80, 80, 64, 1]
      output    - [80, 80, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[30], VSI_NN_OP_CONCAT, 4, 1, 131);
    node[30]->nn_param.concat.axis = 2;

    /*-----------------------------------------
      lid       - Conv_/model.4/cv2/conv/Conv_129
      var       - node[31]
      name      - Conv_/model.4/cv2/conv/Conv
      operation - convolution
      input     - [80, 80, 256, 1]
      filter    - [1, 1, 256, 128]
      output    - [80, 80, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[31], VSI_NN_OP_CONV2D, 3, 1, 129);
    node[31]->nn_param.conv2d.ksize[0] = 1;
    node[31]->nn_param.conv2d.ksize[1] = 1;
    node[31]->nn_param.conv2d.weights = 128;
    node[31]->nn_param.conv2d.stride[0] = 1;
    node[31]->nn_param.conv2d.stride[1] = 1;
    node[31]->nn_param.conv2d.pad[0] = 0;
    node[31]->nn_param.conv2d.pad[1] = 0;
    node[31]->nn_param.conv2d.pad[2] = 0;
    node[31]->nn_param.conv2d.pad[3] = 0;
    node[31]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[31]->nn_param.conv2d.group = 1;
    node[31]->nn_param.conv2d.dilation[0] = 1;
    node[31]->nn_param.conv2d.dilation[1] = 1;
    node[31]->nn_param.conv2d.multiplier = 0;
    node[31]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[31]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[31]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/model.4/cv2/act/Sigmoid_130_Mul_/model.4/cv2/act/Mul_119
      var       - node[32]
      name      - swish
      operation - swish
      input     - [80, 80, 128, 1]
      output    - [80, 80, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[32], VSI_NN_OP_SWISH, 1, 1, 119);
    node[32]->nn_param.swish.type = VSI_NN_SWISH;
    node[32]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/model.5/conv/Conv_231
      var       - node[33]
      name      - Conv_/model.5/conv/Conv
      operation - convolution
      input     - [80, 80, 128, 1]
      filter    - [3, 3, 128, 256]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[33], VSI_NN_OP_CONV2D, 3, 1, 231);
    node[33]->nn_param.conv2d.ksize[0] = 3;
    node[33]->nn_param.conv2d.ksize[1] = 3;
    node[33]->nn_param.conv2d.weights = 256;
    node[33]->nn_param.conv2d.stride[0] = 2;
    node[33]->nn_param.conv2d.stride[1] = 2;
    node[33]->nn_param.conv2d.pad[0] = 1;
    node[33]->nn_param.conv2d.pad[1] = 1;
    node[33]->nn_param.conv2d.pad[2] = 1;
    node[33]->nn_param.conv2d.pad[3] = 1;
    node[33]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[33]->nn_param.conv2d.group = 1;
    node[33]->nn_param.conv2d.dilation[0] = 1;
    node[33]->nn_param.conv2d.dilation[1] = 1;
    node[33]->nn_param.conv2d.multiplier = 0;
    node[33]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[33]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[33]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/model.5/act/Sigmoid_228_Mul_/model.5/act/Mul_227
      var       - node[34]
      name      - swish
      operation - swish
      input     - [40, 40, 256, 1]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[34], VSI_NN_OP_SWISH, 1, 1, 227);
    node[34]->nn_param.swish.type = VSI_NN_SWISH;
    node[34]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/model.6/cv1/conv/Conv_223
      var       - node[35]
      name      - Conv_/model.6/cv1/conv/Conv
      operation - convolution
      input     - [40, 40, 256, 1]
      filter    - [1, 1, 256, 256]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[35], VSI_NN_OP_CONV2D, 3, 1, 223);
    node[35]->nn_param.conv2d.ksize[0] = 1;
    node[35]->nn_param.conv2d.ksize[1] = 1;
    node[35]->nn_param.conv2d.weights = 256;
    node[35]->nn_param.conv2d.stride[0] = 1;
    node[35]->nn_param.conv2d.stride[1] = 1;
    node[35]->nn_param.conv2d.pad[0] = 0;
    node[35]->nn_param.conv2d.pad[1] = 0;
    node[35]->nn_param.conv2d.pad[2] = 0;
    node[35]->nn_param.conv2d.pad[3] = 0;
    node[35]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[35]->nn_param.conv2d.group = 1;
    node[35]->nn_param.conv2d.dilation[0] = 1;
    node[35]->nn_param.conv2d.dilation[1] = 1;
    node[35]->nn_param.conv2d.multiplier = 0;
    node[35]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[35]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[35]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/model.6/cv1/act/Sigmoid_224_Mul_/model.6/cv1/act/Mul_221
      var       - node[36]
      name      - swish
      operation - swish
      input     - [40, 40, 256, 1]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[36], VSI_NN_OP_SWISH, 1, 1, 221);
    node[36]->nn_param.swish.type = VSI_NN_SWISH;
    node[36]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Split_/model.6/Split_219
      var       - node[37]
      name      - Split_/model.6/Split
      operation - split
      input     - [40, 40, 256, 1]
      output    - [40, 40, 128, 1]
                  [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[37], VSI_NN_OP_SPLIT, 1, 2, 219);
    node[37]->nn_param.split.axis = 2;
    node[37]->nn_param.split.slices = slices_3;
    node[37]->nn_param.split.slices_num = 2;

    /*-----------------------------------------
      lid       - Conv_/model.6/m.0/cv1/conv/Conv_218
      var       - node[38]
      name      - Conv_/model.6/m.0/cv1/conv/Conv
      operation - convolution
      input     - [40, 40, 128, 1]
      filter    - [3, 3, 128, 128]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[38], VSI_NN_OP_CONV2D, 3, 1, 218);
    node[38]->nn_param.conv2d.ksize[0] = 3;
    node[38]->nn_param.conv2d.ksize[1] = 3;
    node[38]->nn_param.conv2d.weights = 128;
    node[38]->nn_param.conv2d.stride[0] = 1;
    node[38]->nn_param.conv2d.stride[1] = 1;
    node[38]->nn_param.conv2d.pad[0] = 1;
    node[38]->nn_param.conv2d.pad[1] = 1;
    node[38]->nn_param.conv2d.pad[2] = 1;
    node[38]->nn_param.conv2d.pad[3] = 1;
    node[38]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[38]->nn_param.conv2d.group = 1;
    node[38]->nn_param.conv2d.dilation[0] = 1;
    node[38]->nn_param.conv2d.dilation[1] = 1;
    node[38]->nn_param.conv2d.multiplier = 0;
    node[38]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[38]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[38]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/model.6/m.0/cv1/act/Sigmoid_213_Mul_/model.6/m.0/cv1/act/Mul_212
      var       - node[39]
      name      - swish
      operation - swish
      input     - [40, 40, 128, 1]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[39], VSI_NN_OP_SWISH, 1, 1, 212);
    node[39]->nn_param.swish.type = VSI_NN_SWISH;
    node[39]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/model.6/m.0/cv2/conv/Conv_204
      var       - node[40]
      name      - Conv_/model.6/m.0/cv2/conv/Conv
      operation - convolution
      input     - [40, 40, 128, 1]
      filter    - [3, 3, 128, 128]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[40], VSI_NN_OP_CONV2D, 3, 1, 204);
    node[40]->nn_param.conv2d.ksize[0] = 3;
    node[40]->nn_param.conv2d.ksize[1] = 3;
    node[40]->nn_param.conv2d.weights = 128;
    node[40]->nn_param.conv2d.stride[0] = 1;
    node[40]->nn_param.conv2d.stride[1] = 1;
    node[40]->nn_param.conv2d.pad[0] = 1;
    node[40]->nn_param.conv2d.pad[1] = 1;
    node[40]->nn_param.conv2d.pad[2] = 1;
    node[40]->nn_param.conv2d.pad[3] = 1;
    node[40]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[40]->nn_param.conv2d.group = 1;
    node[40]->nn_param.conv2d.dilation[0] = 1;
    node[40]->nn_param.conv2d.dilation[1] = 1;
    node[40]->nn_param.conv2d.multiplier = 0;
    node[40]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[40]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[40]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/model.6/m.0/cv2/act/Sigmoid_205_Mul_/model.6/m.0/cv2/act/Mul_199
      var       - node[41]
      name      - swish
      operation - swish
      input     - [40, 40, 128, 1]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[41], VSI_NN_OP_SWISH, 1, 1, 199);
    node[41]->nn_param.swish.type = VSI_NN_SWISH;
    node[41]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Add_/model.6/m.0/Add_198
      var       - node[42]
      name      - Add_/model.6/m.0/Add
      operation - add
      input     - [40, 40, 128, 1]
                  [40, 40, 128, 1]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[42], VSI_NN_OP_ADD, 2, 1, 198);

    /*-----------------------------------------
      lid       - Conv_/model.6/m.1/cv1/conv/Conv_220
      var       - node[43]
      name      - Conv_/model.6/m.1/cv1/conv/Conv
      operation - convolution
      input     - [40, 40, 128, 1]
      filter    - [3, 3, 128, 128]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[43], VSI_NN_OP_CONV2D, 3, 1, 220);
    node[43]->nn_param.conv2d.ksize[0] = 3;
    node[43]->nn_param.conv2d.ksize[1] = 3;
    node[43]->nn_param.conv2d.weights = 128;
    node[43]->nn_param.conv2d.stride[0] = 1;
    node[43]->nn_param.conv2d.stride[1] = 1;
    node[43]->nn_param.conv2d.pad[0] = 1;
    node[43]->nn_param.conv2d.pad[1] = 1;
    node[43]->nn_param.conv2d.pad[2] = 1;
    node[43]->nn_param.conv2d.pad[3] = 1;
    node[43]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[43]->nn_param.conv2d.group = 1;
    node[43]->nn_param.conv2d.dilation[0] = 1;
    node[43]->nn_param.conv2d.dilation[1] = 1;
    node[43]->nn_param.conv2d.multiplier = 0;
    node[43]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[43]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[43]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/model.6/m.1/cv1/act/Sigmoid_215_Mul_/model.6/m.1/cv1/act/Mul_214
      var       - node[44]
      name      - swish
      operation - swish
      input     - [40, 40, 128, 1]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[44], VSI_NN_OP_SWISH, 1, 1, 214);
    node[44]->nn_param.swish.type = VSI_NN_SWISH;
    node[44]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/model.6/m.1/cv2/conv/Conv_206
      var       - node[45]
      name      - Conv_/model.6/m.1/cv2/conv/Conv
      operation - convolution
      input     - [40, 40, 128, 1]
      filter    - [3, 3, 128, 128]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[45], VSI_NN_OP_CONV2D, 3, 1, 206);
    node[45]->nn_param.conv2d.ksize[0] = 3;
    node[45]->nn_param.conv2d.ksize[1] = 3;
    node[45]->nn_param.conv2d.weights = 128;
    node[45]->nn_param.conv2d.stride[0] = 1;
    node[45]->nn_param.conv2d.stride[1] = 1;
    node[45]->nn_param.conv2d.pad[0] = 1;
    node[45]->nn_param.conv2d.pad[1] = 1;
    node[45]->nn_param.conv2d.pad[2] = 1;
    node[45]->nn_param.conv2d.pad[3] = 1;
    node[45]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[45]->nn_param.conv2d.group = 1;
    node[45]->nn_param.conv2d.dilation[0] = 1;
    node[45]->nn_param.conv2d.dilation[1] = 1;
    node[45]->nn_param.conv2d.multiplier = 0;
    node[45]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[45]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[45]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/model.6/m.1/cv2/act/Sigmoid_207_Mul_/model.6/m.1/cv2/act/Mul_200
      var       - node[46]
      name      - swish
      operation - swish
      input     - [40, 40, 128, 1]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[46], VSI_NN_OP_SWISH, 1, 1, 200);
    node[46]->nn_param.swish.type = VSI_NN_SWISH;
    node[46]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Add_/model.6/m.1/Add_194
      var       - node[47]
      name      - Add_/model.6/m.1/Add
      operation - add
      input     - [40, 40, 128, 1]
                  [40, 40, 128, 1]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[47], VSI_NN_OP_ADD, 2, 1, 194);

    /*-----------------------------------------
      lid       - Concat_/model.6/Concat_193
      var       - node[48]
      name      - Concat_/model.6/Concat
      operation - concat
      input     - [40, 40, 128, 1]
                  [40, 40, 128, 1]
                  [40, 40, 128, 1]
                  [40, 40, 128, 1]
      output    - [40, 40, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[48], VSI_NN_OP_CONCAT, 4, 1, 193);
    node[48]->nn_param.concat.axis = 2;

    /*-----------------------------------------
      lid       - Conv_/model.6/cv2/conv/Conv_187
      var       - node[49]
      name      - Conv_/model.6/cv2/conv/Conv
      operation - convolution
      input     - [40, 40, 512, 1]
      filter    - [1, 1, 512, 256]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[49], VSI_NN_OP_CONV2D, 3, 1, 187);
    node[49]->nn_param.conv2d.ksize[0] = 1;
    node[49]->nn_param.conv2d.ksize[1] = 1;
    node[49]->nn_param.conv2d.weights = 256;
    node[49]->nn_param.conv2d.stride[0] = 1;
    node[49]->nn_param.conv2d.stride[1] = 1;
    node[49]->nn_param.conv2d.pad[0] = 0;
    node[49]->nn_param.conv2d.pad[1] = 0;
    node[49]->nn_param.conv2d.pad[2] = 0;
    node[49]->nn_param.conv2d.pad[3] = 0;
    node[49]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[49]->nn_param.conv2d.group = 1;
    node[49]->nn_param.conv2d.dilation[0] = 1;
    node[49]->nn_param.conv2d.dilation[1] = 1;
    node[49]->nn_param.conv2d.multiplier = 0;
    node[49]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[49]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[49]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/model.6/cv2/act/Sigmoid_188_Mul_/model.6/cv2/act/Mul_181
      var       - node[50]
      name      - swish
      operation - swish
      input     - [40, 40, 256, 1]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[50], VSI_NN_OP_SWISH, 1, 1, 181);
    node[50]->nn_param.swish.type = VSI_NN_SWISH;
    node[50]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/model.7/conv/Conv_202
      var       - node[51]
      name      - Conv_/model.7/conv/Conv
      operation - convolution
      input     - [40, 40, 256, 1]
      filter    - [3, 3, 256, 512]
      output    - [20, 20, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[51], VSI_NN_OP_CONV2D, 3, 1, 202);
    node[51]->nn_param.conv2d.ksize[0] = 3;
    node[51]->nn_param.conv2d.ksize[1] = 3;
    node[51]->nn_param.conv2d.weights = 512;
    node[51]->nn_param.conv2d.stride[0] = 2;
    node[51]->nn_param.conv2d.stride[1] = 2;
    node[51]->nn_param.conv2d.pad[0] = 1;
    node[51]->nn_param.conv2d.pad[1] = 1;
    node[51]->nn_param.conv2d.pad[2] = 1;
    node[51]->nn_param.conv2d.pad[3] = 1;
    node[51]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[51]->nn_param.conv2d.group = 1;
    node[51]->nn_param.conv2d.dilation[0] = 1;
    node[51]->nn_param.conv2d.dilation[1] = 1;
    node[51]->nn_param.conv2d.multiplier = 0;
    node[51]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[51]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[51]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/model.7/act/Sigmoid_203_Mul_/model.7/act/Mul_197
      var       - node[52]
      name      - swish
      operation - swish
      input     - [20, 20, 512, 1]
      output    - [20, 20, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[52], VSI_NN_OP_SWISH, 1, 1, 197);
    node[52]->nn_param.swish.type = VSI_NN_SWISH;
    node[52]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/model.8/cv1/conv/Conv_196
      var       - node[53]
      name      - Conv_/model.8/cv1/conv/Conv
      operation - convolution
      input     - [20, 20, 512, 1]
      filter    - [1, 1, 512, 512]
      output    - [20, 20, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[53], VSI_NN_OP_CONV2D, 3, 1, 196);
    node[53]->nn_param.conv2d.ksize[0] = 1;
    node[53]->nn_param.conv2d.ksize[1] = 1;
    node[53]->nn_param.conv2d.weights = 512;
    node[53]->nn_param.conv2d.stride[0] = 1;
    node[53]->nn_param.conv2d.stride[1] = 1;
    node[53]->nn_param.conv2d.pad[0] = 0;
    node[53]->nn_param.conv2d.pad[1] = 0;
    node[53]->nn_param.conv2d.pad[2] = 0;
    node[53]->nn_param.conv2d.pad[3] = 0;
    node[53]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[53]->nn_param.conv2d.group = 1;
    node[53]->nn_param.conv2d.dilation[0] = 1;
    node[53]->nn_param.conv2d.dilation[1] = 1;
    node[53]->nn_param.conv2d.multiplier = 0;
    node[53]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[53]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[53]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/model.8/cv1/act/Sigmoid_192_Mul_/model.8/cv1/act/Mul_191
      var       - node[54]
      name      - swish
      operation - swish
      input     - [20, 20, 512, 1]
      output    - [20, 20, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[54], VSI_NN_OP_SWISH, 1, 1, 191);
    node[54]->nn_param.swish.type = VSI_NN_SWISH;
    node[54]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Split_/model.8/Split_185
      var       - node[55]
      name      - Split_/model.8/Split
      operation - split
      input     - [20, 20, 512, 1]
      output    - [20, 20, 256, 1]
                  [20, 20, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[55], VSI_NN_OP_SPLIT, 1, 2, 185);
    node[55]->nn_param.split.axis = 2;
    node[55]->nn_param.split.slices = slices_4;
    node[55]->nn_param.split.slices_num = 2;

    /*-----------------------------------------
      lid       - Conv_/model.8/m.0/cv1/conv/Conv_184
      var       - node[56]
      name      - Conv_/model.8/m.0/cv1/conv/Conv
      operation - convolution
      input     - [20, 20, 256, 1]
      filter    - [3, 3, 256, 256]
      output    - [20, 20, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[56], VSI_NN_OP_CONV2D, 3, 1, 184);
    node[56]->nn_param.conv2d.ksize[0] = 3;
    node[56]->nn_param.conv2d.ksize[1] = 3;
    node[56]->nn_param.conv2d.weights = 256;
    node[56]->nn_param.conv2d.stride[0] = 1;
    node[56]->nn_param.conv2d.stride[1] = 1;
    node[56]->nn_param.conv2d.pad[0] = 1;
    node[56]->nn_param.conv2d.pad[1] = 1;
    node[56]->nn_param.conv2d.pad[2] = 1;
    node[56]->nn_param.conv2d.pad[3] = 1;
    node[56]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[56]->nn_param.conv2d.group = 1;
    node[56]->nn_param.conv2d.dilation[0] = 1;
    node[56]->nn_param.conv2d.dilation[1] = 1;
    node[56]->nn_param.conv2d.multiplier = 0;
    node[56]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[56]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[56]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/model.8/m.0/cv1/act/Sigmoid_179_Mul_/model.8/m.0/cv1/act/Mul_178
      var       - node[57]
      name      - swish
      operation - swish
      input     - [20, 20, 256, 1]
      output    - [20, 20, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[57], VSI_NN_OP_SWISH, 1, 1, 178);
    node[57]->nn_param.swish.type = VSI_NN_SWISH;
    node[57]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/model.8/m.0/cv2/conv/Conv_172
      var       - node[58]
      name      - Conv_/model.8/m.0/cv2/conv/Conv
      operation - convolution
      input     - [20, 20, 256, 1]
      filter    - [3, 3, 256, 256]
      output    - [20, 20, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[58], VSI_NN_OP_CONV2D, 3, 1, 172);
    node[58]->nn_param.conv2d.ksize[0] = 3;
    node[58]->nn_param.conv2d.ksize[1] = 3;
    node[58]->nn_param.conv2d.weights = 256;
    node[58]->nn_param.conv2d.stride[0] = 1;
    node[58]->nn_param.conv2d.stride[1] = 1;
    node[58]->nn_param.conv2d.pad[0] = 1;
    node[58]->nn_param.conv2d.pad[1] = 1;
    node[58]->nn_param.conv2d.pad[2] = 1;
    node[58]->nn_param.conv2d.pad[3] = 1;
    node[58]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[58]->nn_param.conv2d.group = 1;
    node[58]->nn_param.conv2d.dilation[0] = 1;
    node[58]->nn_param.conv2d.dilation[1] = 1;
    node[58]->nn_param.conv2d.multiplier = 0;
    node[58]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[58]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[58]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/model.8/m.0/cv2/act/Sigmoid_173_Mul_/model.8/m.0/cv2/act/Mul_168
      var       - node[59]
      name      - swish
      operation - swish
      input     - [20, 20, 256, 1]
      output    - [20, 20, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[59], VSI_NN_OP_SWISH, 1, 1, 168);
    node[59]->nn_param.swish.type = VSI_NN_SWISH;
    node[59]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Add_/model.8/m.0/Add_161
      var       - node[60]
      name      - Add_/model.8/m.0/Add
      operation - add
      input     - [20, 20, 256, 1]
                  [20, 20, 256, 1]
      output    - [20, 20, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[60], VSI_NN_OP_ADD, 2, 1, 161);

    /*-----------------------------------------
      lid       - Concat_/model.8/Concat_160
      var       - node[61]
      name      - Concat_/model.8/Concat
      operation - concat
      input     - [20, 20, 256, 1]
                  [20, 20, 256, 1]
                  [20, 20, 256, 1]
      output    - [20, 20, 768, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[61], VSI_NN_OP_CONCAT, 3, 1, 160);
    node[61]->nn_param.concat.axis = 2;

    /*-----------------------------------------
      lid       - Conv_/model.8/cv2/conv/Conv_152
      var       - node[62]
      name      - Conv_/model.8/cv2/conv/Conv
      operation - convolution
      input     - [20, 20, 768, 1]
      filter    - [1, 1, 768, 512]
      output    - [20, 20, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[62], VSI_NN_OP_CONV2D, 3, 1, 152);
    node[62]->nn_param.conv2d.ksize[0] = 1;
    node[62]->nn_param.conv2d.ksize[1] = 1;
    node[62]->nn_param.conv2d.weights = 512;
    node[62]->nn_param.conv2d.stride[0] = 1;
    node[62]->nn_param.conv2d.stride[1] = 1;
    node[62]->nn_param.conv2d.pad[0] = 0;
    node[62]->nn_param.conv2d.pad[1] = 0;
    node[62]->nn_param.conv2d.pad[2] = 0;
    node[62]->nn_param.conv2d.pad[3] = 0;
    node[62]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[62]->nn_param.conv2d.group = 1;
    node[62]->nn_param.conv2d.dilation[0] = 1;
    node[62]->nn_param.conv2d.dilation[1] = 1;
    node[62]->nn_param.conv2d.multiplier = 0;
    node[62]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[62]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[62]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/model.8/cv2/act/Sigmoid_153_Mul_/model.8/cv2/act/Mul_144
      var       - node[63]
      name      - swish
      operation - swish
      input     - [20, 20, 512, 1]
      output    - [20, 20, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[63], VSI_NN_OP_SWISH, 1, 1, 144);
    node[63]->nn_param.swish.type = VSI_NN_SWISH;
    node[63]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/model.9/cv1/conv/Conv_143
      var       - node[64]
      name      - Conv_/model.9/cv1/conv/Conv
      operation - convolution
      input     - [20, 20, 512, 1]
      filter    - [1, 1, 512, 256]
      output    - [20, 20, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[64], VSI_NN_OP_CONV2D, 3, 1, 143);
    node[64]->nn_param.conv2d.ksize[0] = 1;
    node[64]->nn_param.conv2d.ksize[1] = 1;
    node[64]->nn_param.conv2d.weights = 256;
    node[64]->nn_param.conv2d.stride[0] = 1;
    node[64]->nn_param.conv2d.stride[1] = 1;
    node[64]->nn_param.conv2d.pad[0] = 0;
    node[64]->nn_param.conv2d.pad[1] = 0;
    node[64]->nn_param.conv2d.pad[2] = 0;
    node[64]->nn_param.conv2d.pad[3] = 0;
    node[64]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[64]->nn_param.conv2d.group = 1;
    node[64]->nn_param.conv2d.dilation[0] = 1;
    node[64]->nn_param.conv2d.dilation[1] = 1;
    node[64]->nn_param.conv2d.multiplier = 0;
    node[64]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[64]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[64]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/model.9/cv1/act/Sigmoid_142_Mul_/model.9/cv1/act/Mul_141
      var       - node[65]
      name      - swish
      operation - swish
      input     - [20, 20, 256, 1]
      output    - [20, 20, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[65], VSI_NN_OP_SWISH, 1, 1, 141);
    node[65]->nn_param.swish.type = VSI_NN_SWISH;
    node[65]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - MaxPool_/model.9/m/MaxPool_136
      var       - node[66]
      name      - MaxPool_/model.9/m/MaxPool
      operation - pooling
      input     - [20, 20, 256, 1]
      output    - [20, 20, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[66], VSI_NN_OP_POOL, 1, 1, 136);
    node[66]->nn_param.pool.ksize[0] = 5;
    node[66]->nn_param.pool.ksize[1] = 5;
    node[66]->nn_param.pool.stride[0] = 1;
    node[66]->nn_param.pool.stride[1] = 1;
    node[66]->nn_param.pool.pad[0] = 2;
    node[66]->nn_param.pool.pad[1] = 2;
    node[66]->nn_param.pool.pad[2] = 2;
    node[66]->nn_param.pool.pad[3] = 2;
    node[66]->nn_param.pool.type = VX_CONVOLUTIONAL_NETWORK_POOLING_MAX;
    node[66]->nn_param.pool.round_type = VSI_NN_ROUND_FLOOR;
    node[66]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - MaxPool_/model.9/m_1/MaxPool_135
      var       - node[67]
      name      - MaxPool_/model.9/m_1/MaxPool
      operation - pooling
      input     - [20, 20, 256, 1]
      output    - [20, 20, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[67], VSI_NN_OP_POOL, 1, 1, 135);
    node[67]->nn_param.pool.ksize[0] = 5;
    node[67]->nn_param.pool.ksize[1] = 5;
    node[67]->nn_param.pool.stride[0] = 1;
    node[67]->nn_param.pool.stride[1] = 1;
    node[67]->nn_param.pool.pad[0] = 2;
    node[67]->nn_param.pool.pad[1] = 2;
    node[67]->nn_param.pool.pad[2] = 2;
    node[67]->nn_param.pool.pad[3] = 2;
    node[67]->nn_param.pool.type = VX_CONVOLUTIONAL_NETWORK_POOLING_MAX;
    node[67]->nn_param.pool.round_type = VSI_NN_ROUND_FLOOR;
    node[67]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - MaxPool_/model.9/m_2/MaxPool_134
      var       - node[68]
      name      - MaxPool_/model.9/m_2/MaxPool
      operation - pooling
      input     - [20, 20, 256, 1]
      output    - [20, 20, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[68], VSI_NN_OP_POOL, 1, 1, 134);
    node[68]->nn_param.pool.ksize[0] = 5;
    node[68]->nn_param.pool.ksize[1] = 5;
    node[68]->nn_param.pool.stride[0] = 1;
    node[68]->nn_param.pool.stride[1] = 1;
    node[68]->nn_param.pool.pad[0] = 2;
    node[68]->nn_param.pool.pad[1] = 2;
    node[68]->nn_param.pool.pad[2] = 2;
    node[68]->nn_param.pool.pad[3] = 2;
    node[68]->nn_param.pool.type = VX_CONVOLUTIONAL_NETWORK_POOLING_MAX;
    node[68]->nn_param.pool.round_type = VSI_NN_ROUND_FLOOR;
    node[68]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Concat_/model.9/Concat_133
      var       - node[69]
      name      - Concat_/model.9/Concat
      operation - concat
      input     - [20, 20, 256, 1]
                  [20, 20, 256, 1]
                  [20, 20, 256, 1]
                  [20, 20, 256, 1]
      output    - [20, 20, 1024, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[69], VSI_NN_OP_CONCAT, 4, 1, 133);
    node[69]->nn_param.concat.axis = 2;

    /*-----------------------------------------
      lid       - Conv_/model.9/cv2/conv/Conv_122
      var       - node[70]
      name      - Conv_/model.9/cv2/conv/Conv
      operation - convolution
      input     - [20, 20, 1024, 1]
      filter    - [1, 1, 1024, 512]
      output    - [20, 20, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[70], VSI_NN_OP_CONV2D, 3, 1, 122);
    node[70]->nn_param.conv2d.ksize[0] = 1;
    node[70]->nn_param.conv2d.ksize[1] = 1;
    node[70]->nn_param.conv2d.weights = 512;
    node[70]->nn_param.conv2d.stride[0] = 1;
    node[70]->nn_param.conv2d.stride[1] = 1;
    node[70]->nn_param.conv2d.pad[0] = 0;
    node[70]->nn_param.conv2d.pad[1] = 0;
    node[70]->nn_param.conv2d.pad[2] = 0;
    node[70]->nn_param.conv2d.pad[3] = 0;
    node[70]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[70]->nn_param.conv2d.group = 1;
    node[70]->nn_param.conv2d.dilation[0] = 1;
    node[70]->nn_param.conv2d.dilation[1] = 1;
    node[70]->nn_param.conv2d.multiplier = 0;
    node[70]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[70]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[70]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/model.9/cv2/act/Sigmoid_123_Mul_/model.9/cv2/act/Mul_115
      var       - node[71]
      name      - swish
      operation - swish
      input     - [20, 20, 512, 1]
      output    - [20, 20, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[71], VSI_NN_OP_SWISH, 1, 1, 115);
    node[71]->nn_param.swish.type = VSI_NN_SWISH;
    node[71]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Resize_/model.10/Resize_186
      var       - node[72]
      name      - Resize_/model.10/Resize
      operation - image_resize
      input     - [20, 20, 512, 1]
      output    - [40, 40, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[72], VSI_NN_OP_RESIZE, 1, 1, 186);
    node[72]->nn_param.resize.type = VSI_NN_INTERPOLATION_NEAREST_NEIGHBOR;
    node[72]->nn_param.resize.factor = 0.0;
    node[72]->nn_param.resize.align_corners = FALSE;
    node[72]->nn_param.resize.half_pixel_centers = FALSE;
    node[72]->nn_param.resize.size[0] = 40;
    node[72]->nn_param.resize.size[1] = 40;

    /*-----------------------------------------
      lid       - Concat_/model.11/Concat_180
      var       - node[73]
      name      - Concat_/model.11/Concat
      operation - concat
      input     - [40, 40, 512, 1]
                  [40, 40, 256, 1]
      output    - [40, 40, 768, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[73], VSI_NN_OP_CONCAT, 2, 1, 180);
    node[73]->nn_param.concat.axis = 2;

    /*-----------------------------------------
      lid       - Conv_/model.12/cv1/conv/Conv_174
      var       - node[74]
      name      - Conv_/model.12/cv1/conv/Conv
      operation - convolution
      input     - [40, 40, 768, 1]
      filter    - [1, 1, 768, 256]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[74], VSI_NN_OP_CONV2D, 3, 1, 174);
    node[74]->nn_param.conv2d.ksize[0] = 1;
    node[74]->nn_param.conv2d.ksize[1] = 1;
    node[74]->nn_param.conv2d.weights = 256;
    node[74]->nn_param.conv2d.stride[0] = 1;
    node[74]->nn_param.conv2d.stride[1] = 1;
    node[74]->nn_param.conv2d.pad[0] = 0;
    node[74]->nn_param.conv2d.pad[1] = 0;
    node[74]->nn_param.conv2d.pad[2] = 0;
    node[74]->nn_param.conv2d.pad[3] = 0;
    node[74]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[74]->nn_param.conv2d.group = 1;
    node[74]->nn_param.conv2d.dilation[0] = 1;
    node[74]->nn_param.conv2d.dilation[1] = 1;
    node[74]->nn_param.conv2d.multiplier = 0;
    node[74]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[74]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[74]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/model.12/cv1/act/Sigmoid_175_Mul_/model.12/cv1/act/Mul_169
      var       - node[75]
      name      - swish
      operation - swish
      input     - [40, 40, 256, 1]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[75], VSI_NN_OP_SWISH, 1, 1, 169);
    node[75]->nn_param.swish.type = VSI_NN_SWISH;
    node[75]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Split_/model.12/Split_163
      var       - node[76]
      name      - Split_/model.12/Split
      operation - split
      input     - [40, 40, 256, 1]
      output    - [40, 40, 128, 1]
                  [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[76], VSI_NN_OP_SPLIT, 1, 2, 163);
    node[76]->nn_param.split.axis = 2;
    node[76]->nn_param.split.slices = slices_5;
    node[76]->nn_param.split.slices_num = 2;

    /*-----------------------------------------
      lid       - Conv_/model.12/m.0/cv1/conv/Conv_162
      var       - node[77]
      name      - Conv_/model.12/m.0/cv1/conv/Conv
      operation - convolution
      input     - [40, 40, 128, 1]
      filter    - [3, 3, 128, 128]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[77], VSI_NN_OP_CONV2D, 3, 1, 162);
    node[77]->nn_param.conv2d.ksize[0] = 3;
    node[77]->nn_param.conv2d.ksize[1] = 3;
    node[77]->nn_param.conv2d.weights = 128;
    node[77]->nn_param.conv2d.stride[0] = 1;
    node[77]->nn_param.conv2d.stride[1] = 1;
    node[77]->nn_param.conv2d.pad[0] = 1;
    node[77]->nn_param.conv2d.pad[1] = 1;
    node[77]->nn_param.conv2d.pad[2] = 1;
    node[77]->nn_param.conv2d.pad[3] = 1;
    node[77]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[77]->nn_param.conv2d.group = 1;
    node[77]->nn_param.conv2d.dilation[0] = 1;
    node[77]->nn_param.conv2d.dilation[1] = 1;
    node[77]->nn_param.conv2d.multiplier = 0;
    node[77]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[77]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[77]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/model.12/m.0/cv1/act/Sigmoid_155_Mul_/model.12/m.0/cv1/act/Mul_154
      var       - node[78]
      name      - swish
      operation - swish
      input     - [40, 40, 128, 1]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[78], VSI_NN_OP_SWISH, 1, 1, 154);
    node[78]->nn_param.swish.type = VSI_NN_SWISH;
    node[78]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/model.12/m.0/cv2/conv/Conv_145
      var       - node[79]
      name      - Conv_/model.12/m.0/cv2/conv/Conv
      operation - convolution
      input     - [40, 40, 128, 1]
      filter    - [3, 3, 128, 128]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[79], VSI_NN_OP_CONV2D, 3, 1, 145);
    node[79]->nn_param.conv2d.ksize[0] = 3;
    node[79]->nn_param.conv2d.ksize[1] = 3;
    node[79]->nn_param.conv2d.weights = 128;
    node[79]->nn_param.conv2d.stride[0] = 1;
    node[79]->nn_param.conv2d.stride[1] = 1;
    node[79]->nn_param.conv2d.pad[0] = 1;
    node[79]->nn_param.conv2d.pad[1] = 1;
    node[79]->nn_param.conv2d.pad[2] = 1;
    node[79]->nn_param.conv2d.pad[3] = 1;
    node[79]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[79]->nn_param.conv2d.group = 1;
    node[79]->nn_param.conv2d.dilation[0] = 1;
    node[79]->nn_param.conv2d.dilation[1] = 1;
    node[79]->nn_param.conv2d.multiplier = 0;
    node[79]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[79]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[79]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/model.12/m.0/cv2/act/Sigmoid_146_Mul_/model.12/m.0/cv2/act/Mul_137
      var       - node[80]
      name      - swish
      operation - swish
      input     - [40, 40, 128, 1]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[80], VSI_NN_OP_SWISH, 1, 1, 137);
    node[80]->nn_param.swish.type = VSI_NN_SWISH;
    node[80]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Concat_/model.12/Concat_128
      var       - node[81]
      name      - Concat_/model.12/Concat
      operation - concat
      input     - [40, 40, 128, 1]
                  [40, 40, 128, 1]
                  [40, 40, 128, 1]
      output    - [40, 40, 384, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[81], VSI_NN_OP_CONCAT, 3, 1, 128);
    node[81]->nn_param.concat.axis = 2;

    /*-----------------------------------------
      lid       - Conv_/model.12/cv2/conv/Conv_126
      var       - node[82]
      name      - Conv_/model.12/cv2/conv/Conv
      operation - convolution
      input     - [40, 40, 384, 1]
      filter    - [1, 1, 384, 256]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[82], VSI_NN_OP_CONV2D, 3, 1, 126);
    node[82]->nn_param.conv2d.ksize[0] = 1;
    node[82]->nn_param.conv2d.ksize[1] = 1;
    node[82]->nn_param.conv2d.weights = 256;
    node[82]->nn_param.conv2d.stride[0] = 1;
    node[82]->nn_param.conv2d.stride[1] = 1;
    node[82]->nn_param.conv2d.pad[0] = 0;
    node[82]->nn_param.conv2d.pad[1] = 0;
    node[82]->nn_param.conv2d.pad[2] = 0;
    node[82]->nn_param.conv2d.pad[3] = 0;
    node[82]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[82]->nn_param.conv2d.group = 1;
    node[82]->nn_param.conv2d.dilation[0] = 1;
    node[82]->nn_param.conv2d.dilation[1] = 1;
    node[82]->nn_param.conv2d.multiplier = 0;
    node[82]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[82]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[82]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/model.12/cv2/act/Sigmoid_127_Mul_/model.12/cv2/act/Mul_117
      var       - node[83]
      name      - swish
      operation - swish
      input     - [40, 40, 256, 1]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[83], VSI_NN_OP_SWISH, 1, 1, 117);
    node[83]->nn_param.swish.type = VSI_NN_SWISH;
    node[83]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Resize_/model.13/Resize_118
      var       - node[84]
      name      - Resize_/model.13/Resize
      operation - image_resize
      input     - [40, 40, 256, 1]
      output    - [80, 80, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[84], VSI_NN_OP_RESIZE, 1, 1, 118);
    node[84]->nn_param.resize.type = VSI_NN_INTERPOLATION_NEAREST_NEIGHBOR;
    node[84]->nn_param.resize.factor = 0.0;
    node[84]->nn_param.resize.align_corners = FALSE;
    node[84]->nn_param.resize.half_pixel_centers = FALSE;
    node[84]->nn_param.resize.size[0] = 80;
    node[84]->nn_param.resize.size[1] = 80;

    /*-----------------------------------------
      lid       - Concat_/model.14/Concat_113
      var       - node[85]
      name      - Concat_/model.14/Concat
      operation - concat
      input     - [80, 80, 256, 1]
                  [80, 80, 128, 1]
      output    - [80, 80, 384, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[85], VSI_NN_OP_CONCAT, 2, 1, 113);
    node[85]->nn_param.concat.axis = 2;

    /*-----------------------------------------
      lid       - Conv_/model.15/cv1/conv/Conv_110
      var       - node[86]
      name      - Conv_/model.15/cv1/conv/Conv
      operation - convolution
      input     - [80, 80, 384, 1]
      filter    - [1, 1, 384, 128]
      output    - [80, 80, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[86], VSI_NN_OP_CONV2D, 3, 1, 110);
    node[86]->nn_param.conv2d.ksize[0] = 1;
    node[86]->nn_param.conv2d.ksize[1] = 1;
    node[86]->nn_param.conv2d.weights = 128;
    node[86]->nn_param.conv2d.stride[0] = 1;
    node[86]->nn_param.conv2d.stride[1] = 1;
    node[86]->nn_param.conv2d.pad[0] = 0;
    node[86]->nn_param.conv2d.pad[1] = 0;
    node[86]->nn_param.conv2d.pad[2] = 0;
    node[86]->nn_param.conv2d.pad[3] = 0;
    node[86]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[86]->nn_param.conv2d.group = 1;
    node[86]->nn_param.conv2d.dilation[0] = 1;
    node[86]->nn_param.conv2d.dilation[1] = 1;
    node[86]->nn_param.conv2d.multiplier = 0;
    node[86]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[86]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[86]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/model.15/cv1/act/Sigmoid_111_Mul_/model.15/cv1/act/Mul_99
      var       - node[87]
      name      - swish
      operation - swish
      input     - [80, 80, 128, 1]
      output    - [80, 80, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[87], VSI_NN_OP_SWISH, 1, 1, 99);
    node[87]->nn_param.swish.type = VSI_NN_SWISH;
    node[87]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Split_/model.15/Split_90
      var       - node[88]
      name      - Split_/model.15/Split
      operation - split
      input     - [80, 80, 128, 1]
      output    - [80, 80, 64, 1]
                  [80, 80, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[88], VSI_NN_OP_SPLIT, 1, 2, 90);
    node[88]->nn_param.split.axis = 2;
    node[88]->nn_param.split.slices = slices_6;
    node[88]->nn_param.split.slices_num = 2;

    /*-----------------------------------------
      lid       - Conv_/model.15/m.0/cv1/conv/Conv_89
      var       - node[89]
      name      - Conv_/model.15/m.0/cv1/conv/Conv
      operation - convolution
      input     - [80, 80, 64, 1]
      filter    - [3, 3, 64, 64]
      output    - [80, 80, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[89], VSI_NN_OP_CONV2D, 3, 1, 89);
    node[89]->nn_param.conv2d.ksize[0] = 3;
    node[89]->nn_param.conv2d.ksize[1] = 3;
    node[89]->nn_param.conv2d.weights = 64;
    node[89]->nn_param.conv2d.stride[0] = 1;
    node[89]->nn_param.conv2d.stride[1] = 1;
    node[89]->nn_param.conv2d.pad[0] = 1;
    node[89]->nn_param.conv2d.pad[1] = 1;
    node[89]->nn_param.conv2d.pad[2] = 1;
    node[89]->nn_param.conv2d.pad[3] = 1;
    node[89]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[89]->nn_param.conv2d.group = 1;
    node[89]->nn_param.conv2d.dilation[0] = 1;
    node[89]->nn_param.conv2d.dilation[1] = 1;
    node[89]->nn_param.conv2d.multiplier = 0;
    node[89]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[89]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[89]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/model.15/m.0/cv1/act/Sigmoid_79_Mul_/model.15/m.0/cv1/act/Mul_78
      var       - node[90]
      name      - swish
      operation - swish
      input     - [80, 80, 64, 1]
      output    - [80, 80, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[90], VSI_NN_OP_SWISH, 1, 1, 78);
    node[90]->nn_param.swish.type = VSI_NN_SWISH;
    node[90]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/model.15/m.0/cv2/conv/Conv_69
      var       - node[91]
      name      - Conv_/model.15/m.0/cv2/conv/Conv
      operation - convolution
      input     - [80, 80, 64, 1]
      filter    - [3, 3, 64, 64]
      output    - [80, 80, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[91], VSI_NN_OP_CONV2D, 3, 1, 69);
    node[91]->nn_param.conv2d.ksize[0] = 3;
    node[91]->nn_param.conv2d.ksize[1] = 3;
    node[91]->nn_param.conv2d.weights = 64;
    node[91]->nn_param.conv2d.stride[0] = 1;
    node[91]->nn_param.conv2d.stride[1] = 1;
    node[91]->nn_param.conv2d.pad[0] = 1;
    node[91]->nn_param.conv2d.pad[1] = 1;
    node[91]->nn_param.conv2d.pad[2] = 1;
    node[91]->nn_param.conv2d.pad[3] = 1;
    node[91]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[91]->nn_param.conv2d.group = 1;
    node[91]->nn_param.conv2d.dilation[0] = 1;
    node[91]->nn_param.conv2d.dilation[1] = 1;
    node[91]->nn_param.conv2d.multiplier = 0;
    node[91]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[91]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[91]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/model.15/m.0/cv2/act/Sigmoid_70_Mul_/model.15/m.0/cv2/act/Mul_61
      var       - node[92]
      name      - swish
      operation - swish
      input     - [80, 80, 64, 1]
      output    - [80, 80, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[92], VSI_NN_OP_SWISH, 1, 1, 61);
    node[92]->nn_param.swish.type = VSI_NN_SWISH;
    node[92]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Concat_/model.15/Concat_60
      var       - node[93]
      name      - Concat_/model.15/Concat
      operation - concat
      input     - [80, 80, 64, 1]
                  [80, 80, 64, 1]
                  [80, 80, 64, 1]
      output    - [80, 80, 192, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[93], VSI_NN_OP_CONCAT, 3, 1, 60);
    node[93]->nn_param.concat.axis = 2;

    /*-----------------------------------------
      lid       - Conv_/model.15/cv2/conv/Conv_51
      var       - node[94]
      name      - Conv_/model.15/cv2/conv/Conv
      operation - convolution
      input     - [80, 80, 192, 1]
      filter    - [1, 1, 192, 128]
      output    - [80, 80, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[94], VSI_NN_OP_CONV2D, 3, 1, 51);
    node[94]->nn_param.conv2d.ksize[0] = 1;
    node[94]->nn_param.conv2d.ksize[1] = 1;
    node[94]->nn_param.conv2d.weights = 128;
    node[94]->nn_param.conv2d.stride[0] = 1;
    node[94]->nn_param.conv2d.stride[1] = 1;
    node[94]->nn_param.conv2d.pad[0] = 0;
    node[94]->nn_param.conv2d.pad[1] = 0;
    node[94]->nn_param.conv2d.pad[2] = 0;
    node[94]->nn_param.conv2d.pad[3] = 0;
    node[94]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[94]->nn_param.conv2d.group = 1;
    node[94]->nn_param.conv2d.dilation[0] = 1;
    node[94]->nn_param.conv2d.dilation[1] = 1;
    node[94]->nn_param.conv2d.multiplier = 0;
    node[94]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[94]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[94]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/model.15/cv2/act/Sigmoid_52_Mul_/model.15/cv2/act/Mul_43
      var       - node[95]
      name      - swish
      operation - swish
      input     - [80, 80, 128, 1]
      output    - [80, 80, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[95], VSI_NN_OP_SWISH, 1, 1, 43);
    node[95]->nn_param.swish.type = VSI_NN_SWISH;
    node[95]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/model.22/cv3.0/cv3.0.0/conv/Conv_42
      var       - node[96]
      name      - Conv_/model.22/cv3.0/cv3.0.0/conv/Conv
      operation - convolution
      input     - [80, 80, 128, 1]
      filter    - [3, 3, 128, 128]
      output    - [80, 80, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[96], VSI_NN_OP_CONV2D, 3, 1, 42);
    node[96]->nn_param.conv2d.ksize[0] = 3;
    node[96]->nn_param.conv2d.ksize[1] = 3;
    node[96]->nn_param.conv2d.weights = 128;
    node[96]->nn_param.conv2d.stride[0] = 1;
    node[96]->nn_param.conv2d.stride[1] = 1;
    node[96]->nn_param.conv2d.pad[0] = 1;
    node[96]->nn_param.conv2d.pad[1] = 1;
    node[96]->nn_param.conv2d.pad[2] = 1;
    node[96]->nn_param.conv2d.pad[3] = 1;
    node[96]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[96]->nn_param.conv2d.group = 1;
    node[96]->nn_param.conv2d.dilation[0] = 1;
    node[96]->nn_param.conv2d.dilation[1] = 1;
    node[96]->nn_param.conv2d.multiplier = 0;
    node[96]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[96]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[96]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Conv_/model.22/cv2.0/cv2.0.0/conv/Conv_112
      var       - node[97]
      name      - Conv_/model.22/cv2.0/cv2.0.0/conv/Conv
      operation - convolution
      input     - [80, 80, 128, 1]
      filter    - [3, 3, 128, 64]
      output    - [80, 80, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[97], VSI_NN_OP_CONV2D, 3, 1, 112);
    node[97]->nn_param.conv2d.ksize[0] = 3;
    node[97]->nn_param.conv2d.ksize[1] = 3;
    node[97]->nn_param.conv2d.weights = 64;
    node[97]->nn_param.conv2d.stride[0] = 1;
    node[97]->nn_param.conv2d.stride[1] = 1;
    node[97]->nn_param.conv2d.pad[0] = 1;
    node[97]->nn_param.conv2d.pad[1] = 1;
    node[97]->nn_param.conv2d.pad[2] = 1;
    node[97]->nn_param.conv2d.pad[3] = 1;
    node[97]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[97]->nn_param.conv2d.group = 1;
    node[97]->nn_param.conv2d.dilation[0] = 1;
    node[97]->nn_param.conv2d.dilation[1] = 1;
    node[97]->nn_param.conv2d.multiplier = 0;
    node[97]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[97]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[97]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Conv_/model.16/conv/Conv_124
      var       - node[98]
      name      - Conv_/model.16/conv/Conv
      operation - convolution
      input     - [80, 80, 128, 1]
      filter    - [3, 3, 128, 128]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[98], VSI_NN_OP_CONV2D, 3, 1, 124);
    node[98]->nn_param.conv2d.ksize[0] = 3;
    node[98]->nn_param.conv2d.ksize[1] = 3;
    node[98]->nn_param.conv2d.weights = 128;
    node[98]->nn_param.conv2d.stride[0] = 2;
    node[98]->nn_param.conv2d.stride[1] = 2;
    node[98]->nn_param.conv2d.pad[0] = 1;
    node[98]->nn_param.conv2d.pad[1] = 1;
    node[98]->nn_param.conv2d.pad[2] = 1;
    node[98]->nn_param.conv2d.pad[3] = 1;
    node[98]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[98]->nn_param.conv2d.group = 1;
    node[98]->nn_param.conv2d.dilation[0] = 1;
    node[98]->nn_param.conv2d.dilation[1] = 1;
    node[98]->nn_param.conv2d.multiplier = 0;
    node[98]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[98]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[98]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/model.22/cv3.0/cv3.0.0/act/Sigmoid_34_Mul_/model.22/cv3.0/cv3.0.0/act/Mul_33
      var       - node[99]
      name      - swish
      operation - swish
      input     - [80, 80, 128, 1]
      output    - [80, 80, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[99], VSI_NN_OP_SWISH, 1, 1, 33);
    node[99]->nn_param.swish.type = VSI_NN_SWISH;
    node[99]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Sigmoid_/model.22/cv2.0/cv2.0.0/act/Sigmoid_101_Mul_/model.22/cv2.0/cv2.0.0/act/Mul_100
      var       - node[100]
      name      - swish
      operation - swish
      input     - [80, 80, 64, 1]
      output    - [80, 80, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[100], VSI_NN_OP_SWISH, 1, 1, 100);
    node[100]->nn_param.swish.type = VSI_NN_SWISH;
    node[100]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Sigmoid_/model.16/act/Sigmoid_125_Mul_/model.16/act/Mul_116
      var       - node[101]
      name      - swish
      operation - swish
      input     - [40, 40, 128, 1]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[101], VSI_NN_OP_SWISH, 1, 1, 116);
    node[101]->nn_param.swish.type = VSI_NN_SWISH;
    node[101]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/model.22/cv3.0/cv3.0.1/conv/Conv_24
      var       - node[102]
      name      - Conv_/model.22/cv3.0/cv3.0.1/conv/Conv
      operation - convolution
      input     - [80, 80, 128, 1]
      filter    - [3, 3, 128, 128]
      output    - [80, 80, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[102], VSI_NN_OP_CONV2D, 3, 1, 24);
    node[102]->nn_param.conv2d.ksize[0] = 3;
    node[102]->nn_param.conv2d.ksize[1] = 3;
    node[102]->nn_param.conv2d.weights = 128;
    node[102]->nn_param.conv2d.stride[0] = 1;
    node[102]->nn_param.conv2d.stride[1] = 1;
    node[102]->nn_param.conv2d.pad[0] = 1;
    node[102]->nn_param.conv2d.pad[1] = 1;
    node[102]->nn_param.conv2d.pad[2] = 1;
    node[102]->nn_param.conv2d.pad[3] = 1;
    node[102]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[102]->nn_param.conv2d.group = 1;
    node[102]->nn_param.conv2d.dilation[0] = 1;
    node[102]->nn_param.conv2d.dilation[1] = 1;
    node[102]->nn_param.conv2d.multiplier = 0;
    node[102]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[102]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[102]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Conv_/model.22/cv2.0/cv2.0.1/conv/Conv_91
      var       - node[103]
      name      - Conv_/model.22/cv2.0/cv2.0.1/conv/Conv
      operation - convolution
      input     - [80, 80, 64, 1]
      filter    - [3, 3, 64, 64]
      output    - [80, 80, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[103], VSI_NN_OP_CONV2D, 3, 1, 91);
    node[103]->nn_param.conv2d.ksize[0] = 3;
    node[103]->nn_param.conv2d.ksize[1] = 3;
    node[103]->nn_param.conv2d.weights = 64;
    node[103]->nn_param.conv2d.stride[0] = 1;
    node[103]->nn_param.conv2d.stride[1] = 1;
    node[103]->nn_param.conv2d.pad[0] = 1;
    node[103]->nn_param.conv2d.pad[1] = 1;
    node[103]->nn_param.conv2d.pad[2] = 1;
    node[103]->nn_param.conv2d.pad[3] = 1;
    node[103]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[103]->nn_param.conv2d.group = 1;
    node[103]->nn_param.conv2d.dilation[0] = 1;
    node[103]->nn_param.conv2d.dilation[1] = 1;
    node[103]->nn_param.conv2d.multiplier = 0;
    node[103]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[103]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[103]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Concat_/model.17/Concat_109
      var       - node[104]
      name      - Concat_/model.17/Concat
      operation - concat
      input     - [40, 40, 128, 1]
                  [40, 40, 256, 1]
      output    - [40, 40, 384, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[104], VSI_NN_OP_CONCAT, 2, 1, 109);
    node[104]->nn_param.concat.axis = 2;

    /*-----------------------------------------
      lid       - Sigmoid_/model.22/cv3.0/cv3.0.1/act/Sigmoid_25_Mul_/model.22/cv3.0/cv3.0.1/act/Mul_16
      var       - node[105]
      name      - swish
      operation - swish
      input     - [80, 80, 128, 1]
      output    - [80, 80, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[105], VSI_NN_OP_SWISH, 1, 1, 16);
    node[105]->nn_param.swish.type = VSI_NN_SWISH;
    node[105]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Sigmoid_/model.22/cv2.0/cv2.0.1/act/Sigmoid_92_Mul_/model.22/cv2.0/cv2.0.1/act/Mul_80
      var       - node[106]
      name      - swish
      operation - swish
      input     - [80, 80, 64, 1]
      output    - [80, 80, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[106], VSI_NN_OP_SWISH, 1, 1, 80);
    node[106]->nn_param.swish.type = VSI_NN_SWISH;
    node[106]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/model.18/cv1/conv/Conv_106
      var       - node[107]
      name      - Conv_/model.18/cv1/conv/Conv
      operation - convolution
      input     - [40, 40, 384, 1]
      filter    - [1, 1, 384, 256]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[107], VSI_NN_OP_CONV2D, 3, 1, 106);
    node[107]->nn_param.conv2d.ksize[0] = 1;
    node[107]->nn_param.conv2d.ksize[1] = 1;
    node[107]->nn_param.conv2d.weights = 256;
    node[107]->nn_param.conv2d.stride[0] = 1;
    node[107]->nn_param.conv2d.stride[1] = 1;
    node[107]->nn_param.conv2d.pad[0] = 0;
    node[107]->nn_param.conv2d.pad[1] = 0;
    node[107]->nn_param.conv2d.pad[2] = 0;
    node[107]->nn_param.conv2d.pad[3] = 0;
    node[107]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[107]->nn_param.conv2d.group = 1;
    node[107]->nn_param.conv2d.dilation[0] = 1;
    node[107]->nn_param.conv2d.dilation[1] = 1;
    node[107]->nn_param.conv2d.multiplier = 0;
    node[107]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[107]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[107]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Conv_/model.22/cv3.0/cv3.0.2/Conv_10
      var       - node[108]
      name      - Conv_/model.22/cv3.0/cv3.0.2/Conv
      operation - convolution
      input     - [80, 80, 128, 1]
      filter    - [1, 1, 128, 80]
      output    - [80, 80, 80, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[108], VSI_NN_OP_CONV2D, 3, 1, 10);
    node[108]->nn_param.conv2d.ksize[0] = 1;
    node[108]->nn_param.conv2d.ksize[1] = 1;
    node[108]->nn_param.conv2d.weights = 80;
    node[108]->nn_param.conv2d.stride[0] = 1;
    node[108]->nn_param.conv2d.stride[1] = 1;
    node[108]->nn_param.conv2d.pad[0] = 0;
    node[108]->nn_param.conv2d.pad[1] = 0;
    node[108]->nn_param.conv2d.pad[2] = 0;
    node[108]->nn_param.conv2d.pad[3] = 0;
    node[108]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[108]->nn_param.conv2d.group = 1;
    node[108]->nn_param.conv2d.dilation[0] = 1;
    node[108]->nn_param.conv2d.dilation[1] = 1;
    node[108]->nn_param.conv2d.multiplier = 0;
    node[108]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[108]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[108]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Conv_/model.22/cv2.0/cv2.0.2/Conv_71
      var       - node[109]
      name      - Conv_/model.22/cv2.0/cv2.0.2/Conv
      operation - convolution
      input     - [80, 80, 64, 1]
      filter    - [1, 1, 64, 64]
      output    - [80, 80, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[109], VSI_NN_OP_CONV2D, 3, 1, 71);
    node[109]->nn_param.conv2d.ksize[0] = 1;
    node[109]->nn_param.conv2d.ksize[1] = 1;
    node[109]->nn_param.conv2d.weights = 64;
    node[109]->nn_param.conv2d.stride[0] = 1;
    node[109]->nn_param.conv2d.stride[1] = 1;
    node[109]->nn_param.conv2d.pad[0] = 0;
    node[109]->nn_param.conv2d.pad[1] = 0;
    node[109]->nn_param.conv2d.pad[2] = 0;
    node[109]->nn_param.conv2d.pad[3] = 0;
    node[109]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[109]->nn_param.conv2d.group = 1;
    node[109]->nn_param.conv2d.dilation[0] = 1;
    node[109]->nn_param.conv2d.dilation[1] = 1;
    node[109]->nn_param.conv2d.multiplier = 0;
    node[109]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[109]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[109]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/model.18/cv1/act/Sigmoid_107_Mul_/model.18/cv1/act/Mul_96
      var       - node[110]
      name      - swish
      operation - swish
      input     - [40, 40, 256, 1]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[110], VSI_NN_OP_SWISH, 1, 1, 96);
    node[110]->nn_param.swish.type = VSI_NN_SWISH;
    node[110]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Reshape_/model.22/dfl/Reshape_53
      var       - node[111]
      name      - Reshape_/model.22/dfl/Reshape
      operation - reshape
      input     - [80, 80, 64, 1]
      output    - [6400, 16, 4, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[111], VSI_NN_OP_RESHAPE2, 1, 1, 53);
    node[111]->nn_param.reshape2.size = shape_1;
    node[111]->nn_param.reshape2.dim_num = 4;

    /*-----------------------------------------
      lid       - Split_/model.18/Split_86
      var       - node[112]
      name      - Split_/model.18/Split
      operation - split
      input     - [40, 40, 256, 1]
      output    - [40, 40, 128, 1]
                  [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[112], VSI_NN_OP_SPLIT, 1, 2, 86);
    node[112]->nn_param.split.axis = 2;
    node[112]->nn_param.split.slices = slices_7;
    node[112]->nn_param.split.slices_num = 2;

    /*-----------------------------------------
      lid       - Softmax_/model.22/dfl/Softmax_35_acuity_mark_perm_52
      var       - node[113]
      name      - Softmax_/model.22/dfl/Softmax_35_acuity_mark_perm
      operation - permute
      input     - [6400, 16, 4, 1]
      output    - [6400, 4, 16, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[113], VSI_NN_OP_PERMUTE, 1, 1, 52);
    node[113]->nn_param.permute.perm = perm_1;
    node[113]->nn_param.permute.dim_num = 4;

    /*-----------------------------------------
      lid       - Conv_/model.18/m.0/cv1/conv/Conv_85
      var       - node[114]
      name      - Conv_/model.18/m.0/cv1/conv/Conv
      operation - convolution
      input     - [40, 40, 128, 1]
      filter    - [3, 3, 128, 128]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[114], VSI_NN_OP_CONV2D, 3, 1, 85);
    node[114]->nn_param.conv2d.ksize[0] = 3;
    node[114]->nn_param.conv2d.ksize[1] = 3;
    node[114]->nn_param.conv2d.weights = 128;
    node[114]->nn_param.conv2d.stride[0] = 1;
    node[114]->nn_param.conv2d.stride[1] = 1;
    node[114]->nn_param.conv2d.pad[0] = 1;
    node[114]->nn_param.conv2d.pad[1] = 1;
    node[114]->nn_param.conv2d.pad[2] = 1;
    node[114]->nn_param.conv2d.pad[3] = 1;
    node[114]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[114]->nn_param.conv2d.group = 1;
    node[114]->nn_param.conv2d.dilation[0] = 1;
    node[114]->nn_param.conv2d.dilation[1] = 1;
    node[114]->nn_param.conv2d.multiplier = 0;
    node[114]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[114]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[114]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Softmax_/model.22/dfl/Softmax_35
      var       - node[115]
      name      - Softmax_/model.22/dfl/Softmax
      operation - softmax
      input     - [6400, 4, 16, 1]
      output    - [6400, 4, 16, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[115], VSI_NN_OP_SOFTMAX, 1, 1, 35);
    node[115]->nn_param.softmax.beta = 1.0;
    node[115]->nn_param.softmax.axis = 2;

    /*-----------------------------------------
      lid       - Sigmoid_/model.18/m.0/cv1/act/Sigmoid_76_Mul_/model.18/m.0/cv1/act/Mul_75
      var       - node[116]
      name      - swish
      operation - swish
      input     - [40, 40, 128, 1]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[116], VSI_NN_OP_SWISH, 1, 1, 75);
    node[116]->nn_param.swish.type = VSI_NN_SWISH;
    node[116]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/model.22/dfl/conv/Conv_26
      var       - node[117]
      name      - Conv_/model.22/dfl/conv/Conv
      operation - convolution
      input     - [6400, 4, 16, 1]
      filter    - [1, 1, 16, 1]
      output    - [6400, 4, 1, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[117], VSI_NN_OP_CONV2D, 3, 1, 26);
    node[117]->nn_param.conv2d.ksize[0] = 1;
    node[117]->nn_param.conv2d.ksize[1] = 1;
    node[117]->nn_param.conv2d.weights = 1;
    node[117]->nn_param.conv2d.stride[0] = 1;
    node[117]->nn_param.conv2d.stride[1] = 1;
    node[117]->nn_param.conv2d.pad[0] = 0;
    node[117]->nn_param.conv2d.pad[1] = 0;
    node[117]->nn_param.conv2d.pad[2] = 0;
    node[117]->nn_param.conv2d.pad[3] = 0;
    node[117]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[117]->nn_param.conv2d.group = 1;
    node[117]->nn_param.conv2d.dilation[0] = 1;
    node[117]->nn_param.conv2d.dilation[1] = 1;
    node[117]->nn_param.conv2d.multiplier = 0;
    node[117]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[117]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[117]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Conv_/model.18/m.0/cv2/conv/Conv_66
      var       - node[118]
      name      - Conv_/model.18/m.0/cv2/conv/Conv
      operation - convolution
      input     - [40, 40, 128, 1]
      filter    - [3, 3, 128, 128]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[118], VSI_NN_OP_CONV2D, 3, 1, 66);
    node[118]->nn_param.conv2d.ksize[0] = 3;
    node[118]->nn_param.conv2d.ksize[1] = 3;
    node[118]->nn_param.conv2d.weights = 128;
    node[118]->nn_param.conv2d.stride[0] = 1;
    node[118]->nn_param.conv2d.stride[1] = 1;
    node[118]->nn_param.conv2d.pad[0] = 1;
    node[118]->nn_param.conv2d.pad[1] = 1;
    node[118]->nn_param.conv2d.pad[2] = 1;
    node[118]->nn_param.conv2d.pad[3] = 1;
    node[118]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[118]->nn_param.conv2d.group = 1;
    node[118]->nn_param.conv2d.dilation[0] = 1;
    node[118]->nn_param.conv2d.dilation[1] = 1;
    node[118]->nn_param.conv2d.multiplier = 0;
    node[118]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[118]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[118]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Reshape_/model.22/Reshape_1_11
      var       - node[119]
      name      - Reshape_/model.22/Reshape_1
      operation - reshape
      input     - [6400, 4, 1, 1]
      output    - [80, 80, 4, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[119], VSI_NN_OP_RESHAPE2, 1, 1, 11);
    node[119]->nn_param.reshape2.size = shape_2;
    node[119]->nn_param.reshape2.dim_num = 4;

    /*-----------------------------------------
      lid       - Sigmoid_/model.18/m.0/cv2/act/Sigmoid_67_Mul_/model.18/m.0/cv2/act/Mul_58
      var       - node[120]
      name      - swish
      operation - swish
      input     - [40, 40, 128, 1]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[120], VSI_NN_OP_SWISH, 1, 1, 58);
    node[120]->nn_param.swish.type = VSI_NN_SWISH;
    node[120]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Concat_/model.18/Concat_57
      var       - node[121]
      name      - Concat_/model.18/Concat
      operation - concat
      input     - [40, 40, 128, 1]
                  [40, 40, 128, 1]
                  [40, 40, 128, 1]
      output    - [40, 40, 384, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[121], VSI_NN_OP_CONCAT, 3, 1, 57);
    node[121]->nn_param.concat.axis = 2;

    /*-----------------------------------------
      lid       - Conv_/model.18/cv2/conv/Conv_48
      var       - node[122]
      name      - Conv_/model.18/cv2/conv/Conv
      operation - convolution
      input     - [40, 40, 384, 1]
      filter    - [1, 1, 384, 256]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[122], VSI_NN_OP_CONV2D, 3, 1, 48);
    node[122]->nn_param.conv2d.ksize[0] = 1;
    node[122]->nn_param.conv2d.ksize[1] = 1;
    node[122]->nn_param.conv2d.weights = 256;
    node[122]->nn_param.conv2d.stride[0] = 1;
    node[122]->nn_param.conv2d.stride[1] = 1;
    node[122]->nn_param.conv2d.pad[0] = 0;
    node[122]->nn_param.conv2d.pad[1] = 0;
    node[122]->nn_param.conv2d.pad[2] = 0;
    node[122]->nn_param.conv2d.pad[3] = 0;
    node[122]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[122]->nn_param.conv2d.group = 1;
    node[122]->nn_param.conv2d.dilation[0] = 1;
    node[122]->nn_param.conv2d.dilation[1] = 1;
    node[122]->nn_param.conv2d.multiplier = 0;
    node[122]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[122]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[122]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/model.18/cv2/act/Sigmoid_49_Mul_/model.18/cv2/act/Mul_40
      var       - node[123]
      name      - swish
      operation - swish
      input     - [40, 40, 256, 1]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[123], VSI_NN_OP_SWISH, 1, 1, 40);
    node[123]->nn_param.swish.type = VSI_NN_SWISH;
    node[123]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/model.22/cv3.1/cv3.1.0/conv/Conv_39
      var       - node[124]
      name      - Conv_/model.22/cv3.1/cv3.1.0/conv/Conv
      operation - convolution
      input     - [40, 40, 256, 1]
      filter    - [3, 3, 256, 128]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[124], VSI_NN_OP_CONV2D, 3, 1, 39);
    node[124]->nn_param.conv2d.ksize[0] = 3;
    node[124]->nn_param.conv2d.ksize[1] = 3;
    node[124]->nn_param.conv2d.weights = 128;
    node[124]->nn_param.conv2d.stride[0] = 1;
    node[124]->nn_param.conv2d.stride[1] = 1;
    node[124]->nn_param.conv2d.pad[0] = 1;
    node[124]->nn_param.conv2d.pad[1] = 1;
    node[124]->nn_param.conv2d.pad[2] = 1;
    node[124]->nn_param.conv2d.pad[3] = 1;
    node[124]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[124]->nn_param.conv2d.group = 1;
    node[124]->nn_param.conv2d.dilation[0] = 1;
    node[124]->nn_param.conv2d.dilation[1] = 1;
    node[124]->nn_param.conv2d.multiplier = 0;
    node[124]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[124]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[124]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Conv_/model.22/cv2.1/cv2.1.0/conv/Conv_108
      var       - node[125]
      name      - Conv_/model.22/cv2.1/cv2.1.0/conv/Conv
      operation - convolution
      input     - [40, 40, 256, 1]
      filter    - [3, 3, 256, 64]
      output    - [40, 40, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[125], VSI_NN_OP_CONV2D, 3, 1, 108);
    node[125]->nn_param.conv2d.ksize[0] = 3;
    node[125]->nn_param.conv2d.ksize[1] = 3;
    node[125]->nn_param.conv2d.weights = 64;
    node[125]->nn_param.conv2d.stride[0] = 1;
    node[125]->nn_param.conv2d.stride[1] = 1;
    node[125]->nn_param.conv2d.pad[0] = 1;
    node[125]->nn_param.conv2d.pad[1] = 1;
    node[125]->nn_param.conv2d.pad[2] = 1;
    node[125]->nn_param.conv2d.pad[3] = 1;
    node[125]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[125]->nn_param.conv2d.group = 1;
    node[125]->nn_param.conv2d.dilation[0] = 1;
    node[125]->nn_param.conv2d.dilation[1] = 1;
    node[125]->nn_param.conv2d.multiplier = 0;
    node[125]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[125]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[125]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Conv_/model.19/conv/Conv_120
      var       - node[126]
      name      - Conv_/model.19/conv/Conv
      operation - convolution
      input     - [40, 40, 256, 1]
      filter    - [3, 3, 256, 256]
      output    - [20, 20, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[126], VSI_NN_OP_CONV2D, 3, 1, 120);
    node[126]->nn_param.conv2d.ksize[0] = 3;
    node[126]->nn_param.conv2d.ksize[1] = 3;
    node[126]->nn_param.conv2d.weights = 256;
    node[126]->nn_param.conv2d.stride[0] = 2;
    node[126]->nn_param.conv2d.stride[1] = 2;
    node[126]->nn_param.conv2d.pad[0] = 1;
    node[126]->nn_param.conv2d.pad[1] = 1;
    node[126]->nn_param.conv2d.pad[2] = 1;
    node[126]->nn_param.conv2d.pad[3] = 1;
    node[126]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[126]->nn_param.conv2d.group = 1;
    node[126]->nn_param.conv2d.dilation[0] = 1;
    node[126]->nn_param.conv2d.dilation[1] = 1;
    node[126]->nn_param.conv2d.multiplier = 0;
    node[126]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[126]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[126]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/model.22/cv3.1/cv3.1.0/act/Sigmoid_31_Mul_/model.22/cv3.1/cv3.1.0/act/Mul_30
      var       - node[127]
      name      - swish
      operation - swish
      input     - [40, 40, 128, 1]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[127], VSI_NN_OP_SWISH, 1, 1, 30);
    node[127]->nn_param.swish.type = VSI_NN_SWISH;
    node[127]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Sigmoid_/model.22/cv2.1/cv2.1.0/act/Sigmoid_98_Mul_/model.22/cv2.1/cv2.1.0/act/Mul_97
      var       - node[128]
      name      - swish
      operation - swish
      input     - [40, 40, 64, 1]
      output    - [40, 40, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[128], VSI_NN_OP_SWISH, 1, 1, 97);
    node[128]->nn_param.swish.type = VSI_NN_SWISH;
    node[128]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Sigmoid_/model.19/act/Sigmoid_121_Mul_/model.19/act/Mul_114
      var       - node[129]
      name      - swish
      operation - swish
      input     - [20, 20, 256, 1]
      output    - [20, 20, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[129], VSI_NN_OP_SWISH, 1, 1, 114);
    node[129]->nn_param.swish.type = VSI_NN_SWISH;
    node[129]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/model.22/cv3.1/cv3.1.1/conv/Conv_21
      var       - node[130]
      name      - Conv_/model.22/cv3.1/cv3.1.1/conv/Conv
      operation - convolution
      input     - [40, 40, 128, 1]
      filter    - [3, 3, 128, 128]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[130], VSI_NN_OP_CONV2D, 3, 1, 21);
    node[130]->nn_param.conv2d.ksize[0] = 3;
    node[130]->nn_param.conv2d.ksize[1] = 3;
    node[130]->nn_param.conv2d.weights = 128;
    node[130]->nn_param.conv2d.stride[0] = 1;
    node[130]->nn_param.conv2d.stride[1] = 1;
    node[130]->nn_param.conv2d.pad[0] = 1;
    node[130]->nn_param.conv2d.pad[1] = 1;
    node[130]->nn_param.conv2d.pad[2] = 1;
    node[130]->nn_param.conv2d.pad[3] = 1;
    node[130]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[130]->nn_param.conv2d.group = 1;
    node[130]->nn_param.conv2d.dilation[0] = 1;
    node[130]->nn_param.conv2d.dilation[1] = 1;
    node[130]->nn_param.conv2d.multiplier = 0;
    node[130]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[130]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[130]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Conv_/model.22/cv2.1/cv2.1.1/conv/Conv_87
      var       - node[131]
      name      - Conv_/model.22/cv2.1/cv2.1.1/conv/Conv
      operation - convolution
      input     - [40, 40, 64, 1]
      filter    - [3, 3, 64, 64]
      output    - [40, 40, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[131], VSI_NN_OP_CONV2D, 3, 1, 87);
    node[131]->nn_param.conv2d.ksize[0] = 3;
    node[131]->nn_param.conv2d.ksize[1] = 3;
    node[131]->nn_param.conv2d.weights = 64;
    node[131]->nn_param.conv2d.stride[0] = 1;
    node[131]->nn_param.conv2d.stride[1] = 1;
    node[131]->nn_param.conv2d.pad[0] = 1;
    node[131]->nn_param.conv2d.pad[1] = 1;
    node[131]->nn_param.conv2d.pad[2] = 1;
    node[131]->nn_param.conv2d.pad[3] = 1;
    node[131]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[131]->nn_param.conv2d.group = 1;
    node[131]->nn_param.conv2d.dilation[0] = 1;
    node[131]->nn_param.conv2d.dilation[1] = 1;
    node[131]->nn_param.conv2d.multiplier = 0;
    node[131]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[131]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[131]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Concat_/model.20/Concat_105
      var       - node[132]
      name      - Concat_/model.20/Concat
      operation - concat
      input     - [20, 20, 256, 1]
                  [20, 20, 512, 1]
      output    - [20, 20, 768, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[132], VSI_NN_OP_CONCAT, 2, 1, 105);
    node[132]->nn_param.concat.axis = 2;

    /*-----------------------------------------
      lid       - Sigmoid_/model.22/cv3.1/cv3.1.1/act/Sigmoid_22_Mul_/model.22/cv3.1/cv3.1.1/act/Mul_14
      var       - node[133]
      name      - swish
      operation - swish
      input     - [40, 40, 128, 1]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[133], VSI_NN_OP_SWISH, 1, 1, 14);
    node[133]->nn_param.swish.type = VSI_NN_SWISH;
    node[133]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Sigmoid_/model.22/cv2.1/cv2.1.1/act/Sigmoid_88_Mul_/model.22/cv2.1/cv2.1.1/act/Mul_77
      var       - node[134]
      name      - swish
      operation - swish
      input     - [40, 40, 64, 1]
      output    - [40, 40, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[134], VSI_NN_OP_SWISH, 1, 1, 77);
    node[134]->nn_param.swish.type = VSI_NN_SWISH;
    node[134]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/model.21/cv1/conv/Conv_102
      var       - node[135]
      name      - Conv_/model.21/cv1/conv/Conv
      operation - convolution
      input     - [20, 20, 768, 1]
      filter    - [1, 1, 768, 512]
      output    - [20, 20, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[135], VSI_NN_OP_CONV2D, 3, 1, 102);
    node[135]->nn_param.conv2d.ksize[0] = 1;
    node[135]->nn_param.conv2d.ksize[1] = 1;
    node[135]->nn_param.conv2d.weights = 512;
    node[135]->nn_param.conv2d.stride[0] = 1;
    node[135]->nn_param.conv2d.stride[1] = 1;
    node[135]->nn_param.conv2d.pad[0] = 0;
    node[135]->nn_param.conv2d.pad[1] = 0;
    node[135]->nn_param.conv2d.pad[2] = 0;
    node[135]->nn_param.conv2d.pad[3] = 0;
    node[135]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[135]->nn_param.conv2d.group = 1;
    node[135]->nn_param.conv2d.dilation[0] = 1;
    node[135]->nn_param.conv2d.dilation[1] = 1;
    node[135]->nn_param.conv2d.multiplier = 0;
    node[135]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[135]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[135]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Conv_/model.22/cv3.1/cv3.1.2/Conv_8
      var       - node[136]
      name      - Conv_/model.22/cv3.1/cv3.1.2/Conv
      operation - convolution
      input     - [40, 40, 128, 1]
      filter    - [1, 1, 128, 80]
      output    - [40, 40, 80, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[136], VSI_NN_OP_CONV2D, 3, 1, 8);
    node[136]->nn_param.conv2d.ksize[0] = 1;
    node[136]->nn_param.conv2d.ksize[1] = 1;
    node[136]->nn_param.conv2d.weights = 80;
    node[136]->nn_param.conv2d.stride[0] = 1;
    node[136]->nn_param.conv2d.stride[1] = 1;
    node[136]->nn_param.conv2d.pad[0] = 0;
    node[136]->nn_param.conv2d.pad[1] = 0;
    node[136]->nn_param.conv2d.pad[2] = 0;
    node[136]->nn_param.conv2d.pad[3] = 0;
    node[136]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[136]->nn_param.conv2d.group = 1;
    node[136]->nn_param.conv2d.dilation[0] = 1;
    node[136]->nn_param.conv2d.dilation[1] = 1;
    node[136]->nn_param.conv2d.multiplier = 0;
    node[136]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[136]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[136]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Conv_/model.22/cv2.1/cv2.1.2/Conv_68
      var       - node[137]
      name      - Conv_/model.22/cv2.1/cv2.1.2/Conv
      operation - convolution
      input     - [40, 40, 64, 1]
      filter    - [1, 1, 64, 64]
      output    - [40, 40, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[137], VSI_NN_OP_CONV2D, 3, 1, 68);
    node[137]->nn_param.conv2d.ksize[0] = 1;
    node[137]->nn_param.conv2d.ksize[1] = 1;
    node[137]->nn_param.conv2d.weights = 64;
    node[137]->nn_param.conv2d.stride[0] = 1;
    node[137]->nn_param.conv2d.stride[1] = 1;
    node[137]->nn_param.conv2d.pad[0] = 0;
    node[137]->nn_param.conv2d.pad[1] = 0;
    node[137]->nn_param.conv2d.pad[2] = 0;
    node[137]->nn_param.conv2d.pad[3] = 0;
    node[137]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[137]->nn_param.conv2d.group = 1;
    node[137]->nn_param.conv2d.dilation[0] = 1;
    node[137]->nn_param.conv2d.dilation[1] = 1;
    node[137]->nn_param.conv2d.multiplier = 0;
    node[137]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[137]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[137]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/model.21/cv1/act/Sigmoid_103_Mul_/model.21/cv1/act/Mul_93
      var       - node[138]
      name      - swish
      operation - swish
      input     - [20, 20, 512, 1]
      output    - [20, 20, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[138], VSI_NN_OP_SWISH, 1, 1, 93);
    node[138]->nn_param.swish.type = VSI_NN_SWISH;
    node[138]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Reshape_/model.22/dfl_1/Reshape_50
      var       - node[139]
      name      - Reshape_/model.22/dfl_1/Reshape
      operation - reshape
      input     - [40, 40, 64, 1]
      output    - [1600, 16, 4, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[139], VSI_NN_OP_RESHAPE2, 1, 1, 50);
    node[139]->nn_param.reshape2.size = shape_3;
    node[139]->nn_param.reshape2.dim_num = 4;

    /*-----------------------------------------
      lid       - Split_/model.21/Split_82
      var       - node[140]
      name      - Split_/model.21/Split
      operation - split
      input     - [20, 20, 512, 1]
      output    - [20, 20, 256, 1]
                  [20, 20, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[140], VSI_NN_OP_SPLIT, 1, 2, 82);
    node[140]->nn_param.split.axis = 2;
    node[140]->nn_param.split.slices = slices_8;
    node[140]->nn_param.split.slices_num = 2;

    /*-----------------------------------------
      lid       - Softmax_/model.22/dfl_1/Softmax_32_acuity_mark_perm_49
      var       - node[141]
      name      - Softmax_/model.22/dfl_1/Softmax_32_acuity_mark_perm
      operation - permute
      input     - [1600, 16, 4, 1]
      output    - [1600, 4, 16, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[141], VSI_NN_OP_PERMUTE, 1, 1, 49);
    node[141]->nn_param.permute.perm = perm_2;
    node[141]->nn_param.permute.dim_num = 4;

    /*-----------------------------------------
      lid       - Conv_/model.21/m.0/cv1/conv/Conv_81
      var       - node[142]
      name      - Conv_/model.21/m.0/cv1/conv/Conv
      operation - convolution
      input     - [20, 20, 256, 1]
      filter    - [3, 3, 256, 256]
      output    - [20, 20, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[142], VSI_NN_OP_CONV2D, 3, 1, 81);
    node[142]->nn_param.conv2d.ksize[0] = 3;
    node[142]->nn_param.conv2d.ksize[1] = 3;
    node[142]->nn_param.conv2d.weights = 256;
    node[142]->nn_param.conv2d.stride[0] = 1;
    node[142]->nn_param.conv2d.stride[1] = 1;
    node[142]->nn_param.conv2d.pad[0] = 1;
    node[142]->nn_param.conv2d.pad[1] = 1;
    node[142]->nn_param.conv2d.pad[2] = 1;
    node[142]->nn_param.conv2d.pad[3] = 1;
    node[142]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[142]->nn_param.conv2d.group = 1;
    node[142]->nn_param.conv2d.dilation[0] = 1;
    node[142]->nn_param.conv2d.dilation[1] = 1;
    node[142]->nn_param.conv2d.multiplier = 0;
    node[142]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[142]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[142]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Softmax_/model.22/dfl_1/Softmax_32
      var       - node[143]
      name      - Softmax_/model.22/dfl_1/Softmax
      operation - softmax
      input     - [1600, 4, 16, 1]
      output    - [1600, 4, 16, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[143], VSI_NN_OP_SOFTMAX, 1, 1, 32);
    node[143]->nn_param.softmax.beta = 1.0;
    node[143]->nn_param.softmax.axis = 2;

    /*-----------------------------------------
      lid       - Sigmoid_/model.21/m.0/cv1/act/Sigmoid_73_Mul_/model.21/m.0/cv1/act/Mul_72
      var       - node[144]
      name      - swish
      operation - swish
      input     - [20, 20, 256, 1]
      output    - [20, 20, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[144], VSI_NN_OP_SWISH, 1, 1, 72);
    node[144]->nn_param.swish.type = VSI_NN_SWISH;
    node[144]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/model.22/dfl/conv_1/Conv_23
      var       - node[145]
      name      - Conv_/model.22/dfl/conv_1/Conv
      operation - convolution
      input     - [1600, 4, 16, 1]
      filter    - [1, 1, 16, 1]
      output    - [1600, 4, 1, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[145], VSI_NN_OP_CONV2D, 3, 1, 23);
    node[145]->nn_param.conv2d.ksize[0] = 1;
    node[145]->nn_param.conv2d.ksize[1] = 1;
    node[145]->nn_param.conv2d.weights = 1;
    node[145]->nn_param.conv2d.stride[0] = 1;
    node[145]->nn_param.conv2d.stride[1] = 1;
    node[145]->nn_param.conv2d.pad[0] = 0;
    node[145]->nn_param.conv2d.pad[1] = 0;
    node[145]->nn_param.conv2d.pad[2] = 0;
    node[145]->nn_param.conv2d.pad[3] = 0;
    node[145]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[145]->nn_param.conv2d.group = 1;
    node[145]->nn_param.conv2d.dilation[0] = 1;
    node[145]->nn_param.conv2d.dilation[1] = 1;
    node[145]->nn_param.conv2d.multiplier = 0;
    node[145]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[145]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[145]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Conv_/model.21/m.0/cv2/conv/Conv_63
      var       - node[146]
      name      - Conv_/model.21/m.0/cv2/conv/Conv
      operation - convolution
      input     - [20, 20, 256, 1]
      filter    - [3, 3, 256, 256]
      output    - [20, 20, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[146], VSI_NN_OP_CONV2D, 3, 1, 63);
    node[146]->nn_param.conv2d.ksize[0] = 3;
    node[146]->nn_param.conv2d.ksize[1] = 3;
    node[146]->nn_param.conv2d.weights = 256;
    node[146]->nn_param.conv2d.stride[0] = 1;
    node[146]->nn_param.conv2d.stride[1] = 1;
    node[146]->nn_param.conv2d.pad[0] = 1;
    node[146]->nn_param.conv2d.pad[1] = 1;
    node[146]->nn_param.conv2d.pad[2] = 1;
    node[146]->nn_param.conv2d.pad[3] = 1;
    node[146]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[146]->nn_param.conv2d.group = 1;
    node[146]->nn_param.conv2d.dilation[0] = 1;
    node[146]->nn_param.conv2d.dilation[1] = 1;
    node[146]->nn_param.conv2d.multiplier = 0;
    node[146]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[146]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[146]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Reshape_/model.22/Reshape_3_9
      var       - node[147]
      name      - Reshape_/model.22/Reshape_3
      operation - reshape
      input     - [1600, 4, 1, 1]
      output    - [40, 40, 4, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[147], VSI_NN_OP_RESHAPE2, 1, 1, 9);
    node[147]->nn_param.reshape2.size = shape_4;
    node[147]->nn_param.reshape2.dim_num = 4;

    /*-----------------------------------------
      lid       - Sigmoid_/model.21/m.0/cv2/act/Sigmoid_64_Mul_/model.21/m.0/cv2/act/Mul_55
      var       - node[148]
      name      - swish
      operation - swish
      input     - [20, 20, 256, 1]
      output    - [20, 20, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[148], VSI_NN_OP_SWISH, 1, 1, 55);
    node[148]->nn_param.swish.type = VSI_NN_SWISH;
    node[148]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Concat_/model.21/Concat_54
      var       - node[149]
      name      - Concat_/model.21/Concat
      operation - concat
      input     - [20, 20, 256, 1]
                  [20, 20, 256, 1]
                  [20, 20, 256, 1]
      output    - [20, 20, 768, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[149], VSI_NN_OP_CONCAT, 3, 1, 54);
    node[149]->nn_param.concat.axis = 2;

    /*-----------------------------------------
      lid       - Conv_/model.21/cv2/conv/Conv_45
      var       - node[150]
      name      - Conv_/model.21/cv2/conv/Conv
      operation - convolution
      input     - [20, 20, 768, 1]
      filter    - [1, 1, 768, 512]
      output    - [20, 20, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[150], VSI_NN_OP_CONV2D, 3, 1, 45);
    node[150]->nn_param.conv2d.ksize[0] = 1;
    node[150]->nn_param.conv2d.ksize[1] = 1;
    node[150]->nn_param.conv2d.weights = 512;
    node[150]->nn_param.conv2d.stride[0] = 1;
    node[150]->nn_param.conv2d.stride[1] = 1;
    node[150]->nn_param.conv2d.pad[0] = 0;
    node[150]->nn_param.conv2d.pad[1] = 0;
    node[150]->nn_param.conv2d.pad[2] = 0;
    node[150]->nn_param.conv2d.pad[3] = 0;
    node[150]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[150]->nn_param.conv2d.group = 1;
    node[150]->nn_param.conv2d.dilation[0] = 1;
    node[150]->nn_param.conv2d.dilation[1] = 1;
    node[150]->nn_param.conv2d.multiplier = 0;
    node[150]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[150]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[150]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/model.21/cv2/act/Sigmoid_46_Mul_/model.21/cv2/act/Mul_37
      var       - node[151]
      name      - swish
      operation - swish
      input     - [20, 20, 512, 1]
      output    - [20, 20, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[151], VSI_NN_OP_SWISH, 1, 1, 37);
    node[151]->nn_param.swish.type = VSI_NN_SWISH;
    node[151]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/model.22/cv3.2/cv3.2.0/conv/Conv_36
      var       - node[152]
      name      - Conv_/model.22/cv3.2/cv3.2.0/conv/Conv
      operation - convolution
      input     - [20, 20, 512, 1]
      filter    - [3, 3, 512, 128]
      output    - [20, 20, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[152], VSI_NN_OP_CONV2D, 3, 1, 36);
    node[152]->nn_param.conv2d.ksize[0] = 3;
    node[152]->nn_param.conv2d.ksize[1] = 3;
    node[152]->nn_param.conv2d.weights = 128;
    node[152]->nn_param.conv2d.stride[0] = 1;
    node[152]->nn_param.conv2d.stride[1] = 1;
    node[152]->nn_param.conv2d.pad[0] = 1;
    node[152]->nn_param.conv2d.pad[1] = 1;
    node[152]->nn_param.conv2d.pad[2] = 1;
    node[152]->nn_param.conv2d.pad[3] = 1;
    node[152]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[152]->nn_param.conv2d.group = 1;
    node[152]->nn_param.conv2d.dilation[0] = 1;
    node[152]->nn_param.conv2d.dilation[1] = 1;
    node[152]->nn_param.conv2d.multiplier = 0;
    node[152]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[152]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[152]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Conv_/model.22/cv2.2/cv2.2.0/conv/Conv_104
      var       - node[153]
      name      - Conv_/model.22/cv2.2/cv2.2.0/conv/Conv
      operation - convolution
      input     - [20, 20, 512, 1]
      filter    - [3, 3, 512, 64]
      output    - [20, 20, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[153], VSI_NN_OP_CONV2D, 3, 1, 104);
    node[153]->nn_param.conv2d.ksize[0] = 3;
    node[153]->nn_param.conv2d.ksize[1] = 3;
    node[153]->nn_param.conv2d.weights = 64;
    node[153]->nn_param.conv2d.stride[0] = 1;
    node[153]->nn_param.conv2d.stride[1] = 1;
    node[153]->nn_param.conv2d.pad[0] = 1;
    node[153]->nn_param.conv2d.pad[1] = 1;
    node[153]->nn_param.conv2d.pad[2] = 1;
    node[153]->nn_param.conv2d.pad[3] = 1;
    node[153]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[153]->nn_param.conv2d.group = 1;
    node[153]->nn_param.conv2d.dilation[0] = 1;
    node[153]->nn_param.conv2d.dilation[1] = 1;
    node[153]->nn_param.conv2d.multiplier = 0;
    node[153]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[153]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[153]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/model.22/cv3.2/cv3.2.0/act/Sigmoid_28_Mul_/model.22/cv3.2/cv3.2.0/act/Mul_27
      var       - node[154]
      name      - swish
      operation - swish
      input     - [20, 20, 128, 1]
      output    - [20, 20, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[154], VSI_NN_OP_SWISH, 1, 1, 27);
    node[154]->nn_param.swish.type = VSI_NN_SWISH;
    node[154]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Sigmoid_/model.22/cv2.2/cv2.2.0/act/Sigmoid_95_Mul_/model.22/cv2.2/cv2.2.0/act/Mul_94
      var       - node[155]
      name      - swish
      operation - swish
      input     - [20, 20, 64, 1]
      output    - [20, 20, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[155], VSI_NN_OP_SWISH, 1, 1, 94);
    node[155]->nn_param.swish.type = VSI_NN_SWISH;
    node[155]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/model.22/cv3.2/cv3.2.1/conv/Conv_18
      var       - node[156]
      name      - Conv_/model.22/cv3.2/cv3.2.1/conv/Conv
      operation - convolution
      input     - [20, 20, 128, 1]
      filter    - [3, 3, 128, 128]
      output    - [20, 20, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[156], VSI_NN_OP_CONV2D, 3, 1, 18);
    node[156]->nn_param.conv2d.ksize[0] = 3;
    node[156]->nn_param.conv2d.ksize[1] = 3;
    node[156]->nn_param.conv2d.weights = 128;
    node[156]->nn_param.conv2d.stride[0] = 1;
    node[156]->nn_param.conv2d.stride[1] = 1;
    node[156]->nn_param.conv2d.pad[0] = 1;
    node[156]->nn_param.conv2d.pad[1] = 1;
    node[156]->nn_param.conv2d.pad[2] = 1;
    node[156]->nn_param.conv2d.pad[3] = 1;
    node[156]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[156]->nn_param.conv2d.group = 1;
    node[156]->nn_param.conv2d.dilation[0] = 1;
    node[156]->nn_param.conv2d.dilation[1] = 1;
    node[156]->nn_param.conv2d.multiplier = 0;
    node[156]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[156]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[156]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Conv_/model.22/cv2.2/cv2.2.1/conv/Conv_83
      var       - node[157]
      name      - Conv_/model.22/cv2.2/cv2.2.1/conv/Conv
      operation - convolution
      input     - [20, 20, 64, 1]
      filter    - [3, 3, 64, 64]
      output    - [20, 20, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[157], VSI_NN_OP_CONV2D, 3, 1, 83);
    node[157]->nn_param.conv2d.ksize[0] = 3;
    node[157]->nn_param.conv2d.ksize[1] = 3;
    node[157]->nn_param.conv2d.weights = 64;
    node[157]->nn_param.conv2d.stride[0] = 1;
    node[157]->nn_param.conv2d.stride[1] = 1;
    node[157]->nn_param.conv2d.pad[0] = 1;
    node[157]->nn_param.conv2d.pad[1] = 1;
    node[157]->nn_param.conv2d.pad[2] = 1;
    node[157]->nn_param.conv2d.pad[3] = 1;
    node[157]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[157]->nn_param.conv2d.group = 1;
    node[157]->nn_param.conv2d.dilation[0] = 1;
    node[157]->nn_param.conv2d.dilation[1] = 1;
    node[157]->nn_param.conv2d.multiplier = 0;
    node[157]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[157]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[157]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/model.22/cv3.2/cv3.2.1/act/Sigmoid_19_Mul_/model.22/cv3.2/cv3.2.1/act/Mul_12
      var       - node[158]
      name      - swish
      operation - swish
      input     - [20, 20, 128, 1]
      output    - [20, 20, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[158], VSI_NN_OP_SWISH, 1, 1, 12);
    node[158]->nn_param.swish.type = VSI_NN_SWISH;
    node[158]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Sigmoid_/model.22/cv2.2/cv2.2.1/act/Sigmoid_84_Mul_/model.22/cv2.2/cv2.2.1/act/Mul_74
      var       - node[159]
      name      - swish
      operation - swish
      input     - [20, 20, 64, 1]
      output    - [20, 20, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[159], VSI_NN_OP_SWISH, 1, 1, 74);
    node[159]->nn_param.swish.type = VSI_NN_SWISH;
    node[159]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/model.22/cv3.2/cv3.2.2/Conv_6
      var       - node[160]
      name      - Conv_/model.22/cv3.2/cv3.2.2/Conv
      operation - convolution
      input     - [20, 20, 128, 1]
      filter    - [1, 1, 128, 80]
      output    - [20, 20, 80, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[160], VSI_NN_OP_CONV2D, 3, 1, 6);
    node[160]->nn_param.conv2d.ksize[0] = 1;
    node[160]->nn_param.conv2d.ksize[1] = 1;
    node[160]->nn_param.conv2d.weights = 80;
    node[160]->nn_param.conv2d.stride[0] = 1;
    node[160]->nn_param.conv2d.stride[1] = 1;
    node[160]->nn_param.conv2d.pad[0] = 0;
    node[160]->nn_param.conv2d.pad[1] = 0;
    node[160]->nn_param.conv2d.pad[2] = 0;
    node[160]->nn_param.conv2d.pad[3] = 0;
    node[160]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[160]->nn_param.conv2d.group = 1;
    node[160]->nn_param.conv2d.dilation[0] = 1;
    node[160]->nn_param.conv2d.dilation[1] = 1;
    node[160]->nn_param.conv2d.multiplier = 0;
    node[160]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[160]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[160]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Conv_/model.22/cv2.2/cv2.2.2/Conv_65
      var       - node[161]
      name      - Conv_/model.22/cv2.2/cv2.2.2/Conv
      operation - convolution
      input     - [20, 20, 64, 1]
      filter    - [1, 1, 64, 64]
      output    - [20, 20, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[161], VSI_NN_OP_CONV2D, 3, 1, 65);
    node[161]->nn_param.conv2d.ksize[0] = 1;
    node[161]->nn_param.conv2d.ksize[1] = 1;
    node[161]->nn_param.conv2d.weights = 64;
    node[161]->nn_param.conv2d.stride[0] = 1;
    node[161]->nn_param.conv2d.stride[1] = 1;
    node[161]->nn_param.conv2d.pad[0] = 0;
    node[161]->nn_param.conv2d.pad[1] = 0;
    node[161]->nn_param.conv2d.pad[2] = 0;
    node[161]->nn_param.conv2d.pad[3] = 0;
    node[161]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[161]->nn_param.conv2d.group = 1;
    node[161]->nn_param.conv2d.dilation[0] = 1;
    node[161]->nn_param.conv2d.dilation[1] = 1;
    node[161]->nn_param.conv2d.multiplier = 0;
    node[161]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[161]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[161]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Reshape_/model.22/dfl_2/Reshape_47
      var       - node[162]
      name      - Reshape_/model.22/dfl_2/Reshape
      operation - reshape
      input     - [20, 20, 64, 1]
      output    - [400, 16, 4, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[162], VSI_NN_OP_RESHAPE2, 1, 1, 47);
    node[162]->nn_param.reshape2.size = shape_5;
    node[162]->nn_param.reshape2.dim_num = 4;

    /*-----------------------------------------
      lid       - Softmax_/model.22/dfl_2/Softmax_29_acuity_mark_perm_46
      var       - node[163]
      name      - Softmax_/model.22/dfl_2/Softmax_29_acuity_mark_perm
      operation - permute
      input     - [400, 16, 4, 1]
      output    - [400, 4, 16, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[163], VSI_NN_OP_PERMUTE, 1, 1, 46);
    node[163]->nn_param.permute.perm = perm_3;
    node[163]->nn_param.permute.dim_num = 4;

    /*-----------------------------------------
      lid       - Softmax_/model.22/dfl_2/Softmax_29
      var       - node[164]
      name      - Softmax_/model.22/dfl_2/Softmax
      operation - softmax
      input     - [400, 4, 16, 1]
      output    - [400, 4, 16, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[164], VSI_NN_OP_SOFTMAX, 1, 1, 29);
    node[164]->nn_param.softmax.beta = 1.0;
    node[164]->nn_param.softmax.axis = 2;

    /*-----------------------------------------
      lid       - Conv_/model.22/dfl/conv_2/Conv_20
      var       - node[165]
      name      - Conv_/model.22/dfl/conv_2/Conv
      operation - convolution
      input     - [400, 4, 16, 1]
      filter    - [1, 1, 16, 1]
      output    - [400, 4, 1, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[165], VSI_NN_OP_CONV2D, 3, 1, 20);
    node[165]->nn_param.conv2d.ksize[0] = 1;
    node[165]->nn_param.conv2d.ksize[1] = 1;
    node[165]->nn_param.conv2d.weights = 1;
    node[165]->nn_param.conv2d.stride[0] = 1;
    node[165]->nn_param.conv2d.stride[1] = 1;
    node[165]->nn_param.conv2d.pad[0] = 0;
    node[165]->nn_param.conv2d.pad[1] = 0;
    node[165]->nn_param.conv2d.pad[2] = 0;
    node[165]->nn_param.conv2d.pad[3] = 0;
    node[165]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[165]->nn_param.conv2d.group = 1;
    node[165]->nn_param.conv2d.dilation[0] = 1;
    node[165]->nn_param.conv2d.dilation[1] = 1;
    node[165]->nn_param.conv2d.multiplier = 0;
    node[165]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[165]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[165]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Reshape_/model.22/Reshape_5_7
      var       - node[166]
      name      - Reshape_/model.22/Reshape_5
      operation - reshape
      input     - [400, 4, 1, 1]
      output    - [20, 20, 4, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[166], VSI_NN_OP_RESHAPE2, 1, 1, 7);
    node[166]->nn_param.reshape2.size = shape_6;
    node[166]->nn_param.reshape2.dim_num = 4;

    }
    else
    {
    NEW_VXNODE(node[0], VSI_NN_OP_NBG, 1, 6, 0);
    node[0]->nn_param.nbg.type = VSI_NN_NBG_FILE;
    node[0]->nn_param.nbg.url = data_file_name;

    }

/*-----------------------------------------
  Tensor initialize
 -----------------------------------------*/
    attr.dtype.fmt = VSI_NN_DIM_FMT_NCHW;
    /* @attach_Reshape_/model.22/Reshape_1/out0_0:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 80;
    attr.size[1] = 80;
    attr.size[2] = 4;
    attr.size[3] = 1;
    attr.dim_num = 4;
    attr.dtype.scale = 0.043258186429739;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_NORM_TENSOR(norm_tensor[0], attr, VSI_NN_TYPE_UINT8);

    /* @attach_Conv_/model.22/cv3.0/cv3.0.2/Conv/out0_1:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 80;
    attr.size[1] = 80;
    attr.size[2] = 80;
    attr.size[3] = 1;
    attr.dim_num = 4;
    attr.dtype.scale = 0.09062721580266953;
    attr.dtype.zero_point = 255;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_NORM_TENSOR(norm_tensor[1], attr, VSI_NN_TYPE_UINT8);

    /* @attach_Reshape_/model.22/Reshape_3/out0_2:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 40;
    attr.size[1] = 40;
    attr.size[2] = 4;
    attr.size[3] = 1;
    attr.dim_num = 4;
    attr.dtype.scale = 0.047095250338315964;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_NORM_TENSOR(norm_tensor[2], attr, VSI_NN_TYPE_UINT8);

    /* @attach_Conv_/model.22/cv3.1/cv3.1.2/Conv/out0_3:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 40;
    attr.size[1] = 40;
    attr.size[2] = 80;
    attr.size[3] = 1;
    attr.dim_num = 4;
    attr.dtype.scale = 0.19134394824504852;
    attr.dtype.zero_point = 255;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_NORM_TENSOR(norm_tensor[3], attr, VSI_NN_TYPE_UINT8);

    /* @attach_Reshape_/model.22/Reshape_5/out0_4:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 20;
    attr.size[1] = 20;
    attr.size[2] = 4;
    attr.size[3] = 1;
    attr.dim_num = 4;
    attr.dtype.scale = 0.048695433884859085;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_NORM_TENSOR(norm_tensor[4], attr, VSI_NN_TYPE_UINT8);

    /* @attach_Conv_/model.22/cv3.2/cv3.2.2/Conv/out0_5:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 20;
    attr.size[1] = 20;
    attr.size[2] = 80;
    attr.size[3] = 1;
    attr.dim_num = 4;
    attr.dtype.scale = 0.14742480218410492;
    attr.dtype.zero_point = 237;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_NORM_TENSOR(norm_tensor[5], attr, VSI_NN_TYPE_UINT8);

    /* @images_236:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 640;
    attr.size[1] = 640;
    attr.size[2] = 3;
    attr.size[3] = 1;
    attr.dim_num = 4;
    attr.dtype.scale = 0.003921568859368563;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_NORM_TENSOR(norm_tensor[6], attr, VSI_NN_TYPE_UINT8);



    if( !inference_with_nbg )
    {
    /* @Conv_/model.0/conv/Conv_234:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 3;
    attr.size[3] = 32;
    attr.dim_num = 4;
    attr.dtype.scale = 0.19791576266288757;
    attr.dtype.zero_point = 123;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[0], attr, VSI_NN_TYPE_UINT8, 128, 864);

    /* @Conv_/model.0/conv/Conv_234:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 32;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0007761403103359044;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[1], attr, VSI_NN_TYPE_INT32, 0, 128);

    /* @Conv_/model.1/conv/Conv_232:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 32;
    attr.size[3] = 64;
    attr.dim_num = 4;
    attr.dtype.scale = 0.009091394022107124;
    attr.dtype.zero_point = 118;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[2], attr, VSI_NN_TYPE_UINT8, 1248, 18432);

    /* @Conv_/model.1/conv/Conv_232:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 64;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0014990867348387837;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[3], attr, VSI_NN_TYPE_INT32, 992, 256);

    /* @Conv_/model.2/cv1/conv/Conv_225:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 64;
    attr.size[3] = 64;
    attr.dim_num = 4;
    attr.dtype.scale = 0.0067302570678293705;
    attr.dtype.zero_point = 163;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[4], attr, VSI_NN_TYPE_UINT8, 1995232, 4096);

    /* @Conv_/model.2/cv1/conv/Conv_225:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 64;
    attr.dim_num = 1;
    attr.dtype.scale = 0.001262010890059173;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[5], attr, VSI_NN_TYPE_INT32, 1994976, 256);

    /* @Conv_/model.2/m.0/cv1/conv/Conv_216:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 32;
    attr.size[3] = 32;
    attr.dim_num = 4;
    attr.dtype.scale = 0.020561151206493378;
    attr.dtype.zero_point = 120;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[6], attr, VSI_NN_TYPE_UINT8, 2005856, 9216);

    /* @Conv_/model.2/m.0/cv1/conv/Conv_216:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 32;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0014368158299475908;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[7], attr, VSI_NN_TYPE_INT32, 2005728, 128);

    /* @Conv_/model.2/m.0/cv2/conv/Conv_208:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 32;
    attr.size[3] = 32;
    attr.dim_num = 4;
    attr.dtype.scale = 0.004865634720772505;
    attr.dtype.zero_point = 156;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[8], attr, VSI_NN_TYPE_UINT8, 2015200, 9216);

    /* @Conv_/model.2/m.0/cv2/conv/Conv_208:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 32;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00043857708806172013;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[9], attr, VSI_NN_TYPE_INT32, 2015072, 128);

    /* @Conv_/model.2/cv2/conv/Conv_189:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 96;
    attr.size[3] = 64;
    attr.dim_num = 4;
    attr.dtype.scale = 0.005858710967004299;
    attr.dtype.zero_point = 143;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[10], attr, VSI_NN_TYPE_UINT8, 1999584, 6144);

    /* @Conv_/model.2/cv2/conv/Conv_189:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 64;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0004094074829481542;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[11], attr, VSI_NN_TYPE_INT32, 1999328, 256);

    /* @Conv_/model.3/conv/Conv_176:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 64;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.0024750004522502422;
    attr.dtype.zero_point = 144;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[12], attr, VSI_NN_TYPE_UINT8, 6147764, 73728);

    /* @Conv_/model.3/conv/Conv_176:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 8.286110823974013e-05;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[13], attr, VSI_NN_TYPE_INT32, 6147252, 512);

    /* @Conv_/model.4/cv1/conv/Conv_170:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 128;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.017073068767786026;
    attr.dtype.zero_point = 113;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[14], attr, VSI_NN_TYPE_UINT8, 6222004, 16384);

    /* @Conv_/model.4/cv1/conv/Conv_170:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0003964141651522368;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[15], attr, VSI_NN_TYPE_INT32, 6221492, 512);

    /* @Conv_/model.4/m.0/cv1/conv/Conv_164:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 64;
    attr.size[3] = 64;
    attr.dim_num = 4;
    attr.dtype.scale = 0.007974689826369286;
    attr.dtype.zero_point = 127;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[16], attr, VSI_NN_TYPE_UINT8, 6271924, 36864);

    /* @Conv_/model.4/m.0/cv1/conv/Conv_164:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 64;
    attr.dim_num = 1;
    attr.dtype.scale = 0.000361838930984959;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[17], attr, VSI_NN_TYPE_INT32, 6271668, 256);

    /* @Conv_/model.4/m.0/cv2/conv/Conv_147:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 64;
    attr.size[3] = 64;
    attr.dim_num = 4;
    attr.dtype.scale = 0.007084986660629511;
    attr.dtype.zero_point = 159;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[18], attr, VSI_NN_TYPE_UINT8, 6309044, 36864);

    /* @Conv_/model.4/m.0/cv2/conv/Conv_147:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 64;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00017630816728342324;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[19], attr, VSI_NN_TYPE_INT32, 6308788, 256);

    /* @Conv_/model.4/m.1/cv1/conv/Conv_158:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 64;
    attr.size[3] = 64;
    attr.dim_num = 4;
    attr.dtype.scale = 0.004037818405777216;
    attr.dtype.zero_point = 125;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[20], attr, VSI_NN_TYPE_UINT8, 6346164, 36864);

    /* @Conv_/model.4/m.1/cv1/conv/Conv_158:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 64;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00018320961680728942;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[21], attr, VSI_NN_TYPE_INT32, 6345908, 256);

    /* @Conv_/model.4/m.1/cv2/conv/Conv_149:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 64;
    attr.size[3] = 64;
    attr.dim_num = 4;
    attr.dtype.scale = 0.011785484850406647;
    attr.dtype.zero_point = 107;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[22], attr, VSI_NN_TYPE_UINT8, 6383284, 36864);

    /* @Conv_/model.4/m.1/cv2/conv/Conv_149:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 64;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0002176957787014544;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[23], attr, VSI_NN_TYPE_INT32, 6383028, 256);

    /* @Conv_/model.4/cv2/conv/Conv_129:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 256;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.005724429152905941;
    attr.dtype.zero_point = 129;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[24], attr, VSI_NN_TYPE_UINT8, 6238900, 32768);

    /* @Conv_/model.4/cv2/conv/Conv_129:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0002597369020804763;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[25], attr, VSI_NN_TYPE_INT32, 6238388, 512);

    /* @Conv_/model.5/conv/Conv_231:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 128;
    attr.size[3] = 256;
    attr.dim_num = 4;
    attr.dtype.scale = 0.00369451567530632;
    attr.dtype.zero_point = 154;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[26], attr, VSI_NN_TYPE_UINT8, 6421172, 294912);

    /* @Conv_/model.5/conv/Conv_231:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 256;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00015993264969438314;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[27], attr, VSI_NN_TYPE_INT32, 6420148, 1024);

    /* @Conv_/model.6/cv1/conv/Conv_223:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 256;
    attr.size[3] = 256;
    attr.dim_num = 4;
    attr.dtype.scale = 0.011170417070388794;
    attr.dtype.zero_point = 146;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[28], attr, VSI_NN_TYPE_UINT8, 6717108, 65536);

    /* @Conv_/model.6/cv1/conv/Conv_223:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 256;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00033141669700853527;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[29], attr, VSI_NN_TYPE_INT32, 6716084, 1024);

    /* @Conv_/model.6/m.0/cv1/conv/Conv_218:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 128;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.008790272288024426;
    attr.dtype.zero_point = 138;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[30], attr, VSI_NN_TYPE_UINT8, 6915252, 147456);

    /* @Conv_/model.6/m.0/cv1/conv/Conv_218:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0004005893715657294;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[31], attr, VSI_NN_TYPE_INT32, 6914740, 512);

    /* @Conv_/model.6/m.0/cv2/conv/Conv_204:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 128;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.007521018851548433;
    attr.dtype.zero_point = 126;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[32], attr, VSI_NN_TYPE_UINT8, 7063220, 147456);

    /* @Conv_/model.6/m.0/cv2/conv/Conv_204:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00016866784426383674;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[33], attr, VSI_NN_TYPE_INT32, 7062708, 512);

    /* @Conv_/model.6/m.1/cv1/conv/Conv_220:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 128;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.0035133985802531242;
    attr.dtype.zero_point = 111;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[34], attr, VSI_NN_TYPE_UINT8, 7211188, 147456);

    /* @Conv_/model.6/m.1/cv1/conv/Conv_220:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00016011223488021642;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[35], attr, VSI_NN_TYPE_INT32, 7210676, 512);

    /* @Conv_/model.6/m.1/cv2/conv/Conv_206:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 128;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.013880457729101181;
    attr.dtype.zero_point = 128;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[36], attr, VSI_NN_TYPE_UINT8, 7359156, 147456);

    /* @Conv_/model.6/m.1/cv2/conv/Conv_206:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0003462153545115143;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[37], attr, VSI_NN_TYPE_INT32, 7358644, 512);

    /* @Conv_/model.6/cv2/conv/Conv_187:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 512;
    attr.size[3] = 256;
    attr.dim_num = 4;
    attr.dtype.scale = 0.003633820218965411;
    attr.dtype.zero_point = 121;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[38], attr, VSI_NN_TYPE_UINT8, 6783668, 131072);

    /* @Conv_/model.6/cv2/conv/Conv_187:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 256;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00016560008225496858;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[39], attr, VSI_NN_TYPE_INT32, 6782644, 1024);

    /* @Conv_/model.7/conv/Conv_202:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 256;
    attr.size[3] = 512;
    attr.dim_num = 4;
    attr.dtype.scale = 0.003676098771393299;
    attr.dtype.zero_point = 80;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[40], attr, VSI_NN_TYPE_UINT8, 7508660, 1179648);

    /* @Conv_/model.7/conv/Conv_202:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 512;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00013610634778160602;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[41], attr, VSI_NN_TYPE_INT32, 7506612, 2048);

    /* @Conv_/model.8/cv1/conv/Conv_196:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 512;
    attr.size[3] = 512;
    attr.dim_num = 4;
    attr.dtype.scale = 0.005824583116918802;
    attr.dtype.zero_point = 117;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[42], attr, VSI_NN_TYPE_UINT8, 8690356, 262144);

    /* @Conv_/model.8/cv1/conv/Conv_196:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 512;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00020542345009744167;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[43], attr, VSI_NN_TYPE_INT32, 8688308, 2048);

    /* @Conv_/model.8/m.0/cv1/conv/Conv_184:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 256;
    attr.size[3] = 256;
    attr.dim_num = 4;
    attr.dtype.scale = 0.006866001058369875;
    attr.dtype.zero_point = 155;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[44], attr, VSI_NN_TYPE_UINT8, 9348788, 589824);

    /* @Conv_/model.8/m.0/cv1/conv/Conv_184:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 256;
    attr.dim_num = 1;
    attr.dtype.scale = 0.000303387176245451;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[45], attr, VSI_NN_TYPE_INT32, 9347764, 1024);

    /* @Conv_/model.8/m.0/cv2/conv/Conv_172:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 256;
    attr.size[3] = 256;
    attr.dim_num = 4;
    attr.dtype.scale = 0.005475978367030621;
    attr.dtype.zero_point = 104;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[46], attr, VSI_NN_TYPE_UINT8, 9939636, 589824);

    /* @Conv_/model.8/m.0/cv2/conv/Conv_172:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 256;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00016526845865882933;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[47], attr, VSI_NN_TYPE_INT32, 9938612, 1024);

    /* @Conv_/model.8/cv2/conv/Conv_152:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 768;
    attr.size[3] = 512;
    attr.dim_num = 4;
    attr.dtype.scale = 0.0047768824733793736;
    attr.dtype.zero_point = 135;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[48], attr, VSI_NN_TYPE_UINT8, 8954548, 393216);

    /* @Conv_/model.8/cv2/conv/Conv_152:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 512;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00021107554493937641;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[49], attr, VSI_NN_TYPE_INT32, 8952500, 2048);

    /* @Conv_/model.9/cv1/conv/Conv_143:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 512;
    attr.size[3] = 256;
    attr.dim_num = 4;
    attr.dtype.scale = 0.0056290049105882645;
    attr.dtype.zero_point = 153;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[50], attr, VSI_NN_TYPE_UINT8, 10530484, 131072);

    /* @Conv_/model.9/cv1/conv/Conv_143:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 256;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0001558196818223223;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[51], attr, VSI_NN_TYPE_INT32, 10529460, 1024);

    /* @Conv_/model.9/cv2/conv/Conv_122:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 1024;
    attr.size[3] = 512;
    attr.dim_num = 4;
    attr.dtype.scale = 0.00397186353802681;
    attr.dtype.zero_point = 129;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[52], attr, VSI_NN_TYPE_UINT8, 10663604, 524288);

    /* @Conv_/model.9/cv2/conv/Conv_122:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 512;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00010481418576091528;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[53], attr, VSI_NN_TYPE_INT32, 10661556, 2048);

    /* @Conv_/model.12/cv1/conv/Conv_174:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 768;
    attr.size[3] = 256;
    attr.dim_num = 4;
    attr.dtype.scale = 0.00784483551979065;
    attr.dtype.zero_point = 106;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[54], attr, VSI_NN_TYPE_UINT8, 20704, 196608);

    /* @Conv_/model.12/cv1/conv/Conv_174:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 256;
    attr.dim_num = 1;
    attr.dtype.scale = 0.000290452444460243;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[55], attr, VSI_NN_TYPE_INT32, 19680, 1024);

    /* @Conv_/model.12/m.0/cv1/conv/Conv_162:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 128;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.00487714447081089;
    attr.dtype.zero_point = 109;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[56], attr, VSI_NN_TYPE_UINT8, 317152, 147456);

    /* @Conv_/model.12/m.0/cv1/conv/Conv_162:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0001648839534027502;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[57], attr, VSI_NN_TYPE_INT32, 316640, 512);

    /* @Conv_/model.12/m.0/cv2/conv/Conv_145:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 128;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.006192674860358238;
    attr.dtype.zero_point = 119;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[58], attr, VSI_NN_TYPE_UINT8, 465120, 147456);

    /* @Conv_/model.12/m.0/cv2/conv/Conv_145:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00015562977932859212;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[59], attr, VSI_NN_TYPE_INT32, 464608, 512);

    /* @Conv_/model.12/cv2/conv/Conv_126:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 384;
    attr.size[3] = 256;
    attr.dim_num = 4;
    attr.dtype.scale = 0.009884225204586983;
    attr.dtype.zero_point = 138;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[60], attr, VSI_NN_TYPE_UINT8, 218336, 98304);

    /* @Conv_/model.12/cv2/conv/Conv_126:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 256;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00033416072255931795;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[61], attr, VSI_NN_TYPE_INT32, 217312, 1024);

    /* @Conv_/model.15/cv1/conv/Conv_110:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 384;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.007508293259888887;
    attr.dtype.zero_point = 116;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[62], attr, VSI_NN_TYPE_UINT8, 613088, 49152);

    /* @Conv_/model.15/cv1/conv/Conv_110:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00032502805697731674;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[63], attr, VSI_NN_TYPE_INT32, 612576, 512);

    /* @Conv_/model.15/m.0/cv1/conv/Conv_89:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 64;
    attr.size[3] = 64;
    attr.dim_num = 4;
    attr.dtype.scale = 0.00676843523979187;
    attr.dtype.zero_point = 129;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[64], attr, VSI_NN_TYPE_UINT8, 687584, 36864);

    /* @Conv_/model.15/m.0/cv1/conv/Conv_89:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 64;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0001495703327236697;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[65], attr, VSI_NN_TYPE_INT32, 687328, 256);

    /* @Conv_/model.15/m.0/cv2/conv/Conv_69:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 64;
    attr.size[3] = 64;
    attr.dim_num = 4;
    attr.dtype.scale = 0.00889801885932684;
    attr.dtype.zero_point = 137;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[66], attr, VSI_NN_TYPE_UINT8, 724704, 36864);

    /* @Conv_/model.15/m.0/cv2/conv/Conv_69:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 64;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0001282127050217241;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[67], attr, VSI_NN_TYPE_INT32, 724448, 256);

    /* @Conv_/model.15/cv2/conv/Conv_51:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 192;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.008751148357987404;
    attr.dtype.zero_point = 148;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[68], attr, VSI_NN_TYPE_UINT8, 662752, 24576);

    /* @Conv_/model.15/cv2/conv/Conv_51:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0001933847670443356;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[69], attr, VSI_NN_TYPE_INT32, 662240, 512);

    /* @Conv_/model.22/cv3.0/cv3.0.0/conv/Conv_42:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 128;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.00841868482530117;
    attr.dtype.zero_point = 147;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[70], attr, VSI_NN_TYPE_UINT8, 4638432, 147456);

    /* @Conv_/model.22/cv3.0/cv3.0.0/conv/Conv_42:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00013128723367117345;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[71], attr, VSI_NN_TYPE_INT32, 4637920, 512);

    /* @Conv_/model.22/cv2.0/cv2.0.0/conv/Conv_112:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 128;
    attr.size[3] = 64;
    attr.dim_num = 4;
    attr.dtype.scale = 0.009910195134580135;
    attr.dtype.zero_point = 144;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[72], attr, VSI_NN_TYPE_UINT8, 3996896, 73728);

    /* @Conv_/model.22/cv2.0/cv2.0.0/conv/Conv_112:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 64;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00015454695676453412;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[73], attr, VSI_NN_TYPE_INT32, 3996640, 256);

    /* @Conv_/model.16/conv/Conv_124:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 128;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.006025225855410099;
    attr.dtype.zero_point = 133;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[74], attr, VSI_NN_TYPE_UINT8, 762080, 147456);

    /* @Conv_/model.16/conv/Conv_124:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 9.396185487275943e-05;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[75], attr, VSI_NN_TYPE_INT32, 761568, 512);

    /* @Conv_/model.22/cv3.0/cv3.0.1/conv/Conv_24:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 128;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.0534062534570694;
    attr.dtype.zero_point = 179;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[76], attr, VSI_NN_TYPE_UINT8, 4786400, 147456);

    /* @Conv_/model.22/cv3.0/cv3.0.1/conv/Conv_24:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 0.001782870152965188;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[77], attr, VSI_NN_TYPE_INT32, 4785888, 512);

    /* @Conv_/model.22/cv2.0/cv2.0.1/conv/Conv_91:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 64;
    attr.size[3] = 64;
    attr.dim_num = 4;
    attr.dtype.scale = 0.02718297578394413;
    attr.dtype.zero_point = 115;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[78], attr, VSI_NN_TYPE_UINT8, 4070880, 36864);

    /* @Conv_/model.22/cv2.0/cv2.0.1/conv/Conv_91:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 64;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0006667176494374871;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[79], attr, VSI_NN_TYPE_INT32, 4070624, 256);

    /* @Conv_/model.18/cv1/conv/Conv_106:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 384;
    attr.size[3] = 256;
    attr.dim_num = 4;
    attr.dtype.scale = 0.008265586569905281;
    attr.dtype.zero_point = 137;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[80], attr, VSI_NN_TYPE_UINT8, 910560, 98304);

    /* @Conv_/model.18/cv1/conv/Conv_106:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 256;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00035781069891527295;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[81], attr, VSI_NN_TYPE_INT32, 909536, 1024);

    /* @Conv_/model.22/cv3.0/cv3.0.2/Conv_10:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 128;
    attr.size[3] = 80;
    attr.dim_num = 4;
    attr.dtype.scale = 0.0016706878086552024;
    attr.dtype.zero_point = 137;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[82], attr, VSI_NN_TYPE_UINT8, 4934176, 10240);

    /* @Conv_/model.22/cv3.0/cv3.0.2/Conv_10:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 80;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00017908925656229258;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[83], attr, VSI_NN_TYPE_INT32, 4933856, 320);

    /* @Conv_/model.22/cv2.0/cv2.0.2/Conv_71:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 64;
    attr.size[3] = 64;
    attr.dim_num = 4;
    attr.dtype.scale = 0.0022183286491781473;
    attr.dtype.zero_point = 125;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[84], attr, VSI_NN_TYPE_UINT8, 4108000, 4096);

    /* @Conv_/model.22/cv2.0/cv2.0.2/Conv_71:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 64;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0002352968294871971;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[85], attr, VSI_NN_TYPE_INT32, 4107744, 256);

    /* @Conv_/model.18/m.0/cv1/conv/Conv_85:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 128;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.004090671893209219;
    attr.dtype.zero_point = 127;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[86], attr, VSI_NN_TYPE_UINT8, 1108704, 147456);

    /* @Conv_/model.18/m.0/cv1/conv/Conv_85:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0001515519543318078;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[87], attr, VSI_NN_TYPE_INT32, 1108192, 512);

    /* @Conv_/model.22/dfl/conv/Conv_26:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 16;
    attr.size[3] = 1;
    attr.dim_num = 4;
    attr.dtype.scale = 0.05882352963089943;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[88], attr, VSI_NN_TYPE_UINT8, 6147236, 16);

    /* @Conv_/model.22/dfl/conv/Conv_26:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0002131251385435462;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[89], attr, VSI_NN_TYPE_INT32, 6147232, 4);

    /* @Conv_/model.18/m.0/cv2/conv/Conv_66:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 128;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.01348606776446104;
    attr.dtype.zero_point = 123;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[90], attr, VSI_NN_TYPE_UINT8, 1256672, 147456);

    /* @Conv_/model.18/m.0/cv2/conv/Conv_66:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00021803478011861444;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[91], attr, VSI_NN_TYPE_INT32, 1256160, 512);

    /* @Conv_/model.18/cv2/conv/Conv_48:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 384;
    attr.size[3] = 256;
    attr.dim_num = 4;
    attr.dtype.scale = 0.011625740677118301;
    attr.dtype.zero_point = 173;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[92], attr, VSI_NN_TYPE_UINT8, 1009888, 98304);

    /* @Conv_/model.18/cv2/conv/Conv_48:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 256;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0004307125345803797;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[93], attr, VSI_NN_TYPE_INT32, 1008864, 1024);

    /* @Conv_/model.22/cv3.1/cv3.1.0/conv/Conv_39:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 256;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.011561094783246517;
    attr.dtype.zero_point = 184;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[94], attr, VSI_NN_TYPE_UINT8, 4944928, 294912);

    /* @Conv_/model.22/cv3.1/cv3.1.0/conv/Conv_39:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0002651911345310509;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[95], attr, VSI_NN_TYPE_INT32, 4944416, 512);

    /* @Conv_/model.22/cv2.1/cv2.1.0/conv/Conv_108:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 256;
    attr.size[3] = 64;
    attr.dim_num = 4;
    attr.dtype.scale = 0.011274322867393494;
    attr.dtype.zero_point = 144;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[96], attr, VSI_NN_TYPE_UINT8, 4112352, 147456);

    /* @Conv_/model.22/cv2.1/cv2.1.0/conv/Conv_108:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 64;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00025861308677121997;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[97], attr, VSI_NN_TYPE_INT32, 4112096, 256);

    /* @Conv_/model.19/conv/Conv_120:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 256;
    attr.size[3] = 256;
    attr.dim_num = 4;
    attr.dtype.scale = 0.0031178484205156565;
    attr.dtype.zero_point = 135;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[98], attr, VSI_NN_TYPE_UINT8, 1405152, 589824);

    /* @Conv_/model.19/conv/Conv_120:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 256;
    attr.dim_num = 1;
    attr.dtype.scale = 7.151794125093147e-05;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[99], attr, VSI_NN_TYPE_INT32, 1404128, 1024);

    /* @Conv_/model.22/cv3.1/cv3.1.1/conv/Conv_21:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 128;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.06356079876422882;
    attr.dtype.zero_point = 132;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[100], attr, VSI_NN_TYPE_UINT8, 5240352, 147456);

    /* @Conv_/model.22/cv3.1/cv3.1.1/conv/Conv_21:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0024684984236955643;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[101], attr, VSI_NN_TYPE_INT32, 5239840, 512);

    /* @Conv_/model.22/cv2.1/cv2.1.1/conv/Conv_87:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 64;
    attr.size[3] = 64;
    attr.dim_num = 4;
    attr.dtype.scale = 0.02298792451620102;
    attr.dtype.zero_point = 116;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[102], attr, VSI_NN_TYPE_UINT8, 4260064, 36864);

    /* @Conv_/model.22/cv2.1/cv2.1.1/conv/Conv_87:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 64;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0008213362307287753;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[103], attr, VSI_NN_TYPE_INT32, 4259808, 256);

    /* @Conv_/model.21/cv1/conv/Conv_102:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 768;
    attr.size[3] = 512;
    attr.dim_num = 4;
    attr.dtype.scale = 0.011525643989443779;
    attr.dtype.zero_point = 153;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[104], attr, VSI_NN_TYPE_UINT8, 2026464, 393216);

    /* @Conv_/model.21/cv1/conv/Conv_102:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 512;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0004267331678420305;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[105], attr, VSI_NN_TYPE_INT32, 2024416, 2048);

    /* @Conv_/model.22/cv3.1/cv3.1.2/Conv_8:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 128;
    attr.size[3] = 80;
    attr.dim_num = 4;
    attr.dtype.scale = 0.001650582067668438;
    attr.dtype.zero_point = 139;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[106], attr, VSI_NN_TYPE_UINT8, 5388128, 10240);

    /* @Conv_/model.22/cv3.1/cv3.1.2/Conv_8:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 80;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0005080662667751312;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[107], attr, VSI_NN_TYPE_INT32, 5387808, 320);

    /* @Conv_/model.22/cv2.1/cv2.1.2/Conv_68:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 64;
    attr.size[3] = 64;
    attr.dim_num = 4;
    attr.dtype.scale = 0.0028655407950282097;
    attr.dtype.zero_point = 140;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[108], attr, VSI_NN_TYPE_UINT8, 4297184, 4096);

    /* @Conv_/model.22/cv2.1/cv2.1.2/Conv_68:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 64;
    attr.dim_num = 1;
    attr.dtype.scale = 0.000343296182109043;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[109], attr, VSI_NN_TYPE_INT32, 4296928, 256);

    /* @Conv_/model.21/m.0/cv1/conv/Conv_81:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 256;
    attr.size[3] = 256;
    attr.dim_num = 4;
    attr.dtype.scale = 0.005191542208194733;
    attr.dtype.zero_point = 114;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[110], attr, VSI_NN_TYPE_UINT8, 2815968, 589824);

    /* @Conv_/model.21/m.0/cv1/conv/Conv_81:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 256;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0002547959447838366;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[111], attr, VSI_NN_TYPE_INT32, 2814944, 1024);

    /* @Conv_/model.22/dfl/conv_1/Conv_23:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 16;
    attr.size[3] = 1;
    attr.dim_num = 4;
    attr.dtype.scale = 0.05882352963089943;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[112], attr, VSI_NN_TYPE_UINT8, 6147236, 16);

    /* @Conv_/model.22/dfl/conv_1/Conv_23:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00020992150530219078;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[113], attr, VSI_NN_TYPE_INT32, 6147232, 4);

    /* @Conv_/model.21/m.0/cv2/conv/Conv_63:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 256;
    attr.size[3] = 256;
    attr.dim_num = 4;
    attr.dtype.scale = 0.008021012879908085;
    attr.dtype.zero_point = 133;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[114], attr, VSI_NN_TYPE_UINT8, 3406816, 589824);

    /* @Conv_/model.21/m.0/cv2/conv/Conv_63:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 256;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0002533897350076586;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[115], attr, VSI_NN_TYPE_INT32, 3405792, 1024);

    /* @Conv_/model.21/cv2/conv/Conv_45:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 768;
    attr.size[3] = 512;
    attr.dim_num = 4;
    attr.dtype.scale = 0.01113749947398901;
    attr.dtype.zero_point = 163;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[116], attr, VSI_NN_TYPE_UINT8, 2421728, 393216);

    /* @Conv_/model.21/cv2/conv/Conv_45:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 512;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0005466178408823907;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[117], attr, VSI_NN_TYPE_INT32, 2419680, 2048);

    /* @Conv_/model.22/cv3.2/cv3.2.0/conv/Conv_36:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 512;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.005306094419211149;
    attr.dtype.zero_point = 191;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[118], attr, VSI_NN_TYPE_UINT8, 5398880, 589824);

    /* @Conv_/model.22/cv3.2/cv3.2.0/conv/Conv_36:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0002303482760908082;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[119], attr, VSI_NN_TYPE_INT32, 5398368, 512);

    /* @Conv_/model.22/cv2.2/cv2.2.0/conv/Conv_104:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 512;
    attr.size[3] = 64;
    attr.dim_num = 4;
    attr.dtype.scale = 0.005009800661355257;
    attr.dtype.zero_point = 168;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[120], attr, VSI_NN_TYPE_UINT8, 4301536, 294912);

    /* @Conv_/model.22/cv2.2/cv2.2.0/conv/Conv_104:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 64;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0002174855617340654;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[121], attr, VSI_NN_TYPE_INT32, 4301280, 256);

    /* @Conv_/model.22/cv3.2/cv3.2.1/conv/Conv_18:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 128;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.042205940932035446;
    attr.dtype.zero_point = 137;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[122], attr, VSI_NN_TYPE_UINT8, 5989216, 147456);

    /* @Conv_/model.22/cv3.2/cv3.2.1/conv/Conv_18:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0020180284045636654;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[123], attr, VSI_NN_TYPE_INT32, 5988704, 512);

    /* @Conv_/model.22/cv2.2/cv2.2.1/conv/Conv_83:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 64;
    attr.size[3] = 64;
    attr.dim_num = 4;
    attr.dtype.scale = 0.017370320856571198;
    attr.dtype.zero_point = 122;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[124], attr, VSI_NN_TYPE_UINT8, 4596704, 36864);

    /* @Conv_/model.22/cv2.2/cv2.2.1/conv/Conv_83:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 64;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0006029956857673824;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[125], attr, VSI_NN_TYPE_INT32, 4596448, 256);

    /* @Conv_/model.22/cv3.2/cv3.2.2/Conv_6:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 128;
    attr.size[3] = 80;
    attr.dim_num = 4;
    attr.dtype.scale = 0.0017343558138236403;
    attr.dtype.zero_point = 161;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[126], attr, VSI_NN_TYPE_UINT8, 6136992, 10240);

    /* @Conv_/model.22/cv3.2/cv3.2.2/Conv_6:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 80;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0002862937399186194;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[127], attr, VSI_NN_TYPE_INT32, 6136672, 320);

    /* @Conv_/model.22/cv2.2/cv2.2.2/Conv_65:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 64;
    attr.size[3] = 64;
    attr.dim_num = 4;
    attr.dtype.scale = 0.0026692708488553762;
    attr.dtype.zero_point = 141;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[128], attr, VSI_NN_TYPE_UINT8, 4633824, 4096);

    /* @Conv_/model.22/cv2.2/cv2.2.2/Conv_65:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 64;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0002770603750832379;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[129], attr, VSI_NN_TYPE_INT32, 4633568, 256);

    /* @Conv_/model.22/dfl/conv_2/Conv_20:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 16;
    attr.size[3] = 1;
    attr.dim_num = 4;
    attr.dtype.scale = 0.05882352963089943;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[130], attr, VSI_NN_TYPE_UINT8, 6147236, 16);

    /* @Conv_/model.22/dfl/conv_2/Conv_20:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00021095479314681143;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[131], attr, VSI_NN_TYPE_INT32, 6147232, 4);



    /* @Conv_/model.0/conv/Conv_234:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.3839068114757538;
    attr.dtype.zero_point = 146;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[0]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.0/act/Sigmoid_235_Mul_/model.0/act/Mul_233:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.16489075124263763;
    attr.dtype.zero_point = 2;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[1]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.1/conv/Conv_232:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.39811161160469055;
    attr.dtype.zero_point = 136;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[2]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.1/act/Sigmoid_230_Mul_/model.1/act/Mul_229:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.18751302361488342;
    attr.dtype.zero_point = 1;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[3]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.2/cv1/conv/Conv_225:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.2131766378879547;
    attr.dtype.zero_point = 189;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[4]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.2/cv1/act/Sigmoid_226_Mul_/model.2/cv1/act/Mul_222:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.06988012790679932;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[5]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Split_/model.2/Split_217:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.06988012790679932;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[6]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Split_/model.2/Split_217:out1 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.06988012790679932;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[6]->output.tensors[1], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.2/m.0/cv1/conv/Conv_216:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.20112574100494385;
    attr.dtype.zero_point = 142;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[7]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.2/m.0/cv1/act/Sigmoid_211_Mul_/model.2/m.0/cv1/act/Mul_210:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.09013769030570984;
    attr.dtype.zero_point = 3;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[8]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.2/m.0/cv2/conv/Conv_208:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.1777401566505432;
    attr.dtype.zero_point = 157;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[9]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.2/m.0/cv2/act/Sigmoid_209_Mul_/model.2/m.0/cv2/act/Mul_201:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.06949953734874725;
    attr.dtype.zero_point = 4;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[10]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Add_/model.2/m.0/Add_195:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.06988012790679932;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[11]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Concat_/model.2/Concat_190:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.06988012790679932;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[12]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.2/cv2/conv/Conv_189:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.09478683769702911;
    attr.dtype.zero_point = 168;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[13]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.2/cv2/act/Sigmoid_183_Mul_/model.2/cv2/act/Mul_182:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.0334792286157608;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[14]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.3/conv/Conv_176:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.05452747642993927;
    attr.dtype.zero_point = 151;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[15]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.3/act/Sigmoid_177_Mul_/model.3/act/Mul_171:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.023218682035803795;
    attr.dtype.zero_point = 12;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[16]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.4/cv1/conv/Conv_170:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.058137115091085434;
    attr.dtype.zero_point = 133;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[17]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.4/cv1/act/Sigmoid_167_Mul_/model.4/cv1/act/Mul_166:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.04537341743707657;
    attr.dtype.zero_point = 18;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[18]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Split_/model.4/Split_165:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.04537341743707657;
    attr.dtype.zero_point = 18;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[19]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Split_/model.4/Split_165:out1 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.04537341743707657;
    attr.dtype.zero_point = 18;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[19]->output.tensors[1], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.4/m.0/cv1/conv/Conv_164:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.054924171417951584;
    attr.dtype.zero_point = 144;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[20]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.4/m.0/cv1/act/Sigmoid_157_Mul_/model.4/m.0/cv1/act/Mul_156:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.02488475665450096;
    attr.dtype.zero_point = 11;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[21]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.4/m.0/cv2/conv/Conv_147:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.04730986803770065;
    attr.dtype.zero_point = 143;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[22]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.4/m.0/cv2/act/Sigmoid_148_Mul_/model.4/m.0/cv2/act/Mul_139:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.021763840690255165;
    attr.dtype.zero_point = 13;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[23]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Add_/model.4/m.0/Add_138:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.04537341743707657;
    attr.dtype.zero_point = 18;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[24]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.4/m.1/cv1/conv/Conv_158:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.05039508640766144;
    attr.dtype.zero_point = 166;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[25]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.4/m.1/cv1/act/Sigmoid_159_Mul_/model.4/m.1/cv1/act/Mul_151:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.01847151666879654;
    attr.dtype.zero_point = 15;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[26]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.4/m.1/cv2/conv/Conv_149:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.08007447421550751;
    attr.dtype.zero_point = 157;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[27]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.4/m.1/cv2/act/Sigmoid_150_Mul_/model.4/m.1/cv2/act/Mul_140:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.032005373388528824;
    attr.dtype.zero_point = 9;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[28]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Add_/model.4/m.1/Add_132:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.04537341743707657;
    attr.dtype.zero_point = 18;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[29]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Concat_/model.4/Concat_131:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.04537341743707657;
    attr.dtype.zero_point = 18;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[30]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.4/cv2/conv/Conv_129:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.08665144443511963;
    attr.dtype.zero_point = 131;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[31]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.4/cv2/act/Sigmoid_130_Mul_/model.4/cv2/act/Mul_119:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.04328920692205429;
    attr.dtype.zero_point = 6;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[32]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.5/conv/Conv_231:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.07072468101978302;
    attr.dtype.zero_point = 152;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[33]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.5/act/Sigmoid_228_Mul_/model.5/act/Mul_227:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.0296691432595253;
    attr.dtype.zero_point = 9;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[34]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.6/cv1/conv/Conv_223:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.08528325706720352;
    attr.dtype.zero_point = 141;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[35]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.6/cv1/act/Sigmoid_224_Mul_/model.6/cv1/act/Mul_221:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.04557189717888832;
    attr.dtype.zero_point = 18;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[36]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Split_/model.6/Split_219:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.04557189717888832;
    attr.dtype.zero_point = 18;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[37]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Split_/model.6/Split_219:out1 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.04557189717888832;
    attr.dtype.zero_point = 18;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[37]->output.tensors[1], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.6/m.0/cv1/conv/Conv_218:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.049824200570583344;
    attr.dtype.zero_point = 145;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[38]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.6/m.0/cv1/act/Sigmoid_213_Mul_/model.6/m.0/cv1/act/Mul_212:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.022426195442676544;
    attr.dtype.zero_point = 12;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[39]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.6/m.0/cv2/conv/Conv_204:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.04627818241715431;
    attr.dtype.zero_point = 138;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[40]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.6/m.0/cv2/act/Sigmoid_205_Mul_/model.6/m.0/cv2/act/Mul_199:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.022166380658745766;
    attr.dtype.zero_point = 13;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[41]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Add_/model.6/m.0/Add_198:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.04557189717888832;
    attr.dtype.zero_point = 18;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[42]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.6/m.1/cv1/conv/Conv_220:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.05850130692124367;
    attr.dtype.zero_point = 151;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[43]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.6/m.1/cv1/act/Sigmoid_215_Mul_/model.6/m.1/cv1/act/Mul_214:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.02494264766573906;
    attr.dtype.zero_point = 11;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[44]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.6/m.1/cv2/conv/Conv_206:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.09224454313516617;
    attr.dtype.zero_point = 142;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[45]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.6/m.1/cv2/act/Sigmoid_207_Mul_/model.6/m.1/cv2/act/Mul_200:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.04204745963215828;
    attr.dtype.zero_point = 7;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[46]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Add_/model.6/m.1/Add_194:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.04557189717888832;
    attr.dtype.zero_point = 18;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[47]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Concat_/model.6/Concat_193:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.04557189717888832;
    attr.dtype.zero_point = 18;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[48]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.6/cv2/conv/Conv_187:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.0678265169262886;
    attr.dtype.zero_point = 120;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[49]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.6/cv2/act/Sigmoid_188_Mul_/model.6/cv2/act/Mul_181:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.03702466934919357;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[50]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.7/conv/Conv_202:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.07208669185638428;
    attr.dtype.zero_point = 134;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[51]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.7/act/Sigmoid_203_Mul_/model.7/act/Mul_197:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.035268351435661316;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[52]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.8/cv1/conv/Conv_196:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.0662023276090622;
    attr.dtype.zero_point = 124;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[53]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.8/cv1/act/Sigmoid_192_Mul_/model.8/cv1/act/Mul_191:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.04418688267469406;
    attr.dtype.zero_point = 13;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[54]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Split_/model.8/Split_185:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.04418688267469406;
    attr.dtype.zero_point = 13;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[55]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Split_/model.8/Split_185:out1 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.04418688267469406;
    attr.dtype.zero_point = 13;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[55]->output.tensors[1], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.8/m.0/cv1/conv/Conv_184:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.06928715109825134;
    attr.dtype.zero_point = 148;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[56]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.8/m.0/cv1/act/Sigmoid_179_Mul_/model.8/m.0/cv1/act/Mul_178:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.03018062748014927;
    attr.dtype.zero_point = 9;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[57]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.8/m.0/cv2/conv/Conv_172:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.08739134669303894;
    attr.dtype.zero_point = 131;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[58]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.8/m.0/cv2/act/Sigmoid_173_Mul_/model.8/m.0/cv2/act/Mul_168:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.04369267448782921;
    attr.dtype.zero_point = 6;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[59]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Add_/model.8/m.0/Add_161:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.04418688267469406;
    attr.dtype.zero_point = 13;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[60]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Concat_/model.8/Concat_160:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.04418688267469406;
    attr.dtype.zero_point = 13;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[61]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.8/cv2/conv/Conv_152:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.06339295953512192;
    attr.dtype.zero_point = 148;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[62]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.8/cv2/act/Sigmoid_153_Mul_/model.8/cv2/act/Mul_144:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.027681568637490273;
    attr.dtype.zero_point = 10;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[63]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.9/cv1/conv/Conv_143:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.04305392876267433;
    attr.dtype.zero_point = 105;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[64]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.9/cv1/act/Sigmoid_142_Mul_/model.9/cv1/act/Mul_141:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.026389170438051224;
    attr.dtype.zero_point = 11;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[65]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @MaxPool_/model.9/m/MaxPool_136:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.026389170438051224;
    attr.dtype.zero_point = 11;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[66]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @MaxPool_/model.9/m_1/MaxPool_135:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.026389170438051224;
    attr.dtype.zero_point = 11;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[67]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @MaxPool_/model.9/m_2/MaxPool_134:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.026389170438051224;
    attr.dtype.zero_point = 11;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[68]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Concat_/model.9/Concat_133:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.026389170438051224;
    attr.dtype.zero_point = 11;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[69]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.9/cv2/conv/Conv_122:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.05083725228905678;
    attr.dtype.zero_point = 123;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[70]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.9/cv2/act/Sigmoid_123_Mul_/model.9/cv2/act/Mul_115:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.03702466934919357;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[71]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Resize_/model.10/Resize_186:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.03702466934919357;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[72]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Concat_/model.11/Concat_180:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.03702466934919357;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[73]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.12/cv1/conv/Conv_174:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.06127885356545448;
    attr.dtype.zero_point = 131;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[74]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.12/cv1/act/Sigmoid_175_Mul_/model.12/cv1/act/Mul_169:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.033807478845119476;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[75]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Split_/model.12/Split_163:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.033807478845119476;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[76]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Split_/model.12/Split_163:out1 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.033807478845119476;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[76]->output.tensors[1], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.12/m.0/cv1/conv/Conv_162:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.054343368858098984;
    attr.dtype.zero_point = 142;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[77]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.12/m.0/cv1/act/Sigmoid_155_Mul_/model.12/m.0/cv1/act/Mul_154:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.02513127028942108;
    attr.dtype.zero_point = 11;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[78]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.12/m.0/cv2/conv/Conv_145:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.06195290759205818;
    attr.dtype.zero_point = 120;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[79]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.12/m.0/cv2/act/Sigmoid_146_Mul_/model.12/m.0/cv2/act/Mul_137:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.033807478845119476;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[80]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Concat_/model.12/Concat_128:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.033807478845119476;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[81]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.12/cv2/conv/Conv_126:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.061857808381319046;
    attr.dtype.zero_point = 147;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[82]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.12/cv2/act/Sigmoid_127_Mul_/model.12/cv2/act/Mul_117:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.04328920692205429;
    attr.dtype.zero_point = 6;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[83]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Resize_/model.13/Resize_118:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.04328920692205429;
    attr.dtype.zero_point = 6;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[84]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Concat_/model.14/Concat_113:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.04328920692205429;
    attr.dtype.zero_point = 6;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[85]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.15/cv1/conv/Conv_110:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.04140770062804222;
    attr.dtype.zero_point = 180;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[86]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.15/cv1/act/Sigmoid_111_Mul_/model.15/cv1/act/Mul_99:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.02209821529686451;
    attr.dtype.zero_point = 13;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[87]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Split_/model.15/Split_90:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.02209821529686451;
    attr.dtype.zero_point = 13;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[88]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Split_/model.15/Split_90:out1 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.02209821529686451;
    attr.dtype.zero_point = 13;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[88]->output.tensors[1], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.15/m.0/cv1/conv/Conv_89:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.036029089242219925;
    attr.dtype.zero_point = 158;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[89]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.15/m.0/cv1/act/Sigmoid_79_Mul_/model.15/m.0/cv1/act/Mul_78:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.01440912950783968;
    attr.dtype.zero_point = 19;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[90]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.15/m.0/cv2/conv/Conv_69:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.05221239849925041;
    attr.dtype.zero_point = 152;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[91]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.15/m.0/cv2/act/Sigmoid_70_Mul_/model.15/m.0/cv2/act/Mul_61:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.02209821529686451;
    attr.dtype.zero_point = 13;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[92]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Concat_/model.15/Concat_60:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.02209821529686451;
    attr.dtype.zero_point = 13;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[93]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.15/cv2/conv/Conv_51:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.04577196016907692;
    attr.dtype.zero_point = 172;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[94]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.15/cv2/act/Sigmoid_52_Mul_/model.15/cv2/act/Mul_43:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.015594744123518467;
    attr.dtype.zero_point = 18;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[95]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.22/cv3.0/cv3.0.0/conv/Conv_42:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.06699047237634659;
    attr.dtype.zero_point = 132;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[96]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.22/cv2.0/cv2.0.0/conv/Conv_112:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.07008891552686691;
    attr.dtype.zero_point = 170;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[97]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.16/conv/Conv_124:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.055546630173921585;
    attr.dtype.zero_point = 149;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[98]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.22/cv3.0/cv3.0.0/act/Sigmoid_34_Mul_/model.22/cv3.0/cv3.0.0/act/Mul_33:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.03338317200541496;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[99]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.22/cv2.0/cv2.0.0/act/Sigmoid_101_Mul_/model.22/cv2.0/cv2.0.0/act/Mul_100:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.02452703006565571;
    attr.dtype.zero_point = 11;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[100]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.16/act/Sigmoid_125_Mul_/model.16/act/Mul_116:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.04328920692205429;
    attr.dtype.zero_point = 6;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[101]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.22/cv3.0/cv3.0.1/conv/Conv_24:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.2693323791027069;
    attr.dtype.zero_point = 155;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[102]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.22/cv2.0/cv2.0.1/conv/Conv_91:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.18308380246162415;
    attr.dtype.zero_point = 109;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[103]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Concat_/model.17/Concat_109:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.04328920692205429;
    attr.dtype.zero_point = 6;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[104]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.22/cv3.0/cv3.0.1/act/Sigmoid_25_Mul_/model.22/cv3.0/cv3.0.1/act/Mul_16:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.1071949228644371;
    attr.dtype.zero_point = 3;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[105]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.22/cv2.0/cv2.0.1/act/Sigmoid_92_Mul_/model.22/cv2.0/cv2.0.1/act/Mul_80:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.106069415807724;
    attr.dtype.zero_point = 3;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[106]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.18/cv1/conv/Conv_106:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.05388246104121208;
    attr.dtype.zero_point = 138;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[107]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.22/cv2.0/cv2.0.2/Conv_71:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.06792028248310089;
    attr.dtype.zero_point = 49;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[109]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.18/cv1/act/Sigmoid_107_Mul_/model.18/cv1/act/Mul_96:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.037048179656267166;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[110]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Reshape_/model.22/dfl/Reshape_53:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.06792028248310089;
    attr.dtype.zero_point = 49;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[111]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Split_/model.18/Split_86:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.037048179656267166;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[112]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Split_/model.18/Split_86:out1 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.037048179656267166;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[112]->output.tensors[1], attr, VSI_NN_TYPE_UINT8);

    /* @Softmax_/model.22/dfl/Softmax_35_acuity_mark_perm_52:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.06792028248310089;
    attr.dtype.zero_point = 49;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[113]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.18/m.0/cv1/conv/Conv_85:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.03992032632231712;
    attr.dtype.zero_point = 157;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[114]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Softmax_/model.22/dfl/Softmax_35:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.0036231272388249636;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[115]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.18/m.0/cv1/act/Sigmoid_76_Mul_/model.18/m.0/cv1/act/Mul_75:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.01616740971803665;
    attr.dtype.zero_point = 17;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[116]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.22/dfl/conv/Conv_26:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.043258186429739;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[117]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.18/m.0/cv2/conv/Conv_66:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.07756969332695007;
    attr.dtype.zero_point = 137;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[118]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.18/m.0/cv2/act/Sigmoid_67_Mul_/model.18/m.0/cv2/act/Mul_58:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.037048179656267166;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[120]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Concat_/model.18/Concat_57:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.037048179656267166;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[121]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.18/cv2/conv/Conv_48:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.09857934713363647;
    attr.dtype.zero_point = 198;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[122]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.18/cv2/act/Sigmoid_49_Mul_/model.18/cv2/act/Mul_40:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.022938236594200134;
    attr.dtype.zero_point = 12;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[123]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.22/cv3.1/cv3.1.0/conv/Conv_39:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.08291693031787872;
    attr.dtype.zero_point = 139;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[124]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.22/cv2.1/cv2.1.0/conv/Conv_108:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.07936957478523254;
    attr.dtype.zero_point = 144;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[125]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.19/conv/Conv_120:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.054079797118902206;
    attr.dtype.zero_point = 145;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[126]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.22/cv3.1/cv3.1.0/act/Sigmoid_31_Mul_/model.22/cv3.1/cv3.1.0/act/Mul_30:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.03883680701255798;
    attr.dtype.zero_point = 7;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[127]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.22/cv2.1/cv2.1.0/act/Sigmoid_98_Mul_/model.22/cv2.1/cv2.1.0/act/Mul_97:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.03572902828454971;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[128]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.19/act/Sigmoid_121_Mul_/model.19/act/Mul_114:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.03702466934919357;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[129]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.22/cv3.1/cv3.1.1/conv/Conv_21:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.4203820526599884;
    attr.dtype.zero_point = 69;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[130]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.22/cv2.1/cv2.1.1/conv/Conv_87:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.16927842795848846;
    attr.dtype.zero_point = 76;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[131]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Concat_/model.20/Concat_105:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.03702466934919357;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[132]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.22/cv3.1/cv3.1.1/act/Sigmoid_22_Mul_/model.22/cv3.1/cv3.1.1/act/Mul_14:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.30781036615371704;
    attr.dtype.zero_point = 1;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[133]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.22/cv2.1/cv2.1.1/act/Sigmoid_88_Mul_/model.22/cv2.1/cv2.1.1/act/Mul_77:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.11980152875185013;
    attr.dtype.zero_point = 2;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[134]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.21/cv1/conv/Conv_102:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.06435767561197281;
    attr.dtype.zero_point = 149;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[135]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.22/cv2.1/cv2.1.2/Conv_68:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.06314821541309357;
    attr.dtype.zero_point = 77;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[137]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.21/cv1/act/Sigmoid_103_Mul_/model.21/cv1/act/Mul_93:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.0490790456533432;
    attr.dtype.zero_point = 6;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[138]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Reshape_/model.22/dfl_1/Reshape_50:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.06314821541309357;
    attr.dtype.zero_point = 77;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[139]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Split_/model.21/Split_82:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.0490790456533432;
    attr.dtype.zero_point = 6;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[140]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Split_/model.21/Split_82:out1 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.0490790456533432;
    attr.dtype.zero_point = 6;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[140]->output.tensors[1], attr, VSI_NN_TYPE_UINT8);

    /* @Softmax_/model.22/dfl_1/Softmax_32_acuity_mark_perm_49:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.06314821541309357;
    attr.dtype.zero_point = 77;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[141]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.21/m.0/cv1/conv/Conv_81:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.06683055311441422;
    attr.dtype.zero_point = 139;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[142]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Softmax_/model.22/dfl_1/Softmax_32:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.0035686655901372433;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[143]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.21/m.0/cv1/act/Sigmoid_73_Mul_/model.21/m.0/cv1/act/Mul_72:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.031590741127729416;
    attr.dtype.zero_point = 9;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[144]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.22/dfl/conv_1/Conv_23:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.047095250338315964;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[145]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.21/m.0/cv2/conv/Conv_63:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.10561007261276245;
    attr.dtype.zero_point = 139;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[146]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.21/m.0/cv2/act/Sigmoid_64_Mul_/model.21/m.0/cv2/act/Mul_55:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.0490790456533432;
    attr.dtype.zero_point = 6;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[148]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Concat_/model.21/Concat_54:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.0490790456533432;
    attr.dtype.zero_point = 6;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[149]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.21/cv2/conv/Conv_45:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.10728982836008072;
    attr.dtype.zero_point = 154;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[150]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.21/cv2/act/Sigmoid_46_Mul_/model.21/cv2/act/Mul_37:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.043412018567323685;
    attr.dtype.zero_point = 6;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[151]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.22/cv3.2/cv3.2.0/conv/Conv_36:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.13675127923488617;
    attr.dtype.zero_point = 168;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[152]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.22/cv2.2/cv2.2.0/conv/Conv_104:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.07407645136117935;
    attr.dtype.zero_point = 139;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[153]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.22/cv3.2/cv3.2.0/act/Sigmoid_28_Mul_/model.22/cv3.2/cv3.2.0/act/Mul_27:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.04781384766101837;
    attr.dtype.zero_point = 6;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[154]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.22/cv2.2/cv2.2.0/act/Sigmoid_95_Mul_/model.22/cv2.2/cv2.2.0/act/Mul_94:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.03471413627266884;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[155]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.22/cv3.2/cv3.2.1/conv/Conv_18:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.3235876262187958;
    attr.dtype.zero_point = 126;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[156]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.22/cv2.2/cv2.2.1/conv/Conv_83:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.14495281875133514;
    attr.dtype.zero_point = 74;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[157]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.22/cv3.2/cv3.2.1/act/Sigmoid_19_Mul_/model.22/cv3.2/cv3.2.1/act/Mul_12:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.16507209837436676;
    attr.dtype.zero_point = 2;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[158]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/model.22/cv2.2/cv2.2.1/act/Sigmoid_84_Mul_/model.22/cv2.2/cv2.2.1/act/Mul_74:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.10379627346992493;
    attr.dtype.zero_point = 3;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[159]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.22/cv2.2/cv2.2.2/Conv_65:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.06516066193580627;
    attr.dtype.zero_point = 61;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[161]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Reshape_/model.22/dfl_2/Reshape_47:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.06516066193580627;
    attr.dtype.zero_point = 61;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[162]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Softmax_/model.22/dfl_2/Softmax_29_acuity_mark_perm_46:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.06516066193580627;
    attr.dtype.zero_point = 61;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[163]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Softmax_/model.22/dfl_2/Softmax_29:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.0035862314980477095;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[164]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/model.22/dfl/conv_2/Conv_20:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.048695433884859085;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[165]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);



/*-----------------------------------------
  Connection initialize
 -----------------------------------------*/
    node[0]->input.tensors[0] = norm_tensor[6];
    node[108]->output.tensors[0] = norm_tensor[1];
    node[119]->output.tensors[0] = norm_tensor[0];
    node[136]->output.tensors[0] = norm_tensor[3];
    node[147]->output.tensors[0] = norm_tensor[2];
    node[160]->output.tensors[0] = norm_tensor[5];
    node[166]->output.tensors[0] = norm_tensor[4];

    /* Conv_/model.0/conv/Conv_234 */
    node[0]->input.tensors[1] = const_tensor[0]; /* data_weight */
    node[0]->input.tensors[2] = const_tensor[1]; /* data_bias */

    /* Sigmoid_/model.0/act/Sigmoid_235_Mul_/model.0/act/Mul_233 */
    node[1]->input.tensors[0] = node[0]->output.tensors[0];

    /* Conv_/model.1/conv/Conv_232 */
    node[2]->input.tensors[0] = node[1]->output.tensors[0];
    node[2]->input.tensors[1] = const_tensor[2]; /* data_weight */
    node[2]->input.tensors[2] = const_tensor[3]; /* data_bias */

    /* Sigmoid_/model.1/act/Sigmoid_230_Mul_/model.1/act/Mul_229 */
    node[3]->input.tensors[0] = node[2]->output.tensors[0];

    /* Conv_/model.2/cv1/conv/Conv_225 */
    node[4]->input.tensors[0] = node[3]->output.tensors[0];
    node[4]->input.tensors[1] = const_tensor[4]; /* data_weight */
    node[4]->input.tensors[2] = const_tensor[5]; /* data_bias */

    /* Sigmoid_/model.2/cv1/act/Sigmoid_226_Mul_/model.2/cv1/act/Mul_222 */
    node[5]->input.tensors[0] = node[4]->output.tensors[0];

    /* Split_/model.2/Split_217 */
    node[6]->input.tensors[0] = node[5]->output.tensors[0];

    /* Conv_/model.2/m.0/cv1/conv/Conv_216 */
    node[7]->input.tensors[0] = node[6]->output.tensors[1];
    node[7]->input.tensors[1] = const_tensor[6]; /* data_weight */
    node[7]->input.tensors[2] = const_tensor[7]; /* data_bias */

    /* Sigmoid_/model.2/m.0/cv1/act/Sigmoid_211_Mul_/model.2/m.0/cv1/act/Mul_210 */
    node[8]->input.tensors[0] = node[7]->output.tensors[0];

    /* Conv_/model.2/m.0/cv2/conv/Conv_208 */
    node[9]->input.tensors[0] = node[8]->output.tensors[0];
    node[9]->input.tensors[1] = const_tensor[8]; /* data_weight */
    node[9]->input.tensors[2] = const_tensor[9]; /* data_bias */

    /* Sigmoid_/model.2/m.0/cv2/act/Sigmoid_209_Mul_/model.2/m.0/cv2/act/Mul_201 */
    node[10]->input.tensors[0] = node[9]->output.tensors[0];

    /* Add_/model.2/m.0/Add_195 */
    node[11]->input.tensors[0] = node[6]->output.tensors[1];
    node[11]->input.tensors[1] = node[10]->output.tensors[0];

    /* Concat_/model.2/Concat_190 */
    node[12]->input.tensors[0] = node[6]->output.tensors[0];
    node[12]->input.tensors[1] = node[6]->output.tensors[1];
    node[12]->input.tensors[2] = node[11]->output.tensors[0];

    /* Conv_/model.2/cv2/conv/Conv_189 */
    node[13]->input.tensors[0] = node[12]->output.tensors[0];
    node[13]->input.tensors[1] = const_tensor[10]; /* data_weight */
    node[13]->input.tensors[2] = const_tensor[11]; /* data_bias */

    /* Sigmoid_/model.2/cv2/act/Sigmoid_183_Mul_/model.2/cv2/act/Mul_182 */
    node[14]->input.tensors[0] = node[13]->output.tensors[0];

    /* Conv_/model.3/conv/Conv_176 */
    node[15]->input.tensors[0] = node[14]->output.tensors[0];
    node[15]->input.tensors[1] = const_tensor[12]; /* data_weight */
    node[15]->input.tensors[2] = const_tensor[13]; /* data_bias */

    /* Sigmoid_/model.3/act/Sigmoid_177_Mul_/model.3/act/Mul_171 */
    node[16]->input.tensors[0] = node[15]->output.tensors[0];

    /* Conv_/model.4/cv1/conv/Conv_170 */
    node[17]->input.tensors[0] = node[16]->output.tensors[0];
    node[17]->input.tensors[1] = const_tensor[14]; /* data_weight */
    node[17]->input.tensors[2] = const_tensor[15]; /* data_bias */

    /* Sigmoid_/model.4/cv1/act/Sigmoid_167_Mul_/model.4/cv1/act/Mul_166 */
    node[18]->input.tensors[0] = node[17]->output.tensors[0];

    /* Split_/model.4/Split_165 */
    node[19]->input.tensors[0] = node[18]->output.tensors[0];

    /* Conv_/model.4/m.0/cv1/conv/Conv_164 */
    node[20]->input.tensors[0] = node[19]->output.tensors[1];
    node[20]->input.tensors[1] = const_tensor[16]; /* data_weight */
    node[20]->input.tensors[2] = const_tensor[17]; /* data_bias */

    /* Sigmoid_/model.4/m.0/cv1/act/Sigmoid_157_Mul_/model.4/m.0/cv1/act/Mul_156 */
    node[21]->input.tensors[0] = node[20]->output.tensors[0];

    /* Conv_/model.4/m.0/cv2/conv/Conv_147 */
    node[22]->input.tensors[0] = node[21]->output.tensors[0];
    node[22]->input.tensors[1] = const_tensor[18]; /* data_weight */
    node[22]->input.tensors[2] = const_tensor[19]; /* data_bias */

    /* Sigmoid_/model.4/m.0/cv2/act/Sigmoid_148_Mul_/model.4/m.0/cv2/act/Mul_139 */
    node[23]->input.tensors[0] = node[22]->output.tensors[0];

    /* Add_/model.4/m.0/Add_138 */
    node[24]->input.tensors[0] = node[19]->output.tensors[1];
    node[24]->input.tensors[1] = node[23]->output.tensors[0];

    /* Conv_/model.4/m.1/cv1/conv/Conv_158 */
    node[25]->input.tensors[0] = node[24]->output.tensors[0];
    node[25]->input.tensors[1] = const_tensor[20]; /* data_weight */
    node[25]->input.tensors[2] = const_tensor[21]; /* data_bias */

    /* Sigmoid_/model.4/m.1/cv1/act/Sigmoid_159_Mul_/model.4/m.1/cv1/act/Mul_151 */
    node[26]->input.tensors[0] = node[25]->output.tensors[0];

    /* Conv_/model.4/m.1/cv2/conv/Conv_149 */
    node[27]->input.tensors[0] = node[26]->output.tensors[0];
    node[27]->input.tensors[1] = const_tensor[22]; /* data_weight */
    node[27]->input.tensors[2] = const_tensor[23]; /* data_bias */

    /* Sigmoid_/model.4/m.1/cv2/act/Sigmoid_150_Mul_/model.4/m.1/cv2/act/Mul_140 */
    node[28]->input.tensors[0] = node[27]->output.tensors[0];

    /* Add_/model.4/m.1/Add_132 */
    node[29]->input.tensors[0] = node[24]->output.tensors[0];
    node[29]->input.tensors[1] = node[28]->output.tensors[0];

    /* Concat_/model.4/Concat_131 */
    node[30]->input.tensors[0] = node[19]->output.tensors[0];
    node[30]->input.tensors[1] = node[19]->output.tensors[1];
    node[30]->input.tensors[2] = node[24]->output.tensors[0];
    node[30]->input.tensors[3] = node[29]->output.tensors[0];

    /* Conv_/model.4/cv2/conv/Conv_129 */
    node[31]->input.tensors[0] = node[30]->output.tensors[0];
    node[31]->input.tensors[1] = const_tensor[24]; /* data_weight */
    node[31]->input.tensors[2] = const_tensor[25]; /* data_bias */

    /* Sigmoid_/model.4/cv2/act/Sigmoid_130_Mul_/model.4/cv2/act/Mul_119 */
    node[32]->input.tensors[0] = node[31]->output.tensors[0];

    /* Conv_/model.5/conv/Conv_231 */
    node[33]->input.tensors[0] = node[32]->output.tensors[0];
    node[33]->input.tensors[1] = const_tensor[26]; /* data_weight */
    node[33]->input.tensors[2] = const_tensor[27]; /* data_bias */

    /* Sigmoid_/model.5/act/Sigmoid_228_Mul_/model.5/act/Mul_227 */
    node[34]->input.tensors[0] = node[33]->output.tensors[0];

    /* Conv_/model.6/cv1/conv/Conv_223 */
    node[35]->input.tensors[0] = node[34]->output.tensors[0];
    node[35]->input.tensors[1] = const_tensor[28]; /* data_weight */
    node[35]->input.tensors[2] = const_tensor[29]; /* data_bias */

    /* Sigmoid_/model.6/cv1/act/Sigmoid_224_Mul_/model.6/cv1/act/Mul_221 */
    node[36]->input.tensors[0] = node[35]->output.tensors[0];

    /* Split_/model.6/Split_219 */
    node[37]->input.tensors[0] = node[36]->output.tensors[0];

    /* Conv_/model.6/m.0/cv1/conv/Conv_218 */
    node[38]->input.tensors[0] = node[37]->output.tensors[1];
    node[38]->input.tensors[1] = const_tensor[30]; /* data_weight */
    node[38]->input.tensors[2] = const_tensor[31]; /* data_bias */

    /* Sigmoid_/model.6/m.0/cv1/act/Sigmoid_213_Mul_/model.6/m.0/cv1/act/Mul_212 */
    node[39]->input.tensors[0] = node[38]->output.tensors[0];

    /* Conv_/model.6/m.0/cv2/conv/Conv_204 */
    node[40]->input.tensors[0] = node[39]->output.tensors[0];
    node[40]->input.tensors[1] = const_tensor[32]; /* data_weight */
    node[40]->input.tensors[2] = const_tensor[33]; /* data_bias */

    /* Sigmoid_/model.6/m.0/cv2/act/Sigmoid_205_Mul_/model.6/m.0/cv2/act/Mul_199 */
    node[41]->input.tensors[0] = node[40]->output.tensors[0];

    /* Add_/model.6/m.0/Add_198 */
    node[42]->input.tensors[0] = node[37]->output.tensors[1];
    node[42]->input.tensors[1] = node[41]->output.tensors[0];

    /* Conv_/model.6/m.1/cv1/conv/Conv_220 */
    node[43]->input.tensors[0] = node[42]->output.tensors[0];
    node[43]->input.tensors[1] = const_tensor[34]; /* data_weight */
    node[43]->input.tensors[2] = const_tensor[35]; /* data_bias */

    /* Sigmoid_/model.6/m.1/cv1/act/Sigmoid_215_Mul_/model.6/m.1/cv1/act/Mul_214 */
    node[44]->input.tensors[0] = node[43]->output.tensors[0];

    /* Conv_/model.6/m.1/cv2/conv/Conv_206 */
    node[45]->input.tensors[0] = node[44]->output.tensors[0];
    node[45]->input.tensors[1] = const_tensor[36]; /* data_weight */
    node[45]->input.tensors[2] = const_tensor[37]; /* data_bias */

    /* Sigmoid_/model.6/m.1/cv2/act/Sigmoid_207_Mul_/model.6/m.1/cv2/act/Mul_200 */
    node[46]->input.tensors[0] = node[45]->output.tensors[0];

    /* Add_/model.6/m.1/Add_194 */
    node[47]->input.tensors[0] = node[42]->output.tensors[0];
    node[47]->input.tensors[1] = node[46]->output.tensors[0];

    /* Concat_/model.6/Concat_193 */
    node[48]->input.tensors[0] = node[37]->output.tensors[0];
    node[48]->input.tensors[1] = node[37]->output.tensors[1];
    node[48]->input.tensors[2] = node[42]->output.tensors[0];
    node[48]->input.tensors[3] = node[47]->output.tensors[0];

    /* Conv_/model.6/cv2/conv/Conv_187 */
    node[49]->input.tensors[0] = node[48]->output.tensors[0];
    node[49]->input.tensors[1] = const_tensor[38]; /* data_weight */
    node[49]->input.tensors[2] = const_tensor[39]; /* data_bias */

    /* Sigmoid_/model.6/cv2/act/Sigmoid_188_Mul_/model.6/cv2/act/Mul_181 */
    node[50]->input.tensors[0] = node[49]->output.tensors[0];

    /* Conv_/model.7/conv/Conv_202 */
    node[51]->input.tensors[0] = node[50]->output.tensors[0];
    node[51]->input.tensors[1] = const_tensor[40]; /* data_weight */
    node[51]->input.tensors[2] = const_tensor[41]; /* data_bias */

    /* Sigmoid_/model.7/act/Sigmoid_203_Mul_/model.7/act/Mul_197 */
    node[52]->input.tensors[0] = node[51]->output.tensors[0];

    /* Conv_/model.8/cv1/conv/Conv_196 */
    node[53]->input.tensors[0] = node[52]->output.tensors[0];
    node[53]->input.tensors[1] = const_tensor[42]; /* data_weight */
    node[53]->input.tensors[2] = const_tensor[43]; /* data_bias */

    /* Sigmoid_/model.8/cv1/act/Sigmoid_192_Mul_/model.8/cv1/act/Mul_191 */
    node[54]->input.tensors[0] = node[53]->output.tensors[0];

    /* Split_/model.8/Split_185 */
    node[55]->input.tensors[0] = node[54]->output.tensors[0];

    /* Conv_/model.8/m.0/cv1/conv/Conv_184 */
    node[56]->input.tensors[0] = node[55]->output.tensors[1];
    node[56]->input.tensors[1] = const_tensor[44]; /* data_weight */
    node[56]->input.tensors[2] = const_tensor[45]; /* data_bias */

    /* Sigmoid_/model.8/m.0/cv1/act/Sigmoid_179_Mul_/model.8/m.0/cv1/act/Mul_178 */
    node[57]->input.tensors[0] = node[56]->output.tensors[0];

    /* Conv_/model.8/m.0/cv2/conv/Conv_172 */
    node[58]->input.tensors[0] = node[57]->output.tensors[0];
    node[58]->input.tensors[1] = const_tensor[46]; /* data_weight */
    node[58]->input.tensors[2] = const_tensor[47]; /* data_bias */

    /* Sigmoid_/model.8/m.0/cv2/act/Sigmoid_173_Mul_/model.8/m.0/cv2/act/Mul_168 */
    node[59]->input.tensors[0] = node[58]->output.tensors[0];

    /* Add_/model.8/m.0/Add_161 */
    node[60]->input.tensors[0] = node[55]->output.tensors[1];
    node[60]->input.tensors[1] = node[59]->output.tensors[0];

    /* Concat_/model.8/Concat_160 */
    node[61]->input.tensors[0] = node[55]->output.tensors[0];
    node[61]->input.tensors[1] = node[55]->output.tensors[1];
    node[61]->input.tensors[2] = node[60]->output.tensors[0];

    /* Conv_/model.8/cv2/conv/Conv_152 */
    node[62]->input.tensors[0] = node[61]->output.tensors[0];
    node[62]->input.tensors[1] = const_tensor[48]; /* data_weight */
    node[62]->input.tensors[2] = const_tensor[49]; /* data_bias */

    /* Sigmoid_/model.8/cv2/act/Sigmoid_153_Mul_/model.8/cv2/act/Mul_144 */
    node[63]->input.tensors[0] = node[62]->output.tensors[0];

    /* Conv_/model.9/cv1/conv/Conv_143 */
    node[64]->input.tensors[0] = node[63]->output.tensors[0];
    node[64]->input.tensors[1] = const_tensor[50]; /* data_weight */
    node[64]->input.tensors[2] = const_tensor[51]; /* data_bias */

    /* Sigmoid_/model.9/cv1/act/Sigmoid_142_Mul_/model.9/cv1/act/Mul_141 */
    node[65]->input.tensors[0] = node[64]->output.tensors[0];

    /* MaxPool_/model.9/m/MaxPool_136 */
    node[66]->input.tensors[0] = node[65]->output.tensors[0];

    /* MaxPool_/model.9/m_1/MaxPool_135 */
    node[67]->input.tensors[0] = node[66]->output.tensors[0];

    /* MaxPool_/model.9/m_2/MaxPool_134 */
    node[68]->input.tensors[0] = node[67]->output.tensors[0];

    /* Concat_/model.9/Concat_133 */
    node[69]->input.tensors[0] = node[65]->output.tensors[0];
    node[69]->input.tensors[1] = node[66]->output.tensors[0];
    node[69]->input.tensors[2] = node[67]->output.tensors[0];
    node[69]->input.tensors[3] = node[68]->output.tensors[0];

    /* Conv_/model.9/cv2/conv/Conv_122 */
    node[70]->input.tensors[0] = node[69]->output.tensors[0];
    node[70]->input.tensors[1] = const_tensor[52]; /* data_weight */
    node[70]->input.tensors[2] = const_tensor[53]; /* data_bias */

    /* Sigmoid_/model.9/cv2/act/Sigmoid_123_Mul_/model.9/cv2/act/Mul_115 */
    node[71]->input.tensors[0] = node[70]->output.tensors[0];

    /* Resize_/model.10/Resize_186 */
    node[72]->input.tensors[0] = node[71]->output.tensors[0];

    /* Concat_/model.11/Concat_180 */
    node[73]->input.tensors[0] = node[72]->output.tensors[0];
    node[73]->input.tensors[1] = node[50]->output.tensors[0];

    /* Conv_/model.12/cv1/conv/Conv_174 */
    node[74]->input.tensors[0] = node[73]->output.tensors[0];
    node[74]->input.tensors[1] = const_tensor[54]; /* data_weight */
    node[74]->input.tensors[2] = const_tensor[55]; /* data_bias */

    /* Sigmoid_/model.12/cv1/act/Sigmoid_175_Mul_/model.12/cv1/act/Mul_169 */
    node[75]->input.tensors[0] = node[74]->output.tensors[0];

    /* Split_/model.12/Split_163 */
    node[76]->input.tensors[0] = node[75]->output.tensors[0];

    /* Conv_/model.12/m.0/cv1/conv/Conv_162 */
    node[77]->input.tensors[0] = node[76]->output.tensors[1];
    node[77]->input.tensors[1] = const_tensor[56]; /* data_weight */
    node[77]->input.tensors[2] = const_tensor[57]; /* data_bias */

    /* Sigmoid_/model.12/m.0/cv1/act/Sigmoid_155_Mul_/model.12/m.0/cv1/act/Mul_154 */
    node[78]->input.tensors[0] = node[77]->output.tensors[0];

    /* Conv_/model.12/m.0/cv2/conv/Conv_145 */
    node[79]->input.tensors[0] = node[78]->output.tensors[0];
    node[79]->input.tensors[1] = const_tensor[58]; /* data_weight */
    node[79]->input.tensors[2] = const_tensor[59]; /* data_bias */

    /* Sigmoid_/model.12/m.0/cv2/act/Sigmoid_146_Mul_/model.12/m.0/cv2/act/Mul_137 */
    node[80]->input.tensors[0] = node[79]->output.tensors[0];

    /* Concat_/model.12/Concat_128 */
    node[81]->input.tensors[0] = node[76]->output.tensors[0];
    node[81]->input.tensors[1] = node[76]->output.tensors[1];
    node[81]->input.tensors[2] = node[80]->output.tensors[0];

    /* Conv_/model.12/cv2/conv/Conv_126 */
    node[82]->input.tensors[0] = node[81]->output.tensors[0];
    node[82]->input.tensors[1] = const_tensor[60]; /* data_weight */
    node[82]->input.tensors[2] = const_tensor[61]; /* data_bias */

    /* Sigmoid_/model.12/cv2/act/Sigmoid_127_Mul_/model.12/cv2/act/Mul_117 */
    node[83]->input.tensors[0] = node[82]->output.tensors[0];

    /* Resize_/model.13/Resize_118 */
    node[84]->input.tensors[0] = node[83]->output.tensors[0];

    /* Concat_/model.14/Concat_113 */
    node[85]->input.tensors[0] = node[84]->output.tensors[0];
    node[85]->input.tensors[1] = node[32]->output.tensors[0];

    /* Conv_/model.15/cv1/conv/Conv_110 */
    node[86]->input.tensors[0] = node[85]->output.tensors[0];
    node[86]->input.tensors[1] = const_tensor[62]; /* data_weight */
    node[86]->input.tensors[2] = const_tensor[63]; /* data_bias */

    /* Sigmoid_/model.15/cv1/act/Sigmoid_111_Mul_/model.15/cv1/act/Mul_99 */
    node[87]->input.tensors[0] = node[86]->output.tensors[0];

    /* Split_/model.15/Split_90 */
    node[88]->input.tensors[0] = node[87]->output.tensors[0];

    /* Conv_/model.15/m.0/cv1/conv/Conv_89 */
    node[89]->input.tensors[0] = node[88]->output.tensors[1];
    node[89]->input.tensors[1] = const_tensor[64]; /* data_weight */
    node[89]->input.tensors[2] = const_tensor[65]; /* data_bias */

    /* Sigmoid_/model.15/m.0/cv1/act/Sigmoid_79_Mul_/model.15/m.0/cv1/act/Mul_78 */
    node[90]->input.tensors[0] = node[89]->output.tensors[0];

    /* Conv_/model.15/m.0/cv2/conv/Conv_69 */
    node[91]->input.tensors[0] = node[90]->output.tensors[0];
    node[91]->input.tensors[1] = const_tensor[66]; /* data_weight */
    node[91]->input.tensors[2] = const_tensor[67]; /* data_bias */

    /* Sigmoid_/model.15/m.0/cv2/act/Sigmoid_70_Mul_/model.15/m.0/cv2/act/Mul_61 */
    node[92]->input.tensors[0] = node[91]->output.tensors[0];

    /* Concat_/model.15/Concat_60 */
    node[93]->input.tensors[0] = node[88]->output.tensors[0];
    node[93]->input.tensors[1] = node[88]->output.tensors[1];
    node[93]->input.tensors[2] = node[92]->output.tensors[0];

    /* Conv_/model.15/cv2/conv/Conv_51 */
    node[94]->input.tensors[0] = node[93]->output.tensors[0];
    node[94]->input.tensors[1] = const_tensor[68]; /* data_weight */
    node[94]->input.tensors[2] = const_tensor[69]; /* data_bias */

    /* Sigmoid_/model.15/cv2/act/Sigmoid_52_Mul_/model.15/cv2/act/Mul_43 */
    node[95]->input.tensors[0] = node[94]->output.tensors[0];

    /* Conv_/model.22/cv3.0/cv3.0.0/conv/Conv_42 */
    node[96]->input.tensors[0] = node[95]->output.tensors[0];
    node[96]->input.tensors[1] = const_tensor[70]; /* data_weight */
    node[96]->input.tensors[2] = const_tensor[71]; /* data_bias */

    /* Conv_/model.22/cv2.0/cv2.0.0/conv/Conv_112 */
    node[97]->input.tensors[0] = node[95]->output.tensors[0];
    node[97]->input.tensors[1] = const_tensor[72]; /* data_weight */
    node[97]->input.tensors[2] = const_tensor[73]; /* data_bias */

    /* Conv_/model.16/conv/Conv_124 */
    node[98]->input.tensors[0] = node[95]->output.tensors[0];
    node[98]->input.tensors[1] = const_tensor[74]; /* data_weight */
    node[98]->input.tensors[2] = const_tensor[75]; /* data_bias */

    /* Sigmoid_/model.22/cv3.0/cv3.0.0/act/Sigmoid_34_Mul_/model.22/cv3.0/cv3.0.0/act/Mul_33 */
    node[99]->input.tensors[0] = node[96]->output.tensors[0];

    /* Sigmoid_/model.22/cv2.0/cv2.0.0/act/Sigmoid_101_Mul_/model.22/cv2.0/cv2.0.0/act/Mul_100 */
    node[100]->input.tensors[0] = node[97]->output.tensors[0];

    /* Sigmoid_/model.16/act/Sigmoid_125_Mul_/model.16/act/Mul_116 */
    node[101]->input.tensors[0] = node[98]->output.tensors[0];

    /* Conv_/model.22/cv3.0/cv3.0.1/conv/Conv_24 */
    node[102]->input.tensors[0] = node[99]->output.tensors[0];
    node[102]->input.tensors[1] = const_tensor[76]; /* data_weight */
    node[102]->input.tensors[2] = const_tensor[77]; /* data_bias */

    /* Conv_/model.22/cv2.0/cv2.0.1/conv/Conv_91 */
    node[103]->input.tensors[0] = node[100]->output.tensors[0];
    node[103]->input.tensors[1] = const_tensor[78]; /* data_weight */
    node[103]->input.tensors[2] = const_tensor[79]; /* data_bias */

    /* Concat_/model.17/Concat_109 */
    node[104]->input.tensors[0] = node[101]->output.tensors[0];
    node[104]->input.tensors[1] = node[83]->output.tensors[0];

    /* Sigmoid_/model.22/cv3.0/cv3.0.1/act/Sigmoid_25_Mul_/model.22/cv3.0/cv3.0.1/act/Mul_16 */
    node[105]->input.tensors[0] = node[102]->output.tensors[0];

    /* Sigmoid_/model.22/cv2.0/cv2.0.1/act/Sigmoid_92_Mul_/model.22/cv2.0/cv2.0.1/act/Mul_80 */
    node[106]->input.tensors[0] = node[103]->output.tensors[0];

    /* Conv_/model.18/cv1/conv/Conv_106 */
    node[107]->input.tensors[0] = node[104]->output.tensors[0];
    node[107]->input.tensors[1] = const_tensor[80]; /* data_weight */
    node[107]->input.tensors[2] = const_tensor[81]; /* data_bias */

    /* Conv_/model.22/cv3.0/cv3.0.2/Conv_10 */
    node[108]->input.tensors[0] = node[105]->output.tensors[0];
    node[108]->input.tensors[1] = const_tensor[82]; /* data_weight */
    node[108]->input.tensors[2] = const_tensor[83]; /* data_bias */

    /* Conv_/model.22/cv2.0/cv2.0.2/Conv_71 */
    node[109]->input.tensors[0] = node[106]->output.tensors[0];
    node[109]->input.tensors[1] = const_tensor[84]; /* data_weight */
    node[109]->input.tensors[2] = const_tensor[85]; /* data_bias */

    /* Sigmoid_/model.18/cv1/act/Sigmoid_107_Mul_/model.18/cv1/act/Mul_96 */
    node[110]->input.tensors[0] = node[107]->output.tensors[0];

    /* Reshape_/model.22/dfl/Reshape_53 */
    node[111]->input.tensors[0] = node[109]->output.tensors[0];

    /* Split_/model.18/Split_86 */
    node[112]->input.tensors[0] = node[110]->output.tensors[0];

    /* Softmax_/model.22/dfl/Softmax_35_acuity_mark_perm_52 */
    node[113]->input.tensors[0] = node[111]->output.tensors[0];

    /* Conv_/model.18/m.0/cv1/conv/Conv_85 */
    node[114]->input.tensors[0] = node[112]->output.tensors[1];
    node[114]->input.tensors[1] = const_tensor[86]; /* data_weight */
    node[114]->input.tensors[2] = const_tensor[87]; /* data_bias */

    /* Softmax_/model.22/dfl/Softmax_35 */
    node[115]->input.tensors[0] = node[113]->output.tensors[0];

    /* Sigmoid_/model.18/m.0/cv1/act/Sigmoid_76_Mul_/model.18/m.0/cv1/act/Mul_75 */
    node[116]->input.tensors[0] = node[114]->output.tensors[0];

    /* Conv_/model.22/dfl/conv/Conv_26 */
    node[117]->input.tensors[0] = node[115]->output.tensors[0];
    node[117]->input.tensors[1] = const_tensor[88]; /* data_weight */
    node[117]->input.tensors[2] = const_tensor[89]; /* data_bias */

    /* Conv_/model.18/m.0/cv2/conv/Conv_66 */
    node[118]->input.tensors[0] = node[116]->output.tensors[0];
    node[118]->input.tensors[1] = const_tensor[90]; /* data_weight */
    node[118]->input.tensors[2] = const_tensor[91]; /* data_bias */

    /* Reshape_/model.22/Reshape_1_11 */
    node[119]->input.tensors[0] = node[117]->output.tensors[0];

    /* Sigmoid_/model.18/m.0/cv2/act/Sigmoid_67_Mul_/model.18/m.0/cv2/act/Mul_58 */
    node[120]->input.tensors[0] = node[118]->output.tensors[0];

    /* Concat_/model.18/Concat_57 */
    node[121]->input.tensors[0] = node[112]->output.tensors[0];
    node[121]->input.tensors[1] = node[112]->output.tensors[1];
    node[121]->input.tensors[2] = node[120]->output.tensors[0];

    /* Conv_/model.18/cv2/conv/Conv_48 */
    node[122]->input.tensors[0] = node[121]->output.tensors[0];
    node[122]->input.tensors[1] = const_tensor[92]; /* data_weight */
    node[122]->input.tensors[2] = const_tensor[93]; /* data_bias */

    /* Sigmoid_/model.18/cv2/act/Sigmoid_49_Mul_/model.18/cv2/act/Mul_40 */
    node[123]->input.tensors[0] = node[122]->output.tensors[0];

    /* Conv_/model.22/cv3.1/cv3.1.0/conv/Conv_39 */
    node[124]->input.tensors[0] = node[123]->output.tensors[0];
    node[124]->input.tensors[1] = const_tensor[94]; /* data_weight */
    node[124]->input.tensors[2] = const_tensor[95]; /* data_bias */

    /* Conv_/model.22/cv2.1/cv2.1.0/conv/Conv_108 */
    node[125]->input.tensors[0] = node[123]->output.tensors[0];
    node[125]->input.tensors[1] = const_tensor[96]; /* data_weight */
    node[125]->input.tensors[2] = const_tensor[97]; /* data_bias */

    /* Conv_/model.19/conv/Conv_120 */
    node[126]->input.tensors[0] = node[123]->output.tensors[0];
    node[126]->input.tensors[1] = const_tensor[98]; /* data_weight */
    node[126]->input.tensors[2] = const_tensor[99]; /* data_bias */

    /* Sigmoid_/model.22/cv3.1/cv3.1.0/act/Sigmoid_31_Mul_/model.22/cv3.1/cv3.1.0/act/Mul_30 */
    node[127]->input.tensors[0] = node[124]->output.tensors[0];

    /* Sigmoid_/model.22/cv2.1/cv2.1.0/act/Sigmoid_98_Mul_/model.22/cv2.1/cv2.1.0/act/Mul_97 */
    node[128]->input.tensors[0] = node[125]->output.tensors[0];

    /* Sigmoid_/model.19/act/Sigmoid_121_Mul_/model.19/act/Mul_114 */
    node[129]->input.tensors[0] = node[126]->output.tensors[0];

    /* Conv_/model.22/cv3.1/cv3.1.1/conv/Conv_21 */
    node[130]->input.tensors[0] = node[127]->output.tensors[0];
    node[130]->input.tensors[1] = const_tensor[100]; /* data_weight */
    node[130]->input.tensors[2] = const_tensor[101]; /* data_bias */

    /* Conv_/model.22/cv2.1/cv2.1.1/conv/Conv_87 */
    node[131]->input.tensors[0] = node[128]->output.tensors[0];
    node[131]->input.tensors[1] = const_tensor[102]; /* data_weight */
    node[131]->input.tensors[2] = const_tensor[103]; /* data_bias */

    /* Concat_/model.20/Concat_105 */
    node[132]->input.tensors[0] = node[129]->output.tensors[0];
    node[132]->input.tensors[1] = node[71]->output.tensors[0];

    /* Sigmoid_/model.22/cv3.1/cv3.1.1/act/Sigmoid_22_Mul_/model.22/cv3.1/cv3.1.1/act/Mul_14 */
    node[133]->input.tensors[0] = node[130]->output.tensors[0];

    /* Sigmoid_/model.22/cv2.1/cv2.1.1/act/Sigmoid_88_Mul_/model.22/cv2.1/cv2.1.1/act/Mul_77 */
    node[134]->input.tensors[0] = node[131]->output.tensors[0];

    /* Conv_/model.21/cv1/conv/Conv_102 */
    node[135]->input.tensors[0] = node[132]->output.tensors[0];
    node[135]->input.tensors[1] = const_tensor[104]; /* data_weight */
    node[135]->input.tensors[2] = const_tensor[105]; /* data_bias */

    /* Conv_/model.22/cv3.1/cv3.1.2/Conv_8 */
    node[136]->input.tensors[0] = node[133]->output.tensors[0];
    node[136]->input.tensors[1] = const_tensor[106]; /* data_weight */
    node[136]->input.tensors[2] = const_tensor[107]; /* data_bias */

    /* Conv_/model.22/cv2.1/cv2.1.2/Conv_68 */
    node[137]->input.tensors[0] = node[134]->output.tensors[0];
    node[137]->input.tensors[1] = const_tensor[108]; /* data_weight */
    node[137]->input.tensors[2] = const_tensor[109]; /* data_bias */

    /* Sigmoid_/model.21/cv1/act/Sigmoid_103_Mul_/model.21/cv1/act/Mul_93 */
    node[138]->input.tensors[0] = node[135]->output.tensors[0];

    /* Reshape_/model.22/dfl_1/Reshape_50 */
    node[139]->input.tensors[0] = node[137]->output.tensors[0];

    /* Split_/model.21/Split_82 */
    node[140]->input.tensors[0] = node[138]->output.tensors[0];

    /* Softmax_/model.22/dfl_1/Softmax_32_acuity_mark_perm_49 */
    node[141]->input.tensors[0] = node[139]->output.tensors[0];

    /* Conv_/model.21/m.0/cv1/conv/Conv_81 */
    node[142]->input.tensors[0] = node[140]->output.tensors[1];
    node[142]->input.tensors[1] = const_tensor[110]; /* data_weight */
    node[142]->input.tensors[2] = const_tensor[111]; /* data_bias */

    /* Softmax_/model.22/dfl_1/Softmax_32 */
    node[143]->input.tensors[0] = node[141]->output.tensors[0];

    /* Sigmoid_/model.21/m.0/cv1/act/Sigmoid_73_Mul_/model.21/m.0/cv1/act/Mul_72 */
    node[144]->input.tensors[0] = node[142]->output.tensors[0];

    /* Conv_/model.22/dfl/conv_1/Conv_23 */
    node[145]->input.tensors[0] = node[143]->output.tensors[0];
    node[145]->input.tensors[1] = const_tensor[112]; /* data_weight */
    node[145]->input.tensors[2] = const_tensor[113]; /* data_bias */

    /* Conv_/model.21/m.0/cv2/conv/Conv_63 */
    node[146]->input.tensors[0] = node[144]->output.tensors[0];
    node[146]->input.tensors[1] = const_tensor[114]; /* data_weight */
    node[146]->input.tensors[2] = const_tensor[115]; /* data_bias */

    /* Reshape_/model.22/Reshape_3_9 */
    node[147]->input.tensors[0] = node[145]->output.tensors[0];

    /* Sigmoid_/model.21/m.0/cv2/act/Sigmoid_64_Mul_/model.21/m.0/cv2/act/Mul_55 */
    node[148]->input.tensors[0] = node[146]->output.tensors[0];

    /* Concat_/model.21/Concat_54 */
    node[149]->input.tensors[0] = node[140]->output.tensors[0];
    node[149]->input.tensors[1] = node[140]->output.tensors[1];
    node[149]->input.tensors[2] = node[148]->output.tensors[0];

    /* Conv_/model.21/cv2/conv/Conv_45 */
    node[150]->input.tensors[0] = node[149]->output.tensors[0];
    node[150]->input.tensors[1] = const_tensor[116]; /* data_weight */
    node[150]->input.tensors[2] = const_tensor[117]; /* data_bias */

    /* Sigmoid_/model.21/cv2/act/Sigmoid_46_Mul_/model.21/cv2/act/Mul_37 */
    node[151]->input.tensors[0] = node[150]->output.tensors[0];

    /* Conv_/model.22/cv3.2/cv3.2.0/conv/Conv_36 */
    node[152]->input.tensors[0] = node[151]->output.tensors[0];
    node[152]->input.tensors[1] = const_tensor[118]; /* data_weight */
    node[152]->input.tensors[2] = const_tensor[119]; /* data_bias */

    /* Conv_/model.22/cv2.2/cv2.2.0/conv/Conv_104 */
    node[153]->input.tensors[0] = node[151]->output.tensors[0];
    node[153]->input.tensors[1] = const_tensor[120]; /* data_weight */
    node[153]->input.tensors[2] = const_tensor[121]; /* data_bias */

    /* Sigmoid_/model.22/cv3.2/cv3.2.0/act/Sigmoid_28_Mul_/model.22/cv3.2/cv3.2.0/act/Mul_27 */
    node[154]->input.tensors[0] = node[152]->output.tensors[0];

    /* Sigmoid_/model.22/cv2.2/cv2.2.0/act/Sigmoid_95_Mul_/model.22/cv2.2/cv2.2.0/act/Mul_94 */
    node[155]->input.tensors[0] = node[153]->output.tensors[0];

    /* Conv_/model.22/cv3.2/cv3.2.1/conv/Conv_18 */
    node[156]->input.tensors[0] = node[154]->output.tensors[0];
    node[156]->input.tensors[1] = const_tensor[122]; /* data_weight */
    node[156]->input.tensors[2] = const_tensor[123]; /* data_bias */

    /* Conv_/model.22/cv2.2/cv2.2.1/conv/Conv_83 */
    node[157]->input.tensors[0] = node[155]->output.tensors[0];
    node[157]->input.tensors[1] = const_tensor[124]; /* data_weight */
    node[157]->input.tensors[2] = const_tensor[125]; /* data_bias */

    /* Sigmoid_/model.22/cv3.2/cv3.2.1/act/Sigmoid_19_Mul_/model.22/cv3.2/cv3.2.1/act/Mul_12 */
    node[158]->input.tensors[0] = node[156]->output.tensors[0];

    /* Sigmoid_/model.22/cv2.2/cv2.2.1/act/Sigmoid_84_Mul_/model.22/cv2.2/cv2.2.1/act/Mul_74 */
    node[159]->input.tensors[0] = node[157]->output.tensors[0];

    /* Conv_/model.22/cv3.2/cv3.2.2/Conv_6 */
    node[160]->input.tensors[0] = node[158]->output.tensors[0];
    node[160]->input.tensors[1] = const_tensor[126]; /* data_weight */
    node[160]->input.tensors[2] = const_tensor[127]; /* data_bias */

    /* Conv_/model.22/cv2.2/cv2.2.2/Conv_65 */
    node[161]->input.tensors[0] = node[159]->output.tensors[0];
    node[161]->input.tensors[1] = const_tensor[128]; /* data_weight */
    node[161]->input.tensors[2] = const_tensor[129]; /* data_bias */

    /* Reshape_/model.22/dfl_2/Reshape_47 */
    node[162]->input.tensors[0] = node[161]->output.tensors[0];

    /* Softmax_/model.22/dfl_2/Softmax_29_acuity_mark_perm_46 */
    node[163]->input.tensors[0] = node[162]->output.tensors[0];

    /* Softmax_/model.22/dfl_2/Softmax_29 */
    node[164]->input.tensors[0] = node[163]->output.tensors[0];

    /* Conv_/model.22/dfl/conv_2/Conv_20 */
    node[165]->input.tensors[0] = node[164]->output.tensors[0];
    node[165]->input.tensors[1] = const_tensor[130]; /* data_weight */
    node[165]->input.tensors[2] = const_tensor[131]; /* data_bias */

    /* Reshape_/model.22/Reshape_5_7 */
    node[166]->input.tensors[0] = node[165]->output.tensors[0];


    }
    else
    {
    node[0]->output.tensors[0] = norm_tensor[0];
    node[0]->output.tensors[1] = norm_tensor[1];
    node[0]->output.tensors[2] = norm_tensor[2];
    node[0]->output.tensors[3] = norm_tensor[3];
    node[0]->output.tensors[4] = norm_tensor[4];
    node[0]->output.tensors[5] = norm_tensor[5];
    node[0]->input.tensors[0] = norm_tensor[6];

    }
    graph->output.tensors[0] = norm_tensor[0];
    graph->output.tensors[1] = norm_tensor[1];
    graph->output.tensors[2] = norm_tensor[2];
    graph->output.tensors[3] = norm_tensor[3];
    graph->output.tensors[4] = norm_tensor[4];
    graph->output.tensors[5] = norm_tensor[5];
    graph->input.tensors[0] = norm_tensor[6];


    if( enable_pre_post_process )
    {
        sort = TRUE;
        if( pre_process_map_count > 0 )
        {
            for( i = 0; i < pre_process_map_count; i++ )
            {
                status = vsi_nn_AddGraphPreProcess(graph, pre_process_map[i].graph_input_idx,
                                                   pre_process_map[i].preprocesses,
                                                   pre_process_map[i].preprocess_count);
                TEST_CHECK_STATUS( status, error );
            }
        }

        if( post_process_map_count > 0 )
        {
            for( i = 0; i < post_process_map_count; i++ )
            {
                 status = vsi_nn_AddGraphPostProcess(graph, post_process_map[i].graph_output_idx,
                                                     post_process_map[i].postprocesses,
                                                     post_process_map[i].postprocess_count);
                 TEST_CHECK_STATUS( status, error );
            }
        }
    }

    status = vsi_nn_SetupGraph( graph, sort );
    TEST_CHECK_STATUS( status, error );
    vsi_nn_DumpGraphToJson( graph );

    if( VSI_FAILURE == status )
    {
        goto error;
    }

    fclose( fp );

    return graph;

error:
    if( NULL != fp )
    {
        fclose( fp );
    }

    release_ctx = ( NULL == in_ctx );
    vsi_nn_DumpGraphToJson( graph );
    vnn_ReleaseYolov8sShapeSlimCUint8( graph, release_ctx );

    return NULL;
} /* vsi_nn_CreateYolov8sShapeSlimCUint8() */

void vnn_ReleaseYolov8sShapeSlimCUint8
    (
    vsi_nn_graph_t * graph,
    vsi_bool release_ctx
    )
{
    vsi_nn_context_t ctx;
    if( NULL != graph )
    {
        ctx = graph->ctx;
        vsi_nn_ReleaseGraph( &graph );

        /*-----------------------------------------
        Unregister client ops
        -----------------------------------------*/
        

        if( release_ctx )
        {
            vsi_nn_ReleaseContext( &ctx );
        }
    }
} /* vsi_nn_ReleaseYolov8sShapeSlimCUint8() */

