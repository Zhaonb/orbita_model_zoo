#pragma OPENCL EXTENSION cl_viv_vx_extension : enable

#include "cl_viv_vx_ext.h"

_viv_uniform VXC_512Bits uniA_Times_B_0_2x8;
_viv_uniform VXC_512Bits uniA_Times_B_1_2x8;
_viv_uniform VXC_512Bits uniA_Times_B_0_4x4;
_viv_uniform VXC_512Bits uniA_Times_B_1_4x4;
_viv_uniform VXC_512Bits uniA_Times_B_00_4x4;
_viv_uniform VXC_512Bits uniA_Times_B_01_4x4;
_viv_uniform VXC_512Bits uniExtract_8Bin_2x8;

#define MULTIPLY_ZERO(name, dst_type, bin) \
    __kernel void multiply_Zeroto##name \
    ( \
    __read_only  image2d_t input0, \
    __read_only  image2d_t input1, \
                 float     scale, \
                 int       overflow_policy, \
                 int       round_policy, \
    __write_only image2d_t output \
    ) \
{ \
    int2 coord = (int2)(get_global_id(0), get_global_id(1)); \
 \
    dst_type dst = 0; \
 \
    VXC_WriteImage(output, coord, dst, VXC_MODIFIER(0, bin, 0, VXC_RM_TowardZero, 0)); \
}
MULTIPLY_ZERO(U8,  vxc_uchar16, 15)
MULTIPLY_ZERO(I16, vxc_short8,  7)

#define MULTIPLY_A_TIMES_B_POW2(name0, name1, name2, name3, name4, src0_type, src1_type, dst_type, over_flow, round) \
__kernel void multiply_##name0##Times##name1##to##name2##_##name3##_##name4##_Pow2 \
    ( \
    __read_only  image2d_t input0, \
    __read_only  image2d_t input1, \
                 float     scale, \
                 int       overflow_policy, \
                 int       round_policy, \
    __write_only image2d_t output \
    ) \
{ \
    int2 coord = (int2)(get_global_id(0), get_global_id(1)); \
 \
    src0_type src0; \
    src1_type src1; \
    dst_type dst; \
 \
    VXC_ReadImage(src0, input0, coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
    VXC_ReadImage(src1, input1, coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
 \
    VXC_DP2x8(dst, src0, src1, VXC_MODIFIER(0, 7, 0, round, over_flow), uniA_Times_B_0_2x8); \
 \
    VXC_WriteImage(output, coord, dst, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
}
MULTIPLY_A_TIMES_B_POW2(I16, I16, I16, Sat,  RTE, vxc_short8, vxc_short8, vxc_short8, 1, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_POW2(I16, I16, I16, Sat,  RTZ, vxc_short8, vxc_short8, vxc_short8, 1, VXC_RM_TowardZero)
MULTIPLY_A_TIMES_B_POW2(I16, I16, I16, Wrap, RTE, vxc_short8, vxc_short8, vxc_short8, 0, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_POW2(I16, I16, I16, Wrap, RTZ, vxc_short8, vxc_short8, vxc_short8, 0, VXC_RM_TowardZero)

MULTIPLY_A_TIMES_B_POW2(I16, I16, U8,  Sat,  RTE, vxc_short8, vxc_short8, vxc_uchar8, 1, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_POW2(I16, I16, U8,  Sat,  RTZ, vxc_short8, vxc_short8, vxc_uchar8, 1, VXC_RM_TowardZero)
MULTIPLY_A_TIMES_B_POW2(I16, I16, U8,  Wrap, RTE, vxc_short8, vxc_short8, vxc_uchar8, 0, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_POW2(I16, I16, U8,  Wrap, RTZ, vxc_short8, vxc_short8, vxc_uchar8, 0, VXC_RM_TowardZero)

MULTIPLY_A_TIMES_B_POW2(I16, U8,  I16, Sat,  RTE, vxc_short8, vxc_uchar8, vxc_short8, 1, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_POW2(I16, U8,  I16, Sat,  RTZ, vxc_short8, vxc_uchar8, vxc_short8, 1, VXC_RM_TowardZero)
MULTIPLY_A_TIMES_B_POW2(I16, U8,  I16, Wrap, RTE, vxc_short8, vxc_uchar8, vxc_short8, 0, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_POW2(I16, U8,  I16, Wrap, RTZ, vxc_short8, vxc_uchar8, vxc_short8, 0, VXC_RM_TowardZero)

MULTIPLY_A_TIMES_B_POW2(U8,  I16, I16, Sat,  RTE, vxc_uchar8, vxc_short8, vxc_short8, 1, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_POW2(U8,  I16, I16, Sat,  RTZ, vxc_uchar8, vxc_short8, vxc_short8, 1, VXC_RM_TowardZero)
MULTIPLY_A_TIMES_B_POW2(U8,  I16, I16, Wrap, RTE, vxc_uchar8, vxc_short8, vxc_short8, 0, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_POW2(U8,  I16, I16, Wrap, RTZ, vxc_uchar8, vxc_short8, vxc_short8, 0, VXC_RM_TowardZero)

MULTIPLY_A_TIMES_B_POW2(U8,  I16, U8,  Sat,  RTE, vxc_uchar8, vxc_short8, vxc_uchar8, 1, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_POW2(U8,  I16, U8,  Sat,  RTZ, vxc_uchar8, vxc_short8, vxc_uchar8, 1, VXC_RM_TowardZero)
MULTIPLY_A_TIMES_B_POW2(U8,  I16, U8,  Wrap, RTE, vxc_uchar8, vxc_short8, vxc_uchar8, 0, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_POW2(U8,  I16, U8,  Wrap, RTZ, vxc_uchar8, vxc_short8, vxc_uchar8, 0, VXC_RM_TowardZero)

MULTIPLY_A_TIMES_B_POW2(I16, U8,  U8,  Sat,  RTE, vxc_short8, vxc_uchar8, vxc_uchar8, 1, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_POW2(I16, U8,  U8,  Sat,  RTZ, vxc_short8, vxc_uchar8, vxc_uchar8, 1, VXC_RM_TowardZero)
MULTIPLY_A_TIMES_B_POW2(I16, U8,  U8,  Wrap, RTE, vxc_short8, vxc_uchar8, vxc_uchar8, 0, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_POW2(I16, U8,  U8,  Wrap, RTZ, vxc_short8, vxc_uchar8, vxc_uchar8, 0, VXC_RM_TowardZero)


#define MULTIPLY_U8_TIMES_U8TOU8_POW2(name0, name1, name2, name3, name4, src0_type, src1_type, dst_type, over_flow, round) \
__kernel void multiply_##name0##Times##name1##to##name2##_##name3##_##name4##_Pow2 \
    ( \
    __read_only  image2d_t input0, \
    __read_only  image2d_t input1, \
                 float     scale, \
                 int       overflow_policy, \
                 int       round_policy, \
    __write_only image2d_t output \
    ) \
{ \
    int2 coord = (int2)(get_global_id(0), get_global_id(1)); \
 \
    src0_type src0; \
    src1_type src1; \
    dst_type dst; \
 \
    VXC_ReadImage(src0, input0, coord, 0, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0)); \
    VXC_ReadImage(src1, input1, coord, 0, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0)); \
 \
    VXC_DP2x8(dst, src0, src1, VXC_MODIFIER(0, 7, 0, round, over_flow),  uniA_Times_B_0_2x8); \
    VXC_DP2x8(dst, src0, src1, VXC_MODIFIER(8, 15, 0, round, over_flow), uniA_Times_B_1_2x8); \
 \
    VXC_WriteImage(output, coord, dst, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0)); \
}
MULTIPLY_U8_TIMES_U8TOU8_POW2(U8, U8, U8, Sat,  RTE, vxc_uchar16, vxc_uchar16, vxc_uchar16, 1, VXC_RM_ToNearestEven)
MULTIPLY_U8_TIMES_U8TOU8_POW2(U8, U8, U8, Sat,  RTZ, vxc_uchar16, vxc_uchar16, vxc_uchar16, 1, VXC_RM_TowardZero)
MULTIPLY_U8_TIMES_U8TOU8_POW2(U8, U8, U8, Wrap, RTE, vxc_uchar16, vxc_uchar16, vxc_uchar16, 0, VXC_RM_ToNearestEven)
MULTIPLY_U8_TIMES_U8TOU8_POW2(U8, U8, U8, Wrap, RTZ, vxc_uchar16, vxc_uchar16, vxc_uchar16, 0, VXC_RM_TowardZero)

#define MULTIPLY_U8_TIMES_U8TOI16_POW2(name0, name1, name2, name3, name4, src0_type, src1_type, dst_type, over_flow, round) \
__kernel void multiply_##name0##Times##name1##to##name2##_##name3##_##name4##_Pow2 \
    ( \
    __read_only  image2d_t input0, \
    __read_only  image2d_t input1, \
                 float     scale, \
                 int       overflow_policy, \
                 int       round_policy, \
    __write_only image2d_t output \
    ) \
{ \
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(0), get_global_id(1)); \
 \
    src0_type src0; \
    src1_type src1; \
    dst_type dst0, dst1; \
 \
    VXC_ReadImage(src0, input0, coord, 0, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0)); \
    VXC_ReadImage(src1, input1, coord, 0, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0)); \
    coord.z = coord.z + 8; \
 \
    VXC_DP2x8(dst0, src0, src1, VXC_MODIFIER(0, 7, 0, round, over_flow), uniA_Times_B_0_2x8); \
    VXC_DP2x8(dst1, src0, src1, VXC_MODIFIER(0, 7, 0, round, over_flow), uniA_Times_B_1_2x8); \
 \
    VXC_WriteImage(output, coord.xy, dst0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
    VXC_WriteImage(output, coord.zy, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
}
MULTIPLY_U8_TIMES_U8TOI16_POW2(U8, U8, I16, Sat,  RTE, vxc_uchar16, vxc_uchar16, vxc_short8, 1, VXC_RM_ToNearestEven)
MULTIPLY_U8_TIMES_U8TOI16_POW2(U8, U8, I16, Sat,  RTZ, vxc_uchar16, vxc_uchar16, vxc_short8, 1, VXC_RM_TowardZero)
MULTIPLY_U8_TIMES_U8TOI16_POW2(U8, U8, I16, Wrap, RTE, vxc_uchar16, vxc_uchar16, vxc_short8, 0, VXC_RM_ToNearestEven)
MULTIPLY_U8_TIMES_U8TOI16_POW2(U8, U8, I16, Wrap, RTZ, vxc_uchar16, vxc_uchar16, vxc_short8, 0, VXC_RM_TowardZero)

#define MULTIPLY_A_TIMES_B_SCALE_LT1(name0, name1, name2, name3, name4, src0_type, src1_type, dst_type, over_flow, round) \
__kernel void multiply_##name0##Times##name1##to##name2##_##name3##_##name4##_scale_lt1 \
    ( \
    __read_only  image2d_t input0, \
    __read_only  image2d_t input1, \
                 float     scale, \
                 int       overflow_policy, \
                 int       round_policy, \
    __write_only image2d_t output \
    ) \
{ \
    int2 coord = (int2)(get_global_id(0), get_global_id(1)); \
 \
    src0_type src0; \
    src1_type src1; \
    dst_type dst; \
 \
    VXC_ReadImage(src0, input0, coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
    VXC_ReadImage(src1, input1, coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
 \
    float4 data0, data1; \
    int4 tmp0, tmp1, dst0, dst1; \
    VXC_DP4x4(data0, src0, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniA_Times_B_0_4x4); \
    VXC_DP4x4(data1, src0, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniA_Times_B_1_4x4); \
    data0 = data0 * scale; \
    data1 = data1 * scale; \
    _viv_asm(CONV, dst0, data0); \
    _viv_asm(CONV, dst1, data1); \
    VXC_DP2x8(dst, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, over_flow), uniExtract_8Bin_2x8); \
 \
    VXC_WriteImage(output, coord, dst, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
}

MULTIPLY_A_TIMES_B_SCALE_LT1(I16, I16, I16,  Sat, RTE, vxc_short8, vxc_short8, vxc_short8, 1, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_LT1(I16, I16, I16,  Sat, RTZ, vxc_short8, vxc_short8, vxc_short8, 1, VXC_RM_TowardZero)

MULTIPLY_A_TIMES_B_SCALE_LT1(I16, I16, U8,  Sat,  RTE, vxc_short8, vxc_short8, vxc_uchar8, 1, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_LT1(I16, I16, U8,  Sat,  RTZ, vxc_short8, vxc_short8, vxc_uchar8, 1, VXC_RM_TowardZero)
MULTIPLY_A_TIMES_B_SCALE_LT1(I16, I16, U8,  Wrap, RTE, vxc_short8, vxc_short8, vxc_uchar8, 0, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_LT1(I16, I16, U8,  Wrap, RTZ, vxc_short8, vxc_short8, vxc_uchar8, 0, VXC_RM_TowardZero)

MULTIPLY_A_TIMES_B_SCALE_LT1(I16, U8,  I16, Sat,  RTE, vxc_short8, vxc_uchar8, vxc_short8, 1, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_LT1(I16, U8,  I16, Sat,  RTZ, vxc_short8, vxc_uchar8, vxc_short8, 1, VXC_RM_TowardZero)
MULTIPLY_A_TIMES_B_SCALE_LT1(I16, U8,  I16, Wrap, RTE, vxc_short8, vxc_uchar8, vxc_short8, 0, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_LT1(I16, U8,  I16, Wrap, RTZ, vxc_short8, vxc_uchar8, vxc_short8, 0, VXC_RM_TowardZero)

MULTIPLY_A_TIMES_B_SCALE_LT1(U8,  I16, I16, Sat,  RTE, vxc_uchar8, vxc_short8, vxc_short8, 1, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_LT1(U8,  I16, I16, Sat,  RTZ, vxc_uchar8, vxc_short8, vxc_short8, 1, VXC_RM_TowardZero)
MULTIPLY_A_TIMES_B_SCALE_LT1(U8,  I16, I16, Wrap, RTE, vxc_uchar8, vxc_short8, vxc_short8, 0, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_LT1(U8,  I16, I16, Wrap, RTZ, vxc_uchar8, vxc_short8, vxc_short8, 0, VXC_RM_TowardZero)

MULTIPLY_A_TIMES_B_SCALE_LT1(U8,  I16, U8,  Sat,  RTE, vxc_uchar8, vxc_short8, vxc_uchar8, 1, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_LT1(U8,  I16, U8,  Sat,  RTZ, vxc_uchar8, vxc_short8, vxc_uchar8, 1, VXC_RM_TowardZero)
MULTIPLY_A_TIMES_B_SCALE_LT1(U8,  I16, U8,  Wrap, RTE, vxc_uchar8, vxc_short8, vxc_uchar8, 0, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_LT1(U8,  I16, U8,  Wrap, RTZ, vxc_uchar8, vxc_short8, vxc_uchar8, 0, VXC_RM_TowardZero)

MULTIPLY_A_TIMES_B_SCALE_LT1(I16, U8,  U8,  Sat,  RTE, vxc_short8, vxc_uchar8, vxc_uchar8, 1, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_LT1(I16, U8,  U8,  Sat,  RTZ, vxc_short8, vxc_uchar8, vxc_uchar8, 1, VXC_RM_TowardZero)
MULTIPLY_A_TIMES_B_SCALE_LT1(I16, U8,  U8,  Wrap, RTE, vxc_short8, vxc_uchar8, vxc_uchar8, 0, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_LT1(I16, U8,  U8,  Wrap, RTZ, vxc_short8, vxc_uchar8, vxc_uchar8, 0, VXC_RM_TowardZero)

MULTIPLY_A_TIMES_B_SCALE_LT1(U8,  U8,  U8,  Sat,  RTE, vxc_uchar8, vxc_uchar8, vxc_uchar8, 1, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_LT1(U8,  U8,  U8,  Sat,  RTZ, vxc_uchar8, vxc_uchar8, vxc_uchar8, 1, VXC_RM_TowardZero)
MULTIPLY_A_TIMES_B_SCALE_LT1(U8,  U8,  U8,  Wrap, RTE, vxc_uchar8, vxc_uchar8, vxc_uchar8, 0, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_LT1(U8,  U8,  U8,  Wrap, RTZ, vxc_uchar8, vxc_uchar8, vxc_uchar8, 0, VXC_RM_TowardZero)

MULTIPLY_A_TIMES_B_SCALE_LT1(U8,  U8,  I16, Sat,  RTE, vxc_uchar8, vxc_uchar8, vxc_uchar8, 1, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_LT1(U8,  U8,  I16, Sat,  RTZ, vxc_uchar8, vxc_uchar8, vxc_uchar8, 1, VXC_RM_TowardZero)
MULTIPLY_A_TIMES_B_SCALE_LT1(U8,  U8,  I16, Wrap, RTE, vxc_uchar8, vxc_uchar8, vxc_uchar8, 0, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_LT1(U8,  U8,  I16, Wrap, RTZ, vxc_uchar8, vxc_uchar8, vxc_uchar8, 0, VXC_RM_TowardZero)

_viv_uniform VXC_512Bits uniDataToF32_0_4x4;
_viv_uniform VXC_512Bits uniDataToF32_1_4x4;
#define MULTIPLY_I16_TIMES_I16TOI16_SCALE_LT1(name1, src0_type, src1_type, dst_type, over_flow, round) \
__kernel void multiply_I16TimesI16toI16_Wrap_##name1##_scale_lt1 \
    ( \
    __read_only  image2d_t input0, \
    __read_only  image2d_t input1, \
                 float     scale, \
                 int       overflow_policy, \
                 int       round_policy, \
    __write_only image2d_t output \
    ) \
{ \
    int2 coord = (int2)(get_global_id(0), get_global_id(1)); \
 \
    vxc_short8 src0; \
    vxc_short8 src1; \
    vxc_short8 dst; \
 \
    VXC_ReadImage(src0, input0, coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
    VXC_ReadImage(src1, input1, coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
 \
    float4 v00, v01; \
    float4 v10, v11; \
    VXC_DP4x4(v00, src0, src0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniDataToF32_0_4x4); \
    VXC_DP4x4(v01, src0, src0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniDataToF32_1_4x4); \
    VXC_DP4x4(v10, src1, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniDataToF32_0_4x4); \
    VXC_DP4x4(v11, src1, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniDataToF32_1_4x4); \
    v00 = v00 * scale; \
    v00 *= v10; \
    v01 = v01 * scale; \
    v01 *= v11; \
    int4 dst0, dst1; \
    _viv_asm(CONV_##name1, dst0, v00); \
    _viv_asm(CONV_##name1, dst1, v01); \
    VXC_DP2x8(dst, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, over_flow), uniExtract_8Bin_2x8); \
 \
    VXC_WriteImage(output, coord, dst, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
}
MULTIPLY_I16_TIMES_I16TOI16_SCALE_LT1(RTE, vxc_short8, vxc_short8, vxc_short8, 0, VXC_RM_ToNearestEven)
MULTIPLY_I16_TIMES_I16TOI16_SCALE_LT1(RTZ, vxc_short8, vxc_short8, vxc_short8, 0, VXC_RM_TowardZero)

_viv_uniform int intPart;
_viv_uniform float fracPart;
#define MULTIPLY_A_TIMES_B_SCALE_INTEGER(name0, name1, name2, name3, name4, src0_type, src1_type, dst_type, over_flow, round) \
__kernel void multiply_##name0##Times##name1##to##name2##_##name3##_##name4##_scale_integer \
    ( \
    __read_only  image2d_t input0, \
    __read_only  image2d_t input1, \
                 float     scale, \
                 int       overflow_policy, \
                 int       round_policy, \
    __write_only image2d_t output \
    ) \
{ \
    int2 coord = (int2)(get_global_id(0), get_global_id(1)); \
 \
    src0_type src0; \
    src1_type src1; \
    dst_type dst; \
 \
    VXC_ReadImage(src0, input0, coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
    VXC_ReadImage(src1, input1, coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
 \
    int4 data0, data1; \
    int4 dst0, dst1; \
    VXC_DP4x4(data0, src0, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniA_Times_B_0_4x4); \
    VXC_DP4x4(data1, src0, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniA_Times_B_1_4x4); \
    data0 = data0 * intPart; \
    data1 = data1 * intPart; \
    _viv_asm(CONV, dst0, data0); \
    _viv_asm(CONV, dst1, data1); \
    VXC_DP2x8(dst, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, over_flow), uniExtract_8Bin_2x8); \
 \
    VXC_WriteImage(output, coord, dst, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
}

MULTIPLY_A_TIMES_B_SCALE_INTEGER(I16, I16, I16,  Sat,  RTE, vxc_short8, vxc_short8, vxc_short8, 1, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_INTEGER(I16, I16, I16,  Sat,  RTZ, vxc_short8, vxc_short8, vxc_short8, 1, VXC_RM_TowardZero)
MULTIPLY_A_TIMES_B_SCALE_INTEGER(I16, I16, I16,  Wrap, RTE, vxc_short8, vxc_short8, vxc_short8, 0, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_INTEGER(I16, I16, I16,  Wrap, RTZ, vxc_short8, vxc_short8, vxc_short8, 0, VXC_RM_TowardZero)

MULTIPLY_A_TIMES_B_SCALE_INTEGER(I16, I16, U8,  Sat,  RTE, vxc_short8, vxc_short8, vxc_uchar8, 1, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_INTEGER(I16, I16, U8,  Sat,  RTZ, vxc_short8, vxc_short8, vxc_uchar8, 1, VXC_RM_TowardZero)
MULTIPLY_A_TIMES_B_SCALE_INTEGER(I16, I16, U8,  Wrap, RTE, vxc_short8, vxc_short8, vxc_uchar8, 0, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_INTEGER(I16, I16, U8,  Wrap, RTZ, vxc_short8, vxc_short8, vxc_uchar8, 0, VXC_RM_TowardZero)

MULTIPLY_A_TIMES_B_SCALE_INTEGER(I16, U8,  I16, Sat,  RTE, vxc_short8, vxc_uchar8, vxc_short8, 1, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_INTEGER(I16, U8,  I16, Sat,  RTZ, vxc_short8, vxc_uchar8, vxc_short8, 1, VXC_RM_TowardZero)
MULTIPLY_A_TIMES_B_SCALE_INTEGER(I16, U8,  I16, Wrap, RTE, vxc_short8, vxc_uchar8, vxc_short8, 0, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_INTEGER(I16, U8,  I16, Wrap, RTZ, vxc_short8, vxc_uchar8, vxc_short8, 0, VXC_RM_TowardZero)

MULTIPLY_A_TIMES_B_SCALE_INTEGER(U8,  I16, I16, Sat,  RTE, vxc_uchar8, vxc_short8, vxc_short8, 1, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_INTEGER(U8,  I16, I16, Sat,  RTZ, vxc_uchar8, vxc_short8, vxc_short8, 1, VXC_RM_TowardZero)
MULTIPLY_A_TIMES_B_SCALE_INTEGER(U8,  I16, I16, Wrap, RTE, vxc_uchar8, vxc_short8, vxc_short8, 0, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_INTEGER(U8,  I16, I16, Wrap, RTZ, vxc_uchar8, vxc_short8, vxc_short8, 0, VXC_RM_TowardZero)

MULTIPLY_A_TIMES_B_SCALE_INTEGER(U8,  I16, U8,  Sat,  RTE, vxc_uchar8, vxc_short8, vxc_uchar8, 1, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_INTEGER(U8,  I16, U8,  Sat,  RTZ, vxc_uchar8, vxc_short8, vxc_uchar8, 1, VXC_RM_TowardZero)
MULTIPLY_A_TIMES_B_SCALE_INTEGER(U8,  I16, U8,  Wrap, RTE, vxc_uchar8, vxc_short8, vxc_uchar8, 0, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_INTEGER(U8,  I16, U8,  Wrap, RTZ, vxc_uchar8, vxc_short8, vxc_uchar8, 0, VXC_RM_TowardZero)

MULTIPLY_A_TIMES_B_SCALE_INTEGER(I16, U8,  U8,  Sat,  RTE, vxc_short8, vxc_uchar8, vxc_uchar8, 1, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_INTEGER(I16, U8,  U8,  Sat,  RTZ, vxc_short8, vxc_uchar8, vxc_uchar8, 1, VXC_RM_TowardZero)
MULTIPLY_A_TIMES_B_SCALE_INTEGER(I16, U8,  U8,  Wrap, RTE, vxc_short8, vxc_uchar8, vxc_uchar8, 0, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_INTEGER(I16, U8,  U8,  Wrap, RTZ, vxc_short8, vxc_uchar8, vxc_uchar8, 0, VXC_RM_TowardZero)

MULTIPLY_A_TIMES_B_SCALE_INTEGER(U8,  U8,  U8,  Sat,  RTE, vxc_uchar8, vxc_uchar8, vxc_uchar8, 1, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_INTEGER(U8,  U8,  U8,  Sat,  RTZ, vxc_uchar8, vxc_uchar8, vxc_uchar8, 1, VXC_RM_TowardZero)
MULTIPLY_A_TIMES_B_SCALE_INTEGER(U8,  U8,  U8,  Wrap, RTE, vxc_uchar8, vxc_uchar8, vxc_uchar8, 0, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_INTEGER(U8,  U8,  U8,  Wrap, RTZ, vxc_uchar8, vxc_uchar8, vxc_uchar8, 0, VXC_RM_TowardZero)

MULTIPLY_A_TIMES_B_SCALE_INTEGER(U8,  U8,  I16, Sat,  RTE, vxc_uchar8, vxc_uchar8, vxc_uchar8, 1, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_INTEGER(U8,  U8,  I16, Sat,  RTZ, vxc_uchar8, vxc_uchar8, vxc_uchar8, 1, VXC_RM_TowardZero)
MULTIPLY_A_TIMES_B_SCALE_INTEGER(U8,  U8,  I16, Wrap, RTE, vxc_uchar8, vxc_uchar8, vxc_uchar8, 0, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_INTEGER(U8,  U8,  I16, Wrap, RTZ, vxc_uchar8, vxc_uchar8, vxc_uchar8, 0, VXC_RM_TowardZero)


#define MULTIPLY_A_TIMES_B_SCALE_OPT(name0, name1, name2, name3, name4, src0_type, src1_type, dst_type, over_flow, round) \
__kernel void multiply_##name0##Times##name1##to##name2##_##name3##_##name4##_opt \
    ( \
    __read_only  image2d_t input0, \
    __read_only  image2d_t input1, \
                 float     scale, \
                 int       overflow_policy, \
                 int       round_policy, \
    __write_only image2d_t output \
    ) \
{ \
    int2 coord = (int2)(get_global_id(0), get_global_id(1)); \
 \
    src0_type src0; \
    src1_type src1; \
    dst_type dst; \
 \
    VXC_ReadImage(src0, input0, coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
    VXC_ReadImage(src1, input1, coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
 \
    int4 data0, data1, dst0, dst1; \
    VXC_DP4x4(dst0, src0, src1, VXC_MODIFIER(0, 3, 0, round, over_flow), uniA_Times_B_0_4x4); \
    VXC_DP4x4(dst1, src0, src1, VXC_MODIFIER(0, 3, 0, round, over_flow), uniA_Times_B_1_4x4); \
    VXC_DP4x4(data0, src0, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniA_Times_B_00_4x4); \
    VXC_DP4x4(data1, src0, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniA_Times_B_01_4x4); \
    dst0 = data0 * intPart + dst0; \
    dst1 = data1 * intPart + dst1; \
    VXC_DP2x8(dst, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, over_flow), uniExtract_8Bin_2x8); \
 \
    VXC_WriteImage(output, coord, dst, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
}

MULTIPLY_A_TIMES_B_SCALE_OPT(I16, I16, I16,  Sat,  RTE, vxc_short8, vxc_short8, vxc_short8, 1, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_OPT(I16, I16, I16,  Sat,  RTZ, vxc_short8, vxc_short8, vxc_short8, 1, VXC_RM_TowardZero)
MULTIPLY_A_TIMES_B_SCALE_OPT(I16, I16, I16,  Wrap, RTE, vxc_short8, vxc_short8, vxc_short8, 0, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_OPT(I16, I16, I16,  Wrap, RTZ, vxc_short8, vxc_short8, vxc_short8, 0, VXC_RM_TowardZero)

MULTIPLY_A_TIMES_B_SCALE_OPT(I16, I16, U8,  Sat,  RTE, vxc_short8, vxc_short8, vxc_uchar8, 1, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_OPT(I16, I16, U8,  Sat,  RTZ, vxc_short8, vxc_short8, vxc_uchar8, 1, VXC_RM_TowardZero)
MULTIPLY_A_TIMES_B_SCALE_OPT(I16, I16, U8,  Wrap, RTE, vxc_short8, vxc_short8, vxc_uchar8, 0, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_OPT(I16, I16, U8,  Wrap, RTZ, vxc_short8, vxc_short8, vxc_uchar8, 0, VXC_RM_TowardZero)

MULTIPLY_A_TIMES_B_SCALE_OPT(I16, U8,  I16, Sat,  RTE, vxc_short8, vxc_uchar8, vxc_short8, 1, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_OPT(I16, U8,  I16, Sat,  RTZ, vxc_short8, vxc_uchar8, vxc_short8, 1, VXC_RM_TowardZero)
MULTIPLY_A_TIMES_B_SCALE_OPT(I16, U8,  I16, Wrap, RTE, vxc_short8, vxc_uchar8, vxc_short8, 0, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_OPT(I16, U8,  I16, Wrap, RTZ, vxc_short8, vxc_uchar8, vxc_short8, 0, VXC_RM_TowardZero)

MULTIPLY_A_TIMES_B_SCALE_OPT(U8,  I16, I16, Sat,  RTE, vxc_uchar8, vxc_short8, vxc_short8, 1, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_OPT(U8,  I16, I16, Sat,  RTZ, vxc_uchar8, vxc_short8, vxc_short8, 1, VXC_RM_TowardZero)
MULTIPLY_A_TIMES_B_SCALE_OPT(U8,  I16, I16, Wrap, RTE, vxc_uchar8, vxc_short8, vxc_short8, 0, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_OPT(U8,  I16, I16, Wrap, RTZ, vxc_uchar8, vxc_short8, vxc_short8, 0, VXC_RM_TowardZero)

MULTIPLY_A_TIMES_B_SCALE_OPT(U8,  I16, U8,  Sat,  RTE, vxc_uchar8, vxc_short8, vxc_uchar8, 1, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_OPT(U8,  I16, U8,  Sat,  RTZ, vxc_uchar8, vxc_short8, vxc_uchar8, 1, VXC_RM_TowardZero)
MULTIPLY_A_TIMES_B_SCALE_OPT(U8,  I16, U8,  Wrap, RTE, vxc_uchar8, vxc_short8, vxc_uchar8, 0, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_OPT(U8,  I16, U8,  Wrap, RTZ, vxc_uchar8, vxc_short8, vxc_uchar8, 0, VXC_RM_TowardZero)

MULTIPLY_A_TIMES_B_SCALE_OPT(I16, U8,  U8,  Sat,  RTE, vxc_short8, vxc_uchar8, vxc_uchar8, 1, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_OPT(I16, U8,  U8,  Sat,  RTZ, vxc_short8, vxc_uchar8, vxc_uchar8, 1, VXC_RM_TowardZero)
MULTIPLY_A_TIMES_B_SCALE_OPT(I16, U8,  U8,  Wrap, RTE, vxc_short8, vxc_uchar8, vxc_uchar8, 0, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_OPT(I16, U8,  U8,  Wrap, RTZ, vxc_short8, vxc_uchar8, vxc_uchar8, 0, VXC_RM_TowardZero)

MULTIPLY_A_TIMES_B_SCALE_OPT(U8,  U8,  U8,  Sat,  RTE, vxc_uchar8, vxc_uchar8, vxc_uchar8, 1, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_OPT(U8,  U8,  U8,  Sat,  RTZ, vxc_uchar8, vxc_uchar8, vxc_uchar8, 1, VXC_RM_TowardZero)
MULTIPLY_A_TIMES_B_SCALE_OPT(U8,  U8,  U8,  Wrap, RTE, vxc_uchar8, vxc_uchar8, vxc_uchar8, 0, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_OPT(U8,  U8,  U8,  Wrap, RTZ, vxc_uchar8, vxc_uchar8, vxc_uchar8, 0, VXC_RM_TowardZero)

MULTIPLY_A_TIMES_B_SCALE_OPT(U8,  U8,  I16, Sat,  RTE, vxc_uchar8, vxc_uchar8, vxc_uchar8, 1, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_OPT(U8,  U8,  I16, Sat,  RTZ, vxc_uchar8, vxc_uchar8, vxc_uchar8, 1, VXC_RM_TowardZero)
MULTIPLY_A_TIMES_B_SCALE_OPT(U8,  U8,  I16, Wrap, RTE, vxc_uchar8, vxc_uchar8, vxc_uchar8, 0, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE_OPT(U8,  U8,  I16, Wrap, RTZ, vxc_uchar8, vxc_uchar8, vxc_uchar8, 0, VXC_RM_TowardZero)


#define MULTIPLY_A_TIMES_B_SCALE(name0, name1, name2, name3, name4, src0_type, src1_type, dst_type, over_flow, round) \
__kernel void multiply_##name0##Times##name1##to##name2##_##name3##_##name4## \
    ( \
    __read_only  image2d_t input0, \
    __read_only  image2d_t input1, \
                 float     scale, \
                 int       overflow_policy, \
                 int       round_policy, \
    __write_only image2d_t output \
    ) \
{ \
    int2 coord = (int2)(get_global_id(0), get_global_id(1)); \
 \
    src0_type src0; \
    src1_type src1; \
    dst_type dst; \
 \
    VXC_ReadImage(src0, input0, coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
    VXC_ReadImage(src1, input1, coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
 \
    int4   data0, data1, dst0, dst1; \
    float4 v0, v1; \
    VXC_DP4x4(v0, src0, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniA_Times_B_0_4x4); \
    VXC_DP4x4(v1, src0, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniA_Times_B_1_4x4); \
    VXC_DP4x4(data0, src0, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniA_Times_B_0_4x4); \
    VXC_DP4x4(data1, src0, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniA_Times_B_1_4x4); \
    v0 = v0 * fracPart; \
    v1 = v1 * fracPart; \
    _viv_asm(CONV_##name4, dst0, v0); \
    _viv_asm(CONV_##name4, dst1, v1); \
    dst0 = data0 * intPart + dst0; \
    dst1 = data1 * intPart + dst1; \
    VXC_DP2x8(dst, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, over_flow), uniExtract_8Bin_2x8); \
 \
    VXC_WriteImage(output, coord, dst, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
}

MULTIPLY_A_TIMES_B_SCALE(I16, I16, I16,  Sat,  RTE, vxc_short8, vxc_short8, vxc_short8, 1, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE(I16, I16, I16,  Sat,  RTZ, vxc_short8, vxc_short8, vxc_short8, 1, VXC_RM_TowardZero)
MULTIPLY_A_TIMES_B_SCALE(I16, I16, I16,  Wrap, RTE, vxc_short8, vxc_short8, vxc_short8, 0, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE(I16, I16, I16,  Wrap, RTZ, vxc_short8, vxc_short8, vxc_short8, 0, VXC_RM_TowardZero)

MULTIPLY_A_TIMES_B_SCALE(I16, I16, U8,  Sat,  RTE, vxc_short8, vxc_short8, vxc_uchar8, 1, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE(I16, I16, U8,  Sat,  RTZ, vxc_short8, vxc_short8, vxc_uchar8, 1, VXC_RM_TowardZero)
MULTIPLY_A_TIMES_B_SCALE(I16, I16, U8,  Wrap, RTE, vxc_short8, vxc_short8, vxc_uchar8, 0, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE(I16, I16, U8,  Wrap, RTZ, vxc_short8, vxc_short8, vxc_uchar8, 0, VXC_RM_TowardZero)

MULTIPLY_A_TIMES_B_SCALE(I16, U8,  I16, Sat,  RTE, vxc_short8, vxc_uchar8, vxc_short8, 1, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE(I16, U8,  I16, Sat,  RTZ, vxc_short8, vxc_uchar8, vxc_short8, 1, VXC_RM_TowardZero)
MULTIPLY_A_TIMES_B_SCALE(I16, U8,  I16, Wrap, RTE, vxc_short8, vxc_uchar8, vxc_short8, 0, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE(I16, U8,  I16, Wrap, RTZ, vxc_short8, vxc_uchar8, vxc_short8, 0, VXC_RM_TowardZero)

MULTIPLY_A_TIMES_B_SCALE(U8,  I16, I16, Sat,  RTE, vxc_uchar8, vxc_short8, vxc_short8, 1, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE(U8,  I16, I16, Sat,  RTZ, vxc_uchar8, vxc_short8, vxc_short8, 1, VXC_RM_TowardZero)
MULTIPLY_A_TIMES_B_SCALE(U8,  I16, I16, Wrap, RTE, vxc_uchar8, vxc_short8, vxc_short8, 0, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE(U8,  I16, I16, Wrap, RTZ, vxc_uchar8, vxc_short8, vxc_short8, 0, VXC_RM_TowardZero)

MULTIPLY_A_TIMES_B_SCALE(U8,  I16, U8,  Sat,  RTE, vxc_uchar8, vxc_short8, vxc_uchar8, 1, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE(U8,  I16, U8,  Sat,  RTZ, vxc_uchar8, vxc_short8, vxc_uchar8, 1, VXC_RM_TowardZero)
MULTIPLY_A_TIMES_B_SCALE(U8,  I16, U8,  Wrap, RTE, vxc_uchar8, vxc_short8, vxc_uchar8, 0, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE(U8,  I16, U8,  Wrap, RTZ, vxc_uchar8, vxc_short8, vxc_uchar8, 0, VXC_RM_TowardZero)

MULTIPLY_A_TIMES_B_SCALE(I16, U8,  U8,  Sat,  RTE, vxc_short8, vxc_uchar8, vxc_uchar8, 1, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE(I16, U8,  U8,  Sat,  RTZ, vxc_short8, vxc_uchar8, vxc_uchar8, 1, VXC_RM_TowardZero)
MULTIPLY_A_TIMES_B_SCALE(I16, U8,  U8,  Wrap, RTE, vxc_short8, vxc_uchar8, vxc_uchar8, 0, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE(I16, U8,  U8,  Wrap, RTZ, vxc_short8, vxc_uchar8, vxc_uchar8, 0, VXC_RM_TowardZero)

MULTIPLY_A_TIMES_B_SCALE(U8,  U8,  U8,  Sat,  RTE, vxc_uchar8, vxc_uchar8, vxc_uchar8, 1, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE(U8,  U8,  U8,  Sat,  RTZ, vxc_uchar8, vxc_uchar8, vxc_uchar8, 1, VXC_RM_TowardZero)
MULTIPLY_A_TIMES_B_SCALE(U8,  U8,  U8,  Wrap, RTE, vxc_uchar8, vxc_uchar8, vxc_uchar8, 0, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE(U8,  U8,  U8,  Wrap, RTZ, vxc_uchar8, vxc_uchar8, vxc_uchar8, 0, VXC_RM_TowardZero)

MULTIPLY_A_TIMES_B_SCALE(U8,  U8,  I16, Sat,  RTE, vxc_uchar8, vxc_uchar8, vxc_uchar8, 1, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE(U8,  U8,  I16, Sat,  RTZ, vxc_uchar8, vxc_uchar8, vxc_uchar8, 1, VXC_RM_TowardZero)
MULTIPLY_A_TIMES_B_SCALE(U8,  U8,  I16, Wrap, RTE, vxc_uchar8, vxc_uchar8, vxc_uchar8, 0, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_SCALE(U8,  U8,  I16, Wrap, RTZ, vxc_uchar8, vxc_uchar8, vxc_uchar8, 0, VXC_RM_TowardZero)

_viv_uniform VXC_512Bits uniA_Times_B_2x8;
_viv_uniform VXC_512Bits uniA_Times_F32_2x8;
#define MULTIPLY_U8_TIMES_U8(name0, name1, name2, dst_type, over_flow, round) \
    __kernel void multiply_U8TimesU8to##name0##_##name1##_##name2##_mult_postshift \
    ( \
    __read_only  image2d_t input0, \
    __read_only  image2d_t input1, \
                 float     scale, \
                 int       overflow_policy, \
                 int       round_policy, \
    __write_only image2d_t output \
    ) \
{ \
    int2 coord = (int2)(get_global_id(0), get_global_id(1)); \
 \
    vxc_uchar8 src0, src1; \
    vxc_ushort8 tmp; \
    dst_type dst; \
 \
    VXC_ReadImage(src0, input0, coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
    VXC_ReadImage(src1, input1, coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
 \
    VXC_DP2x8(tmp, src0, src1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniA_Times_B_2x8); \
    VXC_DP2x8(dst, tmp, tmp, VXC_MODIFIER(0, 7, 0, round, over_flow), uniA_Times_F32_2x8); \
 \
    VXC_WriteImage(output, coord, dst, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
}

MULTIPLY_U8_TIMES_U8(U8,  Sat,  RTE, vxc_uchar8, 1, VXC_RM_ToNearestEven)
MULTIPLY_U8_TIMES_U8(U8,  Sat,  RTZ, vxc_uchar8, 1, VXC_RM_TowardZero)
MULTIPLY_U8_TIMES_U8(U8,  Wrap, RTE, vxc_uchar8, 0, VXC_RM_ToNearestEven)
MULTIPLY_U8_TIMES_U8(U8,  Wrap, RTZ, vxc_uchar8, 0, VXC_RM_TowardZero)
MULTIPLY_U8_TIMES_U8(I16, Sat,  RTE, vxc_short8, 1, VXC_RM_ToNearestEven)
MULTIPLY_U8_TIMES_U8(I16, Sat,  RTZ, vxc_short8, 1, VXC_RM_TowardZero)
MULTIPLY_U8_TIMES_U8(I16, Wrap, RTE, vxc_short8, 0, VXC_RM_ToNearestEven)
MULTIPLY_U8_TIMES_U8(I16, Wrap, RTZ, vxc_short8, 0, VXC_RM_TowardZero)
