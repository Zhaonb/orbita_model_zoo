#pragma OPENCL EXTENSION cl_viv_vx_extension : enable

#include "cl_viv_vx_ext.h"

_viv_uniform int padBatch;
_viv_uniform int padChn;
_viv_uniform int padTop;
_viv_uniform int padLeft;
_viv_uniform int in_width;
_viv_uniform int in_height;
_viv_uniform int in_chn;
_viv_uniform int in_batch;
_viv_uniform int out_chn;

__kernel void pad_symmetric_16Bits_whc
    (
    __read_only  image2d_array_t input,
    __write_only image2d_array_t output
    )
{
    // output coordinate after offset [-padLeft, -padTop]
    int gidx = get_global_id(0);
    int gidy = get_global_id(1);
    int gidz = get_global_id(2);
    int cid = gidz % out_chn;
    int bid = gidz / (short)out_chn;
    int4 coord_out = (int4)(gidx, gidy, gidz, 0);
    gidx -= padLeft;
    gidy -= padTop;
    cid -= padChn;
    int4 coord_in = (int4)(gidx, gidy, cid + bid * in_chn, 0);
    int distx = gidx - in_width;
    int disty = gidy - in_height;
    int distz = cid - in_chn;
    if(gidx < 0)
    {
        coord_in.x = -1 - gidx;
    }
    if(distx >= 0)
    {
        coord_in.x = in_width - distx - 1;
    }
    if(gidy < 0)
    {
        coord_in.y = -1 - gidy;
    }
    if(disty >= 0)
    {
        coord_in.y = in_height - disty - 1;
    }
    if(cid < 0)
    {
        coord_in.z = -1 - cid + bid * in_chn;
    }
    if(distz >= 0)
    {
        coord_in.z = in_chn - distz - 1 + bid * in_chn;
    }

    vxc_short8 src0;
    VXC_ReadImage2DArray(src0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    VXC_WriteImage2DArray(output, coord_out, src0, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
}

__kernel void pad_symmetric_8Bits_whc
    (
    __read_only  image2d_array_t input,
    __write_only image2d_array_t output
    )
{
    // output coordinate after offset [-padLeft, -padTop]
    int gidx = get_global_id(0);
    int gidy = get_global_id(1);
    int gidz = get_global_id(2);
    int cid = gidz % out_chn;
    int bid = gidz / (short)out_chn;
    int4 coord_out = (int4)(gidx, gidy, gidz, 0);
    gidx -= padLeft;
    gidy -= padTop;
    cid -= padChn;
    int4 coord_in = (int4)(gidx, gidy, cid + bid * in_chn, 0);
    int distx = gidx - in_width;
    int disty = gidy - in_height;
    int distz = cid - in_chn;
    if(gidx < 0)
    {
        coord_in.x = -1 - gidx;
    }
    if(distx >= 0)
    {
        coord_in.x = in_width - distx - 1;
    }
    if(gidy < 0)
    {
        coord_in.y = -1 - gidy;
    }
    if(disty >= 0)
    {
        coord_in.y = in_height - disty - 1;
    }
    if(cid < 0)
    {
        coord_in.z = -1 - cid + bid * in_chn;
    }
    if(distz >= 0)
    {
        coord_in.z = in_chn - distz - 1 + bid * in_chn;
    }

    vxc_char16 src0;
    VXC_ReadImage2DArray(src0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    VXC_WriteImage2DArray(output, coord_out, src0, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
}

__kernel void pad_symmetric_8Bits_whcn
    (
    __read_only  image2d_array_t input,
    __write_only image2d_array_t output
    )
{
    // output coordinate after offset [-padLeft, -padTop]
    int gidx = get_global_id(0);
    int gidy = get_global_id(1);
    int gidz = get_global_id(2);
    int cid = gidz % out_chn;
    int bid = gidz / (short)out_chn;
    int4 coord_out = (int4)(gidx, gidy, gidz, 0);
    gidx -= padLeft;
    gidy -= padTop;
    cid -= padChn;
    bid -= padBatch;
    int4 coord_in = (int4)(gidx, gidy, 0, 0);
    int distx = gidx - in_width;
    int disty = gidy - in_height;
    int distz = cid - in_chn;
    int distw = bid - in_batch;
    if(gidx < 0)
    {
        coord_in.x = -1 - gidx;
    }
    if(distx >= 0)
    {
        coord_in.x = in_width - distx - 1;
    }
    if(gidy < 0)
    {
        coord_in.y = -1 - gidy;
    }
    if(disty >= 0)
    {
        coord_in.y = in_height - disty - 1;
    }
    if(cid < 0)
    {
        cid = -1 - cid;
    }
    if(distz >= 0)
    {
        cid = in_chn - distz - 1;
    }
    if(bid < 0)
    {
        bid = -1 - bid;
    }
    if(distw >= 0)
    {
        bid = in_batch - distw - 1;
    }
    coord_in.z = cid + bid * in_chn;

    vxc_char16 src0;
    VXC_ReadImage2DArray(src0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    VXC_WriteImage2DArray(output, coord_out, src0, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
}

__kernel void pad_symmetric_16Bits_whcn
    (
    __read_only  image2d_array_t input,
    __write_only image2d_array_t output
    )
{
    // output coordinate after offset [-padLeft, -padTop]
    int gidx = get_global_id(0);
    int gidy = get_global_id(1);
    int gidz = get_global_id(2);
    int cid = gidz % out_chn;
    int bid = gidz / (short)out_chn;
    int4 coord_out = (int4)(gidx, gidy, gidz, 0);
    gidx -= padLeft;
    gidy -= padTop;
    cid -= padChn;
    bid -= padBatch;
    int4 coord_in = (int4)(gidx, gidy, 0, 0);
    int distx = gidx - in_width;
    int disty = gidy - in_height;
    int distz = cid - in_chn;
    int distw = bid - in_batch;
    if(gidx < 0)
    {
        coord_in.x = -1 - gidx;
    }
    if(distx >= 0)
    {
        coord_in.x = in_width - distx - 1;
    }
    if(gidy < 0)
    {
        coord_in.y = -1 - gidy;
    }
    if(disty >= 0)
    {
        coord_in.y = in_height - disty - 1;
    }
    if(cid < 0)
    {
        cid = -1 - cid;
    }
    if(distz >= 0)
    {
        cid = in_chn - distz - 1;
    }
    if(bid < 0)
    {
        bid = -1 - bid;
    }
    if(distw >= 0)
    {
        bid = in_batch - distw - 1;
    }
    coord_in.z = cid + bid * in_chn;

    vxc_short8 src0;
    VXC_ReadImage2DArray(src0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    VXC_WriteImage2DArray(output, coord_out, src0, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
}

__kernel void pad_symmetric_buffer_16Bits_whc
    (
    __read_only  image2d_array_t input,
    __write_only image2d_array_t output
    )
{
    // output coordinate after offset [-padLeft, -padTop]
    int gidx = get_global_id(0);
    int gidy = get_global_id(1);
    int gidz = get_global_id(2);
    int cid = gidz % out_chn;
    int bid = gidz / (short)out_chn;
    int4 coord_out = (int4)(gidx, gidy, gidz, 0);
    gidx -= padLeft;
    gidy -= padTop;
    cid -= padChn;
    int4 coord_in = (int4)(gidx, gidy, cid + bid * in_chn, 0);
    int distx = gidx - in_width;
    int disty = gidy - in_height;
    int distz = cid - in_chn;
    if(gidx < 0)
    {
        coord_in.x = -1 - gidx;
    }
    if(distx >= 0)
    {
        coord_in.x = in_width - distx - 1;
    }
    if(gidy < 0)
    {
        coord_in.y = -1 - gidy;
    }
    if(disty >= 0)
    {
        coord_in.y = in_height - disty - 1;
    }
    if(cid < 0)
    {
        coord_in.z = -1 - cid + bid * in_chn;
    }
    if(distz >= 0)
    {
        coord_in.z = in_chn - distz - 1 + bid * in_chn;
    }

    Tensor input_t =  create_tensor_from_image2d_array(input, 2);
    Tensor output_t =  create_tensor_from_image2d_array(output, 2);
    short *input_ptr = (short *)get_tensor_ptr_from_coord(input_t, coord_in);
    short *output_ptr = (short *)get_tensor_ptr_from_coord(output_t, coord_out);

    output_ptr[0] = input_ptr[0];
}

__kernel void pad_symmetric_buffer_8Bits_whc
    (
    __read_only  image2d_array_t input,
    __write_only image2d_array_t output
    )
{
    // output coordinate after offset [-padLeft, -padTop]
    int gidx = get_global_id(0);
    int gidy = get_global_id(1);
    int gidz = get_global_id(2);
    int cid = gidz % out_chn;
    int bid = gidz / (short)out_chn;
    int4 coord_out = (int4)(gidx, gidy, gidz, 0);
    gidx -= padLeft;
    gidy -= padTop;
    cid -= padChn;
    int4 coord_in = (int4)(gidx, gidy, cid + bid * in_chn, 0);
    int distx = gidx - in_width;
    int disty = gidy - in_height;
    int distz = cid - in_chn;
    if(gidx < 0)
    {
        coord_in.x = -1 - gidx;
    }
    if(distx >= 0)
    {
        coord_in.x = in_width - distx - 1;
    }
    if(gidy < 0)
    {
        coord_in.y = -1 - gidy;
    }
    if(disty >= 0)
    {
        coord_in.y = in_height - disty - 1;
    }
    if(cid < 0)
    {
        coord_in.z = -1 - cid + bid * in_chn;
    }
    if(distz >= 0)
    {
        coord_in.z = in_chn - distz - 1 + bid * in_chn;
    }

    Tensor input_t =  create_tensor_from_image2d_array(input, 1);
    Tensor output_t =  create_tensor_from_image2d_array(output, 1);
    uchar *input_ptr = (uchar *)get_tensor_ptr_from_coord(input_t, coord_in);
    uchar *output_ptr = (uchar *)get_tensor_ptr_from_coord(output_t, coord_out);

    output_ptr[0] = input_ptr[0];
}

__kernel void pad_symmetric_buffer_8Bits_whcn
    (
    __read_only  image2d_array_t input,
    __write_only image2d_array_t output
    )
{
    // output coordinate after offset [-padLeft, -padTop]
    int gidx = get_global_id(0);
    int gidy = get_global_id(1);
    int gidz = get_global_id(2);
    int cid = gidz % out_chn;
    int bid = gidz / (short)out_chn;
    int4 coord_out = (int4)(gidx, gidy, gidz, 0);
    gidx -= padLeft;
    gidy -= padTop;
    cid -= padChn;
    bid -= padBatch;
    int4 coord_in = (int4)(gidx, gidy, 0, 0);
    int distx = gidx - in_width;
    int disty = gidy - in_height;
    int distz = cid - in_chn;
    int distw = bid - in_batch;
    if(gidx < 0)
    {
        coord_in.x = -1 - gidx;
    }
    if(distx >= 0)
    {
        coord_in.x = in_width - distx - 1;
    }
    if(gidy < 0)
    {
        coord_in.y = -1 - gidy;
    }
    if(disty >= 0)
    {
        coord_in.y = in_height - disty - 1;
    }
    if(cid < 0)
    {
        cid = -1 - cid;
    }
    if(distz >= 0)
    {
        cid = in_chn - distz - 1;
    }
    if(bid < 0)
    {
        bid = -1 - bid;
    }
    if(distw >= 0)
    {
        bid = in_batch - distw - 1;
    }
    coord_in.z = cid + bid * in_chn;

    Tensor input_t =  create_tensor_from_image2d_array(input, 1);
    Tensor output_t =  create_tensor_from_image2d_array(output, 1);
    uchar *input_ptr = (uchar *)get_tensor_ptr_from_coord(input_t, coord_in);
    uchar *output_ptr = (uchar *)get_tensor_ptr_from_coord(output_t, coord_out);

    output_ptr[0] = input_ptr[0];
}

__kernel void pad_symmetric_buffer_16Bits_whcn
    (
    __read_only  image2d_array_t input,
    __write_only image2d_array_t output
    )
{
    // output coordinate after offset [-padLeft, -padTop]
    int gidx = get_global_id(0);
    int gidy = get_global_id(1);
    int gidz = get_global_id(2);
    int cid = gidz % out_chn;
    int bid = gidz / (short)out_chn;
    int4 coord_out = (int4)(gidx, gidy, gidz, 0);
    gidx -= padLeft;
    gidy -= padTop;
    cid -= padChn;
    bid -= padBatch;
    int4 coord_in = (int4)(gidx, gidy, 0, 0);
    int distx = gidx - in_width;
    int disty = gidy - in_height;
    int distz = cid - in_chn;
    int distw = bid - in_batch;
    if(gidx < 0)
    {
        coord_in.x = -1 - gidx;
    }
    if(distx >= 0)
    {
        coord_in.x = in_width - distx - 1;
    }
    if(gidy < 0)
    {
        coord_in.y = -1 - gidy;
    }
    if(disty >= 0)
    {
        coord_in.y = in_height - disty - 1;
    }
    if(cid < 0)
    {
        cid = -1 - cid;
    }
    if(distz >= 0)
    {
        cid = in_chn - distz - 1;
    }
    if(bid < 0)
    {
        bid = -1 - bid;
    }
    if(distw >= 0)
    {
        bid = in_batch - distw - 1;
    }
    coord_in.z = cid + bid * in_chn;

    Tensor input_t =  create_tensor_from_image2d_array(input, 2);
    Tensor output_t =  create_tensor_from_image2d_array(output, 2);
    short *input_ptr = (short *)get_tensor_ptr_from_coord(input_t, coord_in);
    short *output_ptr = (short *)get_tensor_ptr_from_coord(output_t, coord_out);

    output_ptr[0] = input_ptr[0];
}
