#pragma OPENCL EXTENSION cl_viv_vx_extension : enable

#include "cl_viv_vx_ext.h"

_viv_uniform float logE;
_viv_uniform float twoLogE;
_viv_uniform int num_units;
_viv_uniform float forget_bias;
float4 sigmoid(float4 x)
{
    x *= -logE;
    x = 1 + exp2(x);
    return 1 / x;
}
float4 tangentH(float4 x)
{
    x *= -twoLogE;
    x = 1 + exp2(x);
    x = 1 / x;
    return 2 * x - 1;
}
_viv_uniform VXC_512Bits uniFp16AddFp16toFp32_4x4;
_viv_uniform float outputScale;
_viv_uniform float outputZP;
_viv_uniform VXC_512Bits uniExtract8Data_2x8;
_viv_uniform VXC_512Bits uniFp16toFp32_4x4;
_viv_uniform VXC_512Bits uniExtractHalf4_4x4;

#define LSTMUNIT_EXT_CELL_FP32_P5_PROJECTION(out_type_name, convert_type, dst_type, copy_type) \
__kernel void vxcLSTMUnitExt_F16to##out_type_name##_CELL_F32_Projection( \
    __read_only  image2d_array_t  input_conv, \
    __read_only  image2d_t        cell_state_in, \
    __read_only  image2d_t        biases, \
    __write_only image2d_array_t  output, \
    __write_only image2d_t        cell_state_out, \
    __read_only  image2d_array_t  hidden_conv \
    ) \
{ \
    int4 coord_in = (int4)(get_global_id(0), get_global_id(1), get_global_id(0), 0); \
    vxc_short8 vect0, vect1, vect2, vect3; \
    vxc_half8  src0, src1, src2, src3; \
    vxc_short8 vect10, vect11, vect12, vect13; \
    vxc_half8  src10, src11, src12, src13; \
    float4 data_i_t, data_f_t, data_g_t, data_o_t, data_c_t; \
    float4 b0, b1, b2, b3; \
    VXC_ReadImage(vect0, input_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src0, vect0, 16); \
    VXC_ReadImage(vect10, hidden_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src10, vect10, 16); \
    coord_in.x += num_units; \
    VXC_ReadImage(vect1, input_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src1, vect1, 16); \
    VXC_ReadImage(vect11, hidden_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src11, vect11, 16); \
    coord_in.x += num_units; \
    VXC_ReadImage(vect2, input_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src2, vect2, 16); \
    VXC_ReadImage(vect12, hidden_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src12, vect12, 16); \
    coord_in.x += num_units; \
    VXC_ReadImage(vect3, input_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src3, vect3, 16); \
    VXC_ReadImage(vect13, hidden_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src13, vect13, 16); \
    data_c_t = read_imagef(cell_state_in, coord_in.zy); \
    coord_in.z >>= 2; \
    b0 = read_imagef(biases, coord_in.wz); \
    coord_in.w += 4; \
    b1 = read_imagef(biases, coord_in.wz); \
    coord_in.w += 4; \
    b2 = read_imagef(biases, coord_in.wz); \
    coord_in.w += 4; \
    b3 = read_imagef(biases, coord_in.wz); \
    coord_in.z <<= 2; \
 \
    VXC_DP4x4(data_i_t, src0, src10, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16AddFp16toFp32_4x4); \
    VXC_DP4x4(data_f_t, src1, src11, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16AddFp16toFp32_4x4); \
    VXC_DP4x4(data_g_t, src2, src12, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16AddFp16toFp32_4x4); \
    VXC_DP4x4(data_o_t, src3, src13, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16AddFp16toFp32_4x4); \
    data_i_t = data_i_t + b0; \
    data_f_t = data_f_t + b1; \
    data_g_t = data_g_t + b2; \
    data_o_t = data_o_t + b3; \
 \
    convert_type dst0; \
    data_i_t = sigmoid(data_i_t); \
    data_f_t = sigmoid(data_f_t + forget_bias); \
    data_g_t = tangentH(data_g_t); \
    data_i_t = data_i_t * data_g_t; \
    data_c_t = data_c_t * data_f_t + data_i_t; \
    data_o_t = sigmoid(data_o_t); \
    write_imagef(cell_state_out, coord_in.zy, data_c_t); \
    data_c_t = tangentH(data_c_t); \
    data_o_t = data_o_t * data_c_t * outputScale + outputZP; \
    _viv_asm(CONV_RTE, dst0, data_o_t); \
    dst_type dst1; \
    VXC_DP2x8(dst1, dst0, dst0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniExtract8Data_2x8); \
    copy_type dst; \
    _viv_asm(COPY, dst, dst1, 16); \
    VXC_WriteImage(output, coord_in.zy, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
}

//LSTMUNIT_EXT_CELL_FP32_P5_PROJECTION(I8,  int4,  vxc_char4,  vxc_char4)
//LSTMUNIT_EXT_CELL_FP32_P5_PROJECTION(U8,  int4,  vxc_uchar4, vxc_uchar4)
//LSTMUNIT_EXT_CELL_FP32_P5_PROJECTION(I16, int4,  vxc_short4, vxc_short4)
LSTMUNIT_EXT_CELL_FP32_P5_PROJECTION(F16, half4, vxc_half4,  vxc_short4)

#define LSTMUNIT_EXT_CELL_FP16_P5_PROJECTION(out_type_name, convert_type, dst_type, copy_type) \
__kernel void vxcLSTMUnitExt_F16to##out_type_name##_CELL_F16_Projection( \
    __read_only  image2d_array_t  input_conv, \
    __read_only  image2d_array_t  cell_state_in, \
    __read_only  image2d_t        biases, \
    __write_only image2d_array_t  output, \
    __write_only image2d_array_t  cell_state_out, \
    __read_only  image2d_array_t  hidden_conv \
    ) \
{ \
    int4 coord_in = (int4)(get_global_id(0), get_global_id(1), get_global_id(0), 0); \
    vxc_short8 vect0, vect1, vect2, vect3, vect4; \
    vxc_half8  src0, src1, src2, src3, src4; \
    vxc_short8 vect10, vect11, vect12, vect13; \
    vxc_half8  src10, src11, src12, src13; \
    float4 data_i_t, data_f_t, data_g_t, data_o_t, data_c_t; \
    float4 b0, b1, b2, b3; \
    VXC_ReadImage(vect0, input_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src0, vect0, 16); \
    VXC_ReadImage(vect10, hidden_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src10, vect10, 16); \
    coord_in.x += num_units; \
    VXC_ReadImage(vect1, input_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src1, vect1, 16); \
    VXC_ReadImage(vect11, hidden_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src11, vect11, 16); \
    coord_in.x += num_units; \
    VXC_ReadImage(vect2, input_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src2, vect2, 16); \
    VXC_ReadImage(vect12, hidden_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src12, vect12, 16); \
    VXC_ReadImage(vect4, cell_state_in, coord_in.zy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src4, vect4, 16); \
    coord_in.x += num_units; \
    VXC_ReadImage(vect3, input_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src3, vect3, 16); \
    VXC_ReadImage(vect13, hidden_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src13, vect13, 16); \
    coord_in.z >>= 2; \
    b0 = read_imagef(biases, coord_in.wz); \
    coord_in.w += 4; \
    b1 = read_imagef(biases, coord_in.wz); \
    coord_in.w += 4; \
    b2 = read_imagef(biases, coord_in.wz); \
    coord_in.w += 4; \
    b3 = read_imagef(biases, coord_in.wz); \
    coord_in.z <<= 2; \
 \
    VXC_DP4x4(data_i_t, src0, src10, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16AddFp16toFp32_4x4); \
    VXC_DP4x4(data_f_t, src1, src11, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16AddFp16toFp32_4x4); \
    VXC_DP4x4(data_g_t, src2, src12, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16AddFp16toFp32_4x4); \
    VXC_DP4x4(data_c_t, src4, src4, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4); \
    VXC_DP4x4(data_o_t, src3, src13, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16AddFp16toFp32_4x4); \
    data_i_t = data_i_t + b0; \
    data_f_t = data_f_t + b1; \
    data_g_t = data_g_t + b2; \
    data_o_t = data_o_t + b3; \
 \
    convert_type dst0; \
    half4 dst_cell; \
    data_i_t = sigmoid(data_i_t); \
    data_f_t = sigmoid(data_f_t + forget_bias); \
    data_g_t = tangentH(data_g_t); \
    data_i_t = data_i_t * data_g_t; \
    data_c_t = data_c_t * data_f_t + data_i_t; \
    data_o_t = sigmoid(data_o_t); \
    _viv_asm(CONV, dst_cell, data_c_t); \
    VXC_DP4x4(src0, dst_cell, dst_cell, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniExtractHalf4_4x4); \
    _viv_asm(COPY, vect0, src0, 8); \
    VXC_WriteImage(cell_state_out, coord_in.zy, vect0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    data_c_t = tangentH(data_c_t); \
    data_o_t = data_o_t * data_c_t * outputScale + outputZP; \
    _viv_asm(CONV_RTE, dst0, data_o_t); \
    dst_type dst1; \
    VXC_DP2x8(dst1, dst0, dst0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniExtract8Data_2x8); \
    copy_type dst; \
    _viv_asm(COPY, dst, dst1, 16); \
    VXC_WriteImage(output, coord_in.zy, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
}

//LSTMUNIT_EXT_CELL_FP16_P5_PROJECTION(I8,  int4,  vxc_char4,  vxc_char4)
//LSTMUNIT_EXT_CELL_FP16_P5_PROJECTION(U8,  int4,  vxc_uchar4, vxc_uchar4)
//LSTMUNIT_EXT_CELL_FP16_P5_PROJECTION(I16, int4,  vxc_short4, vxc_short4)
LSTMUNIT_EXT_CELL_FP16_P5_PROJECTION(F16, half4, vxc_half4,  vxc_short4)


#define LSTMUNIT_EXT_CELL_FP32_P6(out_type_name, convert_type, dst_type, copy_type) \
__kernel void vxcLSTMUnitExt_F16to##out_type_name##_CELL_F32( \
    __read_only  image2d_array_t  input_conv, \
    __read_only  image2d_t        cell_state_in, \
    __read_only  image2d_t        biases, \
    __write_only image2d_array_t  output, \
    __write_only image2d_t        cell_state_out, \
    __read_only  image2d_array_t  hidden_conv, \
    __write_only image2d_array_t  hidden_state_out \
    ) \
{ \
    int4 coord_in = (int4)(get_global_id(0), get_global_id(1), get_global_id(0), 0); \
    vxc_short8 vect0, vect1, vect2, vect3; \
    vxc_half8  src0, src1, src2, src3; \
    vxc_short8 vect10, vect11, vect12, vect13; \
    vxc_half8  src10, src11, src12, src13; \
    float4 data_i_t, data_f_t, data_g_t, data_o_t, data_c_t; \
    float4 b0, b1, b2, b3; \
    VXC_ReadImage(vect0, input_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src0, vect0, 16); \
    VXC_ReadImage(vect10, hidden_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src10, vect10, 16); \
    coord_in.x += num_units; \
    VXC_ReadImage(vect1, input_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src1, vect1, 16); \
    VXC_ReadImage(vect11, hidden_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src11, vect11, 16); \
    coord_in.x += num_units; \
    VXC_ReadImage(vect2, input_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src2, vect2, 16); \
    VXC_ReadImage(vect12, hidden_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src12, vect12, 16); \
    coord_in.x += num_units; \
    VXC_ReadImage(vect3, input_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src3, vect3, 16); \
    VXC_ReadImage(vect13, hidden_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src13, vect13, 16); \
    data_c_t = read_imagef(cell_state_in, coord_in.zy); \
    coord_in.z >>= 2; \
    b0 = read_imagef(biases, coord_in.wz); \
    coord_in.w += 4; \
    b1 = read_imagef(biases, coord_in.wz); \
    coord_in.w += 4; \
    b2 = read_imagef(biases, coord_in.wz); \
    coord_in.w += 4; \
    b3 = read_imagef(biases, coord_in.wz); \
    coord_in.z <<= 2; \
 \
    VXC_DP4x4(data_i_t, src0, src10, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16AddFp16toFp32_4x4); \
    VXC_DP4x4(data_f_t, src1, src11, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16AddFp16toFp32_4x4); \
    VXC_DP4x4(data_g_t, src2, src12, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16AddFp16toFp32_4x4); \
    VXC_DP4x4(data_o_t, src3, src13, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16AddFp16toFp32_4x4); \
    data_i_t = data_i_t + b0; \
    data_f_t = data_f_t + b1; \
    data_g_t = data_g_t + b2; \
    data_o_t = data_o_t + b3; \
 \
    convert_type dst0; \
    data_i_t = sigmoid(data_i_t); \
    data_f_t = sigmoid(data_f_t + forget_bias); \
    data_g_t = tangentH(data_g_t); \
    data_i_t = data_i_t * data_g_t; \
    data_c_t = data_c_t * data_f_t + data_i_t; \
    data_o_t = sigmoid(data_o_t); \
    write_imagef(cell_state_out, coord_in.zy, data_c_t); \
    data_c_t = tangentH(data_c_t); \
    data_o_t = data_o_t * data_c_t * outputScale + outputZP; \
    _viv_asm(CONV_RTE, dst0, data_o_t); \
    dst_type dst1; \
    VXC_DP2x8(dst1, dst0, dst0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniExtract8Data_2x8); \
    copy_type dst; \
    _viv_asm(COPY, dst, dst1, 16); \
    VXC_WriteImage(output, coord_in.zy, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    VXC_WriteImage(hidden_state_out, coord_in.zy, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
}

LSTMUNIT_EXT_CELL_FP32_P6(I8,  int4,  vxc_char4,  vxc_char4)
LSTMUNIT_EXT_CELL_FP32_P6(U8,  int4,  vxc_uchar4, vxc_uchar4)
LSTMUNIT_EXT_CELL_FP32_P6(I16, int4,  vxc_short4, vxc_short4)
LSTMUNIT_EXT_CELL_FP32_P6(F16, half4, vxc_half4,  vxc_short4)

#define LSTMUNIT_EXT_CELL_FP16_P6(out_type_name, convert_type, dst_type, copy_type) \
__kernel void vxcLSTMUnitExt_F16to##out_type_name##_CELL_F16( \
    __read_only  image2d_array_t  input_conv, \
    __read_only  image2d_array_t  cell_state_in, \
    __read_only  image2d_t        biases, \
    __write_only image2d_array_t  output, \
    __write_only image2d_array_t  cell_state_out, \
    __read_only  image2d_array_t  hidden_conv, \
    __write_only image2d_array_t  hidden_state_out \
    ) \
{ \
    int4 coord_in = (int4)(get_global_id(0), get_global_id(1), get_global_id(0), 0); \
    vxc_short8 vect0, vect1, vect2, vect3, vect4; \
    vxc_half8  src0, src1, src2, src3, src4; \
    vxc_short8 vect10, vect11, vect12, vect13; \
    vxc_half8  src10, src11, src12, src13; \
    float4 data_i_t, data_f_t, data_g_t, data_o_t, data_c_t; \
    float4 b0, b1, b2, b3; \
    VXC_ReadImage(vect0, input_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src0, vect0, 16); \
    VXC_ReadImage(vect10, hidden_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src10, vect10, 16); \
    coord_in.x += num_units; \
    VXC_ReadImage(vect1, input_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src1, vect1, 16); \
    VXC_ReadImage(vect11, hidden_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src11, vect11, 16); \
    coord_in.x += num_units; \
    VXC_ReadImage(vect2, input_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src2, vect2, 16); \
    VXC_ReadImage(vect12, hidden_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src12, vect12, 16); \
    VXC_ReadImage(vect4, cell_state_in, coord_in.zy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src4, vect4, 16); \
    coord_in.x += num_units; \
    VXC_ReadImage(vect3, input_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src3, vect3, 16); \
    VXC_ReadImage(vect13, hidden_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src13, vect13, 16); \
    coord_in.z >>= 2; \
    b0 = read_imagef(biases, coord_in.wz); \
    coord_in.w += 4; \
    b1 = read_imagef(biases, coord_in.wz); \
    coord_in.w += 4; \
    b2 = read_imagef(biases, coord_in.wz); \
    coord_in.w += 4; \
    b3 = read_imagef(biases, coord_in.wz); \
    coord_in.z <<= 2; \
 \
    VXC_DP4x4(data_i_t, src0, src10, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16AddFp16toFp32_4x4); \
    VXC_DP4x4(data_f_t, src1, src11, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16AddFp16toFp32_4x4); \
    VXC_DP4x4(data_g_t, src2, src12, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16AddFp16toFp32_4x4); \
    VXC_DP4x4(data_c_t, src4, src4, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4); \
    VXC_DP4x4(data_o_t, src3, src13, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16AddFp16toFp32_4x4); \
    data_i_t = data_i_t + b0; \
    data_f_t = data_f_t + b1; \
    data_g_t = data_g_t + b2; \
    data_o_t = data_o_t + b3; \
 \
    convert_type dst0; \
    half4 dst_cell; \
    data_i_t = sigmoid(data_i_t); \
    data_f_t = sigmoid(data_f_t + forget_bias); \
    data_g_t = tangentH(data_g_t); \
    data_i_t = data_i_t * data_g_t; \
    data_c_t = data_c_t * data_f_t + data_i_t; \
    data_o_t = sigmoid(data_o_t); \
    _viv_asm(CONV, dst_cell, data_c_t); \
    VXC_DP4x4(src0, dst_cell, dst_cell, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniExtractHalf4_4x4); \
    _viv_asm(COPY, vect0, src0, 8); \
    VXC_WriteImage(cell_state_out, coord_in.zy, vect0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    data_c_t = tangentH(data_c_t); \
    data_o_t = data_o_t * data_c_t * outputScale + outputZP; \
    _viv_asm(CONV_RTE, dst0, data_o_t); \
    dst_type dst1; \
    VXC_DP2x8(dst1, dst0, dst0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniExtract8Data_2x8); \
    copy_type dst; \
    _viv_asm(COPY, dst, dst1, 16); \
    VXC_WriteImage(output, coord_in.zy, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    VXC_WriteImage(hidden_state_out, coord_in.zy, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
}

LSTMUNIT_EXT_CELL_FP16_P6(I8,  int4,  vxc_char4,  vxc_char4)
LSTMUNIT_EXT_CELL_FP16_P6(U8,  int4,  vxc_uchar4, vxc_uchar4)
LSTMUNIT_EXT_CELL_FP16_P6(I16, int4,  vxc_short4, vxc_short4)
LSTMUNIT_EXT_CELL_FP16_P6(F16, half4, vxc_half4,  vxc_short4)
