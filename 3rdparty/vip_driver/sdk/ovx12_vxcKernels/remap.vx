#pragma OPENCL EXTENSION cl_viv_vx_extension : enable

#include "cl_viv_vx_ext.h"


__kernel void remap_nearest_neighbor_U8toU8
(
    __read_only  image2d_t  input,
                 vx_remap   map,
                 int        type,
    __write_only image2d_t output
)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(0) + 1, get_global_id(1));

    float *base_ptr = (float*)map.ptr + coord.y * map.dst_width * 2 + coord.x * 2;
    float4 data = vload4(0, base_ptr);

    int4 coord_in = convert_int4(data);

    vxc_uchar16 dst;
    VXC_ReadImage(dst, input, coord_in.xy, 0, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(dst, input, coord_in.zw, 0, VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));

    data = vload4(1, base_ptr);
    coord_in = convert_int4(data);
    VXC_ReadImage(dst, input, coord_in.xy, 0, VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(dst, input, coord_in.zw, 0, VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));

    data = vload4(2, base_ptr);
    coord_in = convert_int4(data);
    VXC_ReadImage(dst, input, coord_in.xy, 0, VXC_MODIFIER(4, 4, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(dst, input, coord_in.zw, 0, VXC_MODIFIER(5, 5, 0, VXC_RM_TowardZero, 0));

    data = vload4(3, base_ptr);
    coord_in = convert_int4(data);
    VXC_ReadImage(dst, input, coord_in.xy, 0, VXC_MODIFIER(6, 6, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(dst, input, coord_in.zw, 0, VXC_MODIFIER(7, 7, 0, VXC_RM_TowardZero, 0));

    VXC_WriteImage(output, coord, dst, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}

__kernel void remap_bilinear_U8toU8
(
    __read_only  image2d_t  input,
                 vx_remap   map,
                 int        type,
    __write_only image2d_t output
)
{
    int2   coord = (int2)(get_global_id(0), get_global_id(1));

    float *base_ptr = (float*)map.ptr + coord.y * map.dst_width * 2 + coord.x * 2;
    float4 data = vload4(0, base_ptr);

    int4 coord_in = convert_int4(data);

    vxc_uchar16 src0, src1, dst;
    VXC_ReadImage(src0, input, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src1, input, coord_in.xy, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
#if (VX_VERSION==1)
    VXC_BiLinear(dst, src0, src1, data.xy, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
#else
    VXC_Lerp(src0, src0, src1, data.y, VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    src1.s0 = src0.s1;
    VXC_Lerp(dst, src0, src1, data.x, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
#endif

    VXC_ReadImage(src0, input, coord_in.zw, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src1, input, coord_in.zw, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
#if (VX_VERSION==1)
    VXC_BiLinear(dst, src0, src1, data.zw, VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));
#else
    VXC_Lerp(src0, src0, src1, data.w, VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    src1.s0 = src0.s1;
    VXC_Lerp(dst, src0, src1, data.z, VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));
#endif

    data = vload4(1, base_ptr);
    coord_in = convert_int4(data);
    VXC_ReadImage(src0, input, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src1, input, coord_in.xy, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
#if (VX_VERSION==1)
    VXC_BiLinear(dst, src0, src1, data.xy, VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));
#else
    VXC_Lerp(src0, src0, src1, data.y, VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    src1.s0 = src0.s1;
    VXC_Lerp(dst, src0, src1, data.x, VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));
#endif

    VXC_ReadImage(src0, input, coord_in.zw, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src1, input, coord_in.zw, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
#if (VX_VERSION==1)
    VXC_BiLinear(dst, src0, src1, data.zw, VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));
#else
    VXC_Lerp(src0, src0, src1, data.w, VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    src1.s0 = src0.s1;
    VXC_Lerp(dst, src0, src1, data.z, VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));
#endif

    data = vload4(2, base_ptr);
    coord_in = convert_int4(data);
    VXC_ReadImage(src0, input, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src1, input, coord_in.xy, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
#if (VX_VERSION==1)
    VXC_BiLinear(dst, src0, src1, data.xy, VXC_MODIFIER(4, 4, 0, VXC_RM_TowardZero, 0));
#else
    VXC_Lerp(src0, src0, src1, data.y, VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    src1.s0 = src0.s1;
    VXC_Lerp(dst, src0, src1, data.x, VXC_MODIFIER(4, 4, 0, VXC_RM_TowardZero, 0));
#endif

    VXC_ReadImage(src0, input, coord_in.zw, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src1, input, coord_in.zw, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
#if (VX_VERSION==1)
    VXC_BiLinear(dst, src0, src1, data.zw, VXC_MODIFIER(5, 5, 0, VXC_RM_TowardZero, 0));
#else
    VXC_Lerp(src0, src0, src1, data.w, VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    src1.s0 = src0.s1;
    VXC_Lerp(dst, src0, src1, data.z, VXC_MODIFIER(5, 5, 0, VXC_RM_TowardZero, 0));
#endif

    data = vload4(3, base_ptr);
    coord_in = convert_int4(data);
    VXC_ReadImage(src0, input, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src1, input, coord_in.xy, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
#if (VX_VERSION==1)
    VXC_BiLinear(dst, src0, src1, data.xy, VXC_MODIFIER(6, 6, 0, VXC_RM_TowardZero, 0));
#else
    VXC_Lerp(src0, src0, src1, data.y, VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    src1.s0 = src0.s1;
    VXC_Lerp(dst, src0, src1, data.x, VXC_MODIFIER(6, 6, 0, VXC_RM_TowardZero, 0));
#endif

    VXC_ReadImage(src0, input, coord_in.zw, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src1, input, coord_in.zw, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
#if (VX_VERSION==1)
    VXC_BiLinear(dst, src0, src1, data.zw, VXC_MODIFIER(7, 7, 0, VXC_RM_TowardZero, 0));
#else
    VXC_Lerp(src0, src0, src1, data.w, VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    src1.s0 = src0.s1;
    VXC_Lerp(dst, src0, src1, data.z, VXC_MODIFIER(7, 7, 0, VXC_RM_TowardZero, 0));
#endif

    VXC_WriteImage(output, coord, dst, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}
