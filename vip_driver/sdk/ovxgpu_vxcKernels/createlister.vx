typedef struct _vx_keypoint_t
{
    int     x;
    int     y;
    float   strength;
    float   scale;
    float   orientation;
    int     tracking_status;
    float   error;
}
vx_keypoint_t;

__kernel void createlister_U8(
    __read_only   image2d_t      inputImage,
    __write_only  image2d_t      countImage,
          global  unsigned char* outArray
)
{
    int x = get_global_id(0);
    int y = get_global_id(1);
    uint strength = read_imageui(inputImage, (int2)(x,y)).x;
    if (strength == 0) return;
    int width = get_image_width(inputImage);

    vx_keypoint_t* array = (vx_keypoint_t*)outArray;
    array[x + y * width].x = x;
    array[x + y * width].y = y;
    array[x + y * width].strength = convert_float(strength);
    array[x + y * width].scale = 0.0f;
    array[x + y * width].orientation = 0.0f;
    array[x + y * width].tracking_status = 1;
    array[x + y * width].error = 0.0f;
}

__kernel void createlister_S16orS32(
     __read_only   image2d_t      inputImage,
     __write_only  image2d_t      countImage,
           global  unsigned char* outArray
)
{
    int x = get_global_id(0);
    int y = get_global_id(1);
    int strength = read_imagei(inputImage, (int2)(x,y)).x;
    if (strength == 0) return;
    int width = get_image_width(inputImage);

    vx_keypoint_t* array = (vx_keypoint_t*)outArray;
    array[x + y * width].x = x;
    array[x + y * width].y = y;
    array[x + y * width].strength = convert_float(strength);
    array[x + y * width].scale = 0.0f;
    array[x + y * width].orientation = 0.0f;
    array[x + y * width].tracking_status = 1;
    array[x + y * width].error = 0.0f;
}

__kernel void createlister_F32(
    __read_only   image2d_t      inputImage,
    __write_only  image2d_t      countImage,
          global  unsigned char* outArray
)
{
    int x = get_global_id(0);
    int y = get_global_id(1);
    float strength = read_imagef(inputImage, (int2)(x,y)).x;
    if (strength == 0) return;
    int width = get_image_width(inputImage);

    vx_keypoint_t* array = (vx_keypoint_t*)outArray;
    array[x + y * width].x = x;
    array[x + y * width].y = y;
    array[x + y * width].strength = strength;
    array[x + y * width].scale = 0.0f;
    array[x + y * width].orientation = 0.0f;
    array[x + y * width].tracking_status = 1;
    array[x + y * width].error = 0.0f;
}
